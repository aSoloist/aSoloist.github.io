<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Mybatis Example 用法]]></title>
      <url>/2018/04/17/Mybatis%20Example%20%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="Example-类是什么"><a href="#Example-类是什么" class="headerlink" title="Example 类是什么"></a>Example 类是什么</h2><p>Example类指定如何构建一个动态的where子句. 表中的每个non-BLOB列可以被包括在where子句中。例子是展示此类用法的最好方式。</p>
<p>Example类可以用来生成一个几乎无限的where子句.</p>
<p>Example类包含一个内部静态类 Criteria 包含一个用 anded 组合在where子句中的条件列表. Example类包含一个 List 属性,所有内部类Criteria中的子句会用 ored组合在一起. 使用不同属性的 Criteria 类允许您生成无限类型的where子句.</p>
<p>创建 Criteria 对象 可以使用Example类中的 createCriteria() 或者 or() . 如果 Criteria 对象是用 createCriteria() 创建的，它会自动为 List 属性添加一个 Criteria 对象 - 这使得它更容易写一个简单的where子句， 如果您不需要 or 或者其他几个子句组合的话. 用 or(Criteria criteria) 方法创建 Criteria 对象, 方法里的 criteria 对象会被添加进 Criteria 对象的列表中.</p>
<p><strong>重要</strong> </p>
<p>我们推荐您只使用 or() 方法创建 Criteria 对象. 我们相信这种方法使代码更有可读性.</p>
<h2 id="如何生成Example类"><a href="#如何生成Example类" class="headerlink" title="如何生成Example类"></a>如何生成Example类</h2><p>mybatis的的配置文件可以使用mybatis-generator工具生成，它就可以帮我们生成example类。 </p>
<p>当我们需要生成example类的时候，只需要在配置文件的table里面去掉</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</div><div class="line">enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</div><div class="line">selectByExampleQueryId=&quot;false&quot;</div></pre></td></tr></table></figure>
<h2 id="如何使用Example"><a href="#如何使用Example" class="headerlink" title="如何使用Example"></a>如何使用Example</h2><h3 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h3><p>这个例子展示了如何用生成后的Example类去生成一个简单的where子句:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">TableExample example = <span class="keyword">new</span> TableExample();</div><div class="line">example.createCriteria().andFieldEqualTo(<span class="number">5</span>);</div></pre></td></tr></table></figure>
<p>作为另一种选择, 下面的方式也是可以的:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">TestTableExample example = <span class="keyword">new</span> TestTableExample();</div><div class="line">example.or().andFieldEqualTo(<span class="number">5</span>);</div></pre></td></tr></table></figure>
<p>在上面的例子中, 动态生成的where子句是:</p>
<pre><code>where field = 5
</code></pre><h3 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h3><p>下面的例子展示了如何用生成后的Example类去生成一个复杂的where子句:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">TableExample example = <span class="keyword">new</span> TableExample();</div><div class="line">    </div><div class="line">example.or() </div><div class="line">.andField1EqualTo(<span class="number">5</span>) </div><div class="line">.andField2IsNull();</div><div class="line">    </div><div class="line">example.or() </div><div class="line">.andField3NotEqualTo(<span class="number">9</span>) </div><div class="line">.andField4IsNotNull();</div><div class="line">    </div><div class="line">List field5Values = <span class="keyword">new</span> ArrayList(); </div><div class="line">field5Values.add(<span class="number">8</span>); </div><div class="line">field5Values.add(<span class="number">11</span>); </div><div class="line">field5Values.add(<span class="number">14</span>); </div><div class="line">field5Values.add(<span class="number">22</span>);</div><div class="line">    </div><div class="line">example.or() </div><div class="line">.andField5In(field5Values);</div><div class="line"></div><div class="line">example.or() </div><div class="line">.andField6Between(<span class="number">3</span>, <span class="number">7</span>);</div></pre></td></tr></table></figure>
<p>在上面的例子中, 动态生成的where子句是:</p>
<pre><code>where (field1 = 5 and field2 is null) 
or (field3 &lt;&gt; 9 and field4 is not null) 
or (field5 in (8, 11, 14, 22)) 
or (field6 between 3 and 7) 
</code></pre><p>将会返回满足这些条件的记录结果.</p>
<h3 id="去重复查询"><a href="#去重复查询" class="headerlink" title="去重复查询"></a>去重复查询</h3><p>您可以在所有的Example类中调用 setDistinct(true) 方法进行强制去重复查询.</p>
<h3 id="Criteria类"><a href="#Criteria类" class="headerlink" title="Criteria类"></a>Criteria类</h3><p>Criteria 内部类的每个属性都包含 andXXX 方法，以及如下的标准的SQL查询方法:</p>
<ol>
<li><p>IS NULL - 指相关的列必须为NULL</p>
</li>
<li><p>IS NOT NULL - 指相关的列必须不为NULL</p>
</li>
<li><p>= (equal) - 指相关的列必须等于方法参数中的值</p>
</li>
<li><p>&lt;&gt; (not equal) - 指相关的列必须不等于方法参数中的值</p>
</li>
<li><p>(greater than) - 指相关的列必须大于方法参数中的值 </p>
</li>
<li><p>= (greater than or equal) - 指相关的列必须大于等于方法参数中的值 </p>
</li>
<li><p>&lt; (less than) - 指相关的列必须小于于方法参数中的值 </p>
</li>
<li><p>&lt;= (less than or equal) - 指相关的列必须小于等于方法参数中的值 </p>
</li>
<li><p>LIKE - 指相关的列必须 “like” 方法参数中的值. 这个方法不用必须加入 ‘%’, 您必须设置方法参数中的值. </p>
</li>
<li><p>NOT LIKE - 指相关的列必须 “not like” 方法参数中的值. 这个方法不用必须加入 ‘%’, 您必须设置方法参数中的值. </p>
</li>
<li><p>BETWEEN - 指相关的列必须在 “between” 方法参数中的两个值之间. </p>
</li>
<li><p>NOT BETWEEN - 指相关的列必须不在 “not between” 方法参数中的两个值之间. </p>
</li>
<li><p>IN - 指相关的列必须在传入的方法参数的list中. </p>
</li>
<li><p>NOT IN - 指相关的列必须不在传入的方法参数的list中.</p>
</li>
</ol>
<h2 id="mapper中的实例函数"><a href="#mapper中的实例函数" class="headerlink" title="mapper中的实例函数"></a>mapper中的实例函数</h2><pre><code>int countByExample(UserExample example) thorws SQLException：按条件计数。

int deleteByExample(UserExample example) thorws SQLException：按条件删除。

int deleteByPrimaryKey(Integer id) thorws SQLException：按主键删除。

String/Integer insert(User record) thorws SQLException：插入(返回值为id值)

String/Integer insertSelective(User record) throws SQLException：插入一条数据,只插入不为null的字段,不会影响有默认值的字段

List&lt;?&gt;selectByExample(UserExample example) thorws SQLException：按条件查询

User selectByPrimaryKey(Integer id) thorws SQLException：按主键查询。

int updateByExample(User record, UserExample example) thorws SQLException： 按条件更新

int updateByPrimaryKeySelective(User record) thorws SQLException：按主键更新值不为null的字段

int updateByExampleSelective(User record, UserExample example)thorws SQLException：按条件更新不为null的字段

int updateByPrimaryKey(User record) thorws SQLException：按主键更新

SQLException：按条件更新值不为null的字段
</code></pre>]]></content>
      
        <categories>
            
            <category> Mybatis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> Mybatis Example </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mybatis Generator完整配置详解]]></title>
      <url>/2018/04/17/Mybatis%20Generator%E5%AE%8C%E6%95%B4%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>转自<a href="https://www.jianshu.com/p/e09d2370b796" target="_blank" rel="external">Mybatis Generator最完整配置详解</a></p>
<p>用于自己以后需要重新配置Generator时使用。</p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></div><div class="line">  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</div><div class="line">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</div><div class="line"><span class="comment">&lt;!-- 配置生成器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用$&#123;propertyKey&#125;的方式来引用配置项</span></div><div class="line">    resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties        </div><div class="line">    url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.</div><div class="line">    注意，两个属性只能选址一个;</div><div class="line">    </div><div class="line">    另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用</div><div class="line">&lt;properties resource="" url="" /&gt;</div><div class="line"> --&gt;</div><div class="line"> </div><div class="line"> <span class="comment">&lt;!-- 在MBG工作的时候，需要额外加载的依赖包</span></div><div class="line">    location属性指明加载jar/zip包的全路径</div><div class="line">&lt;classPathEntry location="/Program Files/IBM/SQLLIB/java/db2java.zip" /&gt;</div><div class="line">  --&gt;</div><div class="line">  </div><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">    context:生成一组对象的环境 </div><div class="line">    id:必选，上下文id，用于在生成错误时提示</div><div class="line">    defaultModelType:指定生成对象的样式</div><div class="line">        1，conditional：类似hierarchical；</div><div class="line">        2，flat：所有内容（主键，blob）等全部生成在一个对象中；</div><div class="line">        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)</div><div class="line">    targetRuntime:</div><div class="line">        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；</div><div class="line">        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；</div><div class="line">    introspectedColumnImpl：类全限定名，用于扩展MBG</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"mysql"</span> <span class="attr">defaultModelType</span>=<span class="string">"hierarchical"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3Simple"</span> &gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；</span></div><div class="line">        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖</div><div class="line">     --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoDelimitKeywords"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 生成的Java文件的编码 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javaFileEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 格式化java代码 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javaFormatter"</span> <span class="attr">value</span>=<span class="string">"org.mybatis.generator.api.dom.DefaultJavaFormatter"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 格式化XML代码 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"xmlFormatter"</span> <span class="attr">value</span>=<span class="string">"org.mybatis.generator.api.dom.DefaultXmlFormatter"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beginningDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"endingDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 必须要有的，使用这个配置链接数据库</span></div><div class="line">        @<span class="doctag">TODO:</span>是否可以扩展</div><div class="line">     --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span> <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql:///pss"</span> <span class="attr">userId</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"admin"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 这里面可以设置property属性，每一个property属性都设置到配置的Driver上 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- java类型处理器 </span></div><div class="line">        用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；</div><div class="line">        注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型； </div><div class="line">    --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">javaTypeResolver</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- </span></div><div class="line">            true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型</div><div class="line">            false：默认,</div><div class="line">                scale&gt;0;length&gt;18：使用BigDecimal;</div><div class="line">                scale=0;length[10,18]：使用Long；</div><div class="line">                scale=0;length[5,9]：使用Integer；</div><div class="line">                scale=0;length&lt;5：使用Short；</div><div class="line">         --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- java模型创建器，是必须要的元素</span></div><div class="line">        负责：1，key类（见context的defaultModelType）；2，java类；3，查询类</div><div class="line">        targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；</div><div class="line">        targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录</div><div class="line">     --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com._520it.mybatis.domain"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--  for MyBatis3/MyBatis3Simple</span></div><div class="line">            自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter；</div><div class="line">         --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"constructorBased"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- for MyBatis3 / MyBatis3Simple</span></div><div class="line">            是否创建一个不可变的类，如果为true，</div><div class="line">            那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类</div><div class="line">         --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"immutable"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- 设置一个根对象，</span></div><div class="line">            如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项</div><div class="line">            注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：</div><div class="line">                1，属性名相同，类型相同，有相同的getter/setter方法；</div><div class="line">         --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"rootClass"</span> <span class="attr">value</span>=<span class="string">"com._520it.mybatis.domain.BaseDomain"</span>/&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- 设置是否在getter方法中，对String类型字段调用trim()方法 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 生成SQL map的XML文件生成器，</span></div><div class="line">        注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），</div><div class="line">            或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置</div><div class="line">        targetPackage/targetProject:同javaModelGenerator</div><div class="line">     --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com._520it.mybatis.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 </span></div><div class="line">        targetPackage/targetProject:同javaModelGenerator</div><div class="line">        type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：</div><div class="line">            1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；</div><div class="line">            2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；</div><div class="line">            3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；</div><div class="line">        注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER</div><div class="line">    --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com._520it.mybatis.mapper"</span> <span class="attr">type</span>=<span class="string">"ANNOTATEDMAPPER"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查</span></div><div class="line">        &lt;property name="rootInterface" value=""/&gt;</div><div class="line">         --&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素</span></div><div class="line">        选择的table会生成一下文件：</div><div class="line">        1，SQL map文件</div><div class="line">        2，生成一个主键类；</div><div class="line">        3，除了BLOB和主键的其他字段的类；</div><div class="line">        4，包含BLOB的类；</div><div class="line">        5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；</div><div class="line">        6，Mapper接口（可选）</div><div class="line">    </div><div class="line">        tableName（必要）：要生成对象的表名；</div><div class="line">        注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会</div><div class="line">            根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：</div><div class="line">            1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；</div><div class="line">            2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；</div><div class="line">            3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；</div><div class="line">            4，否则，使用指定的大小写格式查询；</div><div class="line">        另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；</div><div class="line">        这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；</div><div class="line">        </div><div class="line">        可选：</div><div class="line">        1，schema：数据库的schema；</div><div class="line">        2，catalog：数据库的catalog；</div><div class="line">        3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName</div><div class="line">        4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；</div><div class="line">        5，enableInsert（默认true）：指定是否生成insert语句；</div><div class="line">        6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；</div><div class="line">        7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；</div><div class="line">        8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；</div><div class="line">        9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；</div><div class="line">        10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；</div><div class="line">        11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；</div><div class="line">        12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；</div><div class="line">        13，modelType：参考context元素的defaultModelType，相当于覆盖；</div><div class="line">        14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）</div><div class="line">        15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性</div><div class="line">        </div><div class="line">        注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；</div><div class="line">     --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"userinfo"</span> &gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- 参考 javaModelGenerator 的 constructorBased属性--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"constructorBased"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema； --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreQualifiersAtRuntime"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- 参考 javaModelGenerator 的 immutable 属性 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"immutable"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper XML文件中，只生成resultMap元素 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"modelOnly"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- 参考 javaModelGenerator 的 rootClass 属性 </span></div><div class="line">        &lt;property name="rootClass" value=""/&gt;</div><div class="line">         --&gt;</div><div class="line">         </div><div class="line">        <span class="comment">&lt;!-- 参考javaClientGenerator 的  rootInterface 属性</span></div><div class="line">        &lt;property name="rootInterface" value=""/&gt;</div><div class="line">        --&gt;</div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- 如果设置了runtimeCatalog，那么在生成的SQL中，使用该指定的catalog，而不是table元素上的catalog </span></div><div class="line">        &lt;property name="runtimeCatalog" value=""/&gt;</div><div class="line">        --&gt;</div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- 如果设置了runtimeSchema，那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema </span></div><div class="line">        &lt;property name="runtimeSchema" value=""/&gt;</div><div class="line">        --&gt;</div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename </span></div><div class="line">        &lt;property name="runtimeTableName" value=""/&gt;</div><div class="line">        --&gt;</div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- 注意，该属性只针对MyBatis3Simple有用；</span></div><div class="line">            如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件；</div><div class="line">         --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"selectAllOrderByClause"</span> <span class="attr">value</span>=<span class="string">"age desc,username asc"</span>/&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useActualColumnNames"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- generatedKey用于生成生成主键的方法，</span></div><div class="line">            如果设置了该元素，MBG会在生成的&lt;insert&gt;元素中生成一条正确的&lt;selectKey&gt;元素，该元素可选</div><div class="line">            column:主键的列名；</div><div class="line">            sqlStatement：要生成的selectKey语句，有以下可选项：</div><div class="line">                Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()</div><div class="line">                DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()</div><div class="line">                DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1</div><div class="line">                Derby     :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()</div><div class="line">                HSQLDB    :相当于selectKey的SQL为：CALL IDENTITY()</div><div class="line">                Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1</div><div class="line">                MySql     :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()</div><div class="line">                SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()</div><div class="line">                SYBASE    :相当于selectKey的SQL为：SELECT @@IDENTITY</div><div class="line">                JDBC      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性</div><div class="line">        &lt;generatedKey column="" sqlStatement=""/&gt;</div><div class="line">         --&gt;</div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- </span></div><div class="line">            该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，</div><div class="line">            比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；</div><div class="line">            那么就可以设置searchString为"^CUST_"，并使用空白替换，那么生成的Customer对象中的属性名称就不是</div><div class="line">            custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；</div><div class="line">            </div><div class="line">            注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，</div><div class="line">            如果使用了columnOverride元素，该属性无效；</div><div class="line">            </div><div class="line">        &lt;columnRenamingRule searchString="" replaceString=""/&gt;</div><div class="line">         --&gt;</div><div class="line">         </div><div class="line">         </div><div class="line">         <span class="comment">&lt;!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；</span></div><div class="line">            column:要重新设置的列名；</div><div class="line">            注意，一个table元素中可以有多个columnOverride元素哈~</div><div class="line">          --&gt;</div><div class="line">         <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">"username"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 使用property属性来指定列要生成的属性名称 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"property"</span> <span class="attr">value</span>=<span class="string">"userName"</span>/&gt;</span></div><div class="line">            </div><div class="line">            <span class="comment">&lt;!-- javaType用于指定生成的domain的属性类型，使用类型的全限定名</span></div><div class="line">            &lt;property name="javaType" value=""/&gt;</div><div class="line">             --&gt;</div><div class="line">             </div><div class="line">            <span class="comment">&lt;!-- jdbcType用于指定该列的JDBC类型 </span></div><div class="line">            &lt;property name="jdbcType" value=""/&gt;</div><div class="line">             --&gt;</div><div class="line">             </div><div class="line">            <span class="comment">&lt;!-- typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名</span></div><div class="line">                注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler</div><div class="line">                只会生成类似：where id = #&#123;id,jdbcType=BIGINT,typeHandler=com._520it.mybatis.MyTypeHandler&#125;的参数描述</div><div class="line">            &lt;property name="jdbcType" value=""/&gt;</div><div class="line">            --&gt;</div><div class="line">            </div><div class="line">            <span class="comment">&lt;!-- 参考table元素的delimitAllColumns配置，默认为false</span></div><div class="line">            &lt;property name="delimitedColumnName" value=""/&gt;</div><div class="line">             --&gt;</div><div class="line">         <span class="tag">&lt;/<span class="name">columnOverride</span>&gt;</span></div><div class="line">         </div><div class="line">         <span class="comment">&lt;!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现 </span></div><div class="line">            column:指定要忽略的列的名字；</div><div class="line">            delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false</div><div class="line">            </div><div class="line">            注意，一个table元素中可以有多个ignoreColumn元素</div><div class="line">         &lt;ignoreColumn column="deptId" delimitedColumnName=""/&gt;</div><div class="line">         --&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">context</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Mybatis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mybatis Generator </tag>
            
            <tag> 框架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nginx 配置文件详解]]></title>
      <url>/2018/04/04/Nginx%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Nginx（发音同engine x）是一个异步框架的 Web服务器，也可以用作反向代理，负载平衡器 和 HTTP缓存。Nginx是一款面向性能设计的HTTP服务器，相较于Apache、lighttpd具有占有内存少，稳定性高等优势。与旧版本（&lt;=2.2）的Apache不同，Nginx不采用每客户机一线程的设计模型，而是充分使用异步逻辑从而削减了上下文调度开销，所以并发服务能力更强。整体采用模块化设计，有丰富的模块库和第三方模块库，配置灵活。</p>
<p>因此，在此记录下Nginx的配置详解，以作备用。</p>
<h2 id="Nginx-配置文件详解"><a href="#Nginx-配置文件详解" class="headerlink" title="Nginx 配置文件详解"></a>Nginx 配置文件详解</h2><p><a href="http://nginx.org/en/docs/" target="_blank" rel="external">nginx官方文档</a></p>
<p>如果是使用apt-get安装的Nginx，则主配置文件位于 /etc/nginx下，通过ls指令可以看到：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">nginx.conf   这个是nginx的主配置文件,里面包含了当前目录的所有配置文件,只不过有的是注释状态,需要的时候自行开启(后面几个常用的)</div><div class="line"></div><div class="line">conf.d       这是一个目录,里面可以写我们自己自定义的配置文件,文件结尾一定是.conf才可以生效(当然也可以通过修改nginx.conf来取消这个限制)</div><div class="line"></div><div class="line">sites-enabled  这里面的配置文件其实就是sites-available里面的配置文件的软连接,但是由于nginx.conf默认包含的是这个文件夹,</div><div class="line">               所以我们在sites-available里面建立了新的站点之后,还要建立个软连接到sites-enabled里面才行</div><div class="line">               </div><div class="line">sites-available  这里是我们的虚拟主机的目录，我们在在这里面可以创建多个虚拟主机</div></pre></td></tr></table></figure>
<h3 id="nginx-conf-配置区域"><a href="#nginx-conf-配置区域" class="headerlink" title="nginx.conf 配置区域"></a>nginx.conf 配置区域</h3><p>nginx.conf是Nginx的主配置文件，里面主要包括以下几个配置区域：</p>
<h4 id="main"><a href="#main" class="headerlink" title="main"></a>main</h4><p>配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</p>
<h4 id="event"><a href="#event" class="headerlink" title="event"></a>event</h4><p>配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</p>
<h4 id="http"><a href="#http" class="headerlink" title="http"></a>http</h4><p>可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</p>
<h4 id="upstream"><a href="#upstream" class="headerlink" title="upstream"></a>upstream</h4><p>配置HTTP负载均衡器分配流量到几个应用程序服务器。</p>
<h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><p>配置虚拟主机的相关参数，一个http中可以有多个server。</p>
<h4 id="location"><a href="#location" class="headerlink" title="location"></a>location</h4><p>配置请求的路由，以及允许根据用户请求的URI来匹配指定的各location以进行访问配置；匹配到时，将被location块中的配置所处理。</p>
<h3 id="nginx-conf-文件内容"><a href="#nginx-conf-文件内容" class="headerlink" title="nginx.conf 文件内容"></a>nginx.conf 文件内容</h3><p>nginx.conf文件的内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">user www-data;</div><div class="line">worker_processes auto;</div><div class="line">pid /run/nginx.pid;</div><div class="line">include /etc/nginx/modules-enabled/*.conf;</div><div class="line"></div><div class="line">events &#123;</div><div class="line">	worker_connections 768;</div><div class="line">	# multi_accept on;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line"></div><div class="line">	##</div><div class="line">	# Basic Settings</div><div class="line">	##</div><div class="line"></div><div class="line">	sendfile on;</div><div class="line">	tcp_nopush on;</div><div class="line">	tcp_nodelay on;</div><div class="line">	keepalive_timeout 65;</div><div class="line">	types_hash_max_size 2048;</div><div class="line">	# server_tokens off;</div><div class="line"></div><div class="line">	# server_names_hash_bucket_size 64;</div><div class="line">	# server_name_in_redirect off;</div><div class="line"></div><div class="line">	include /etc/nginx/mime.types;</div><div class="line">	default_type application/octet-stream;</div><div class="line"></div><div class="line">	##</div><div class="line">	# SSL Settings</div><div class="line">	##</div><div class="line"></div><div class="line">	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE</div><div class="line">	ssl_prefer_server_ciphers on;</div><div class="line"></div><div class="line">	##</div><div class="line">	# Logging Settings</div><div class="line">	##</div><div class="line"></div><div class="line">	access_log /var/log/nginx/access.log;</div><div class="line">	error_log /var/log/nginx/error.log;</div><div class="line"></div><div class="line">	##</div><div class="line">	# Gzip Settings</div><div class="line">	##</div><div class="line"></div><div class="line">	gzip on;</div><div class="line">	gzip_disable &quot;msie6&quot;;</div><div class="line"></div><div class="line">	# gzip_vary on;</div><div class="line">	# gzip_proxied any;</div><div class="line">	# gzip_comp_level 6;</div><div class="line">	# gzip_buffers 16 8k;</div><div class="line">	# gzip_http_version 1.1;</div><div class="line">	# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</div><div class="line"></div><div class="line">	##</div><div class="line">	# Virtual Host Configs</div><div class="line">	##</div><div class="line"></div><div class="line">	include /etc/nginx/conf.d/*.conf;</div><div class="line">	include /etc/nginx/sites-enabled/*;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">#mail &#123;</div><div class="line">#	# See sample authentication script at:</div><div class="line">#	# http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript</div><div class="line"># </div><div class="line">#	# auth_http localhost/auth.php;</div><div class="line">#	# pop3_capabilities &quot;TOP&quot; &quot;USER&quot;;</div><div class="line">#	# imap_capabilities &quot;IMAP4rev1&quot; &quot;UIDPLUS&quot;;</div><div class="line"># </div><div class="line">#	server &#123;</div><div class="line">#		listen     localhost:110;</div><div class="line">#		protocol   pop3;</div><div class="line">#		proxy      on;</div><div class="line">#	&#125;</div><div class="line"># </div><div class="line">#	server &#123;</div><div class="line">#		listen     localhost:143;</div><div class="line">#		protocol   imap;</div><div class="line">#		proxy      on;</div><div class="line">#	&#125;</div><div class="line">#&#125;</div></pre></td></tr></table></figure>
<h3 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h3><h4 id="核心功能配置"><a href="#核心功能配置" class="headerlink" title="核心功能配置"></a>核心功能配置</h4><p>nginx核心功能配置主要是main和events的顶层全局配置，都是配置nginx核心模块（ngx_core_module），管理服务器级别的行为。下面介绍的是大部分常用的配置选项，更多配置请参考<a href="http://nginx.org/en/docs/ngx_core_module.html" target="_blank" rel="external">官方文档</a></p>
<h5 id="main-1"><a href="#main-1" class="headerlink" title="main"></a>main</h5><p><strong>基本配置</strong></p>
<p>error_log file [level]; 注：该项可以配置在任何配置区域</p>
<p>配置错误日志文件的路径和日志级别。日志级别有debug, info, notice, warn, error, crit, alert和emerg几种。调试时可以使用debug级别，但要求在编译时必须使用–with-debug启用debug功能，默认通常为error级别。</p>
<ol>
<li><p>user username [groupname] 默认nobody</p>
<p> 定义Nginx运行的用户和用户组</p>
</li>
<li><p>pid /run/nginx.pid; 默认nginx.pid</p>
<p> 指定nginx的进程文件</p>
</li>
<li><p>worker_rlimit_nofile number; 无默认</p>
<p> 指定一个worker进程所能够打开的句柄数。</p>
</li>
<li><p>daemon on | off; 默认on</p>
<p> nginx是否以守护进程运行，是否让nignx运行于后台。</p>
</li>
<li><p>master_process on | off; 默认on</p>
<p> 是否以master/worker模式运行nginx，默认为on。</p>
</li>
</ol>
<p><strong>性能优化</strong></p>
<ol>
<li><p>worker_processes number | auto; 默认1</p>
<p> nginx进程数，建议设置为等于CPU总核心数。而且，nginx为了更好的利用多核特性，具有cpu绑定选项，我们可以将某一个进程绑定在某一个核上，这样就不会因为进程的切换带来cache的失效。</p>
</li>
<li><p>worker_cpu_affinity cpumask …; 无默认，不绑定</p>
<p> 将工作进程绑定到特定的CPU上，减少CPU在进程之间切换的开销。用二进制bit位表示进程绑定在哪个CPU内核。如：worker_cpu_affinity 0001 0010 0100 1000。</p>
</li>
<li><p>worker_priority number; 默认0</p>
<p> 工作进程调度优先级，-20到19之间的值，值越小越优先调用。</p>
</li>
<li><p>timer_resolution interval; 无默认</p>
<p> 每次内核事件调用返回时，都会使用gettimeday（）来更新nginx缓存时钟；timer_resolution用于定义每隔多久才会由gettimeday（）更新一次缓存时钟；x86-64系统上，gettimeday()代价已经很小，可以忽略此配置。</p>
</li>
<li><p>ssl_engine device; 无默认</p>
<p> 在存在ssl硬件加速器的服务器上，指定所使用的ssl硬件加速设备。由于https链接所消耗的资源比http大得多，可能要多消耗5、6倍，最好有专门处理ssl的硬件设备。</p>
</li>
</ol>
<h5 id="events"><a href="#events" class="headerlink" title="events"></a>events</h5><ol>
<li><p>worker_commections number; 默认512</p>
<p> 每个worker能够并发响应的最大请求数。系统每处理一个请求就要消耗一个套接字文件，如果为代理服务器的话，worker_rlimit_nofile=worker_commections*2。</p>
</li>
<li><p>use method; 无默认，自动选择</p>
<p> 指定使用哪种模型，建议让nginx自动选择。</p>
<p> <strong>注意：</strong> 与apache相似，nginx针对不同的操作系统，有不同的事件模型。</p>
<ol>
<li><p>标准事件模型</p>
<p> Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll。</p>
</li>
<li><p>高效事件模型</p>
<p> Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</p>
<p> Epoll：使用于Linux内核2.6版本及以后的系统。</p>
<p> /dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</p>
<p> Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</p>
</li>
</ol>
</li>
<li><p>accept_mutex on | off; 默认off</p>
<p> 是否打开nginx的accept锁；此锁能够让多个worker进行轮流地、序列化地与新的客户端建立连接；而通常当一个worker进程的负载达到其上限的7/8，master就尽可能不将请求调度至worker。</p>
</li>
<li><p>accept_mutex_delay time; 默认500ms</p>
<p> 使用accept锁以后，只有一个worker能取得锁，一个worker进程为取得accept锁的等待时长，即用户建立等待的时间，如果某worker进程在某次试图取得锁时失败了，至少要等待#ms才能在一次请求锁。</p>
</li>
<li><p>multi_accept on | off; 默认off</p>
<p> 是否允许一次性地响应多个用户请求。</p>
</li>
</ol>
<h4 id="HTTP核心配置"><a href="#HTTP核心配置" class="headerlink" title="HTTP核心配置"></a>HTTP核心配置</h4><p>http功能核心配置主要是http块、server块和location块的配置，包括HTTP核心模块（ngx_http_core_module）和一些扩展模块（如ngx_stream_ssl_module），提供管理WEB服务器级别的行为。</p>
<p>必须使用虚拟机来配置站点，每个虚拟主机使用一个server{}段来配置，非虚拟主机的配置和公共选项，需要定义在server之外，http之内。</p>
<p>下面包含是大部分常用的配置选项，更多配置请参考<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html" target="_blank" rel="external">官方文档</a></p>
<h5 id="main-2"><a href="#main-2" class="headerlink" title="main"></a>main</h5><ol>
<li><p>http { … } </p>
<p> 提供HTTP服务器配置上下文</p>
</li>
</ol>
<h5 id="http-1"><a href="#http-1" class="headerlink" title="http"></a>http</h5><ol>
<li><p>server { … }</p>
<p> HTTP服务器的核心配置，定义一个虚拟主机：nginx支持使用基于主机名或IP的虚拟主机。</p>
</li>
</ol>
<h5 id="server-1"><a href="#server-1" class="headerlink" title="server"></a>server</h5><ol>
<li><p>listen address[:port] | listen prot | listen unix:socket 默认 listen <em>:80 | </em>:8000</p>
<p> 配置虚拟主机监听的IP地址和端口，默认监听本机IP地址和80或8000端口。如果只设置了IP没设端口，默认使用80端口。如果只设置了端口，没设置IP默认使用本机IP。</p>
<p> 后面可以指定一些参数：</p>
<p> default_server:定义此server为http中默认的server；如果所有的server中任何一个listen使用此参数，那么第一个server即为默认server；</p>
<p> rcvbuf=SIZE：接收缓存大小；</p>
<p> sndbuf=SIZE: 发送缓存大小；</p>
<p> ssl：https server：必须以ssl连接；</p>
</li>
<li><p>server_name name …;</p>
<p> 配置虚拟主机的域名，可以指定多个，用空格分隔。默认为空。</p>
<p> 名称可以使用通配符和正则表达式（通常以~开头）：当nginx收到一个请求时，会取出其首部的server的值，而后跟众server_name进行比较：比较方式</p>
<ol>
<li><p>先做精确匹配，如www.example.com</p>
</li>
<li><p>左侧通配符匹配，如*example.com</p>
</li>
<li><p>右侧通配符匹配，如www.*</p>
</li>
<li><p>正则表达式匹配</p>
</li>
</ol>
</li>
<li><p>server_name_hash_bucket_size size; 默认32|64|128</p>
<p> 为了实现快速主机查找，nginx使用hash表来保存主机名。默认值取决于处理器缓存线的大小。</p>
</li>
</ol>
<h5 id="location-1"><a href="#location-1" class="headerlink" title="location"></a>location</h5><ol>
<li><p>alias path; 无默认</p>
<p> 指定路径别名，只能用于location中，从最后一个/开始匹配。</p>
<p> 如location /i/ {</p>
<p> alias /example/;</p>
<p> }</p>
<p> 请求”/i/a.gif”, 实际文件”/example/a.gif”</p>
</li>
<li><p>limit_except method … { … }</p>
<p> 指定范围之外的其他方法的访问控制。</p>
<p> 方法有：GET, HEAD, POST, PUT, DELETE, MKCOL, COPY, MOVE, OPTIONS, PROPFIND, PROPPATCH, LOCK, UNLOCK, or PATCH.</p>
<p> 如只允许GET访问：</p>
<p> limit_except GET {</p>
<p> allow 192.168.1.0/32;</p>
<p> deny all;</p>
<p> }</p>
</li>
</ol>
<h5 id="server-location"><a href="#server-location" class="headerlink" title="server, location"></a>server, location</h5><ol>
<li><p>location [ = | ~ | ~* | ^~ ] uri { … } | location @name { … } 无默认</p>
<p> 允许根据用户请求的URI来匹配指定的各location以进行访问配置；匹配到时，将被location块中的配置所处理。</p>
<p> =：精确匹配；</p>
<p> ~：正则表达式模式匹配，匹配时区分字符大小写；</p>
<p> ~*：正则表达式模式匹配，匹配时忽略字符大小写；</p>
<p> ^~：只需要前半部分与uri匹配即可，不检查正则表达式；</p>
<p> 匹配优先级：</p>
<p> 字符字面量最精确匹配、正则表达式检索（由多个时，由第一个匹配到的所处理），按字符字面量。</p>
</li>
<li><p>try_files file … uri | try_files file … =code; 无默认</p>
<p> 自左向右尝试读取有path所指定路径，在第一找到即停止并返回，如果所有path均不存在，则返回最后一个uri或者code.</p>
<p> 如try_files $uri $uri/index.html $uri.html =404;</p>
</li>
</ol>
<h5 id="http-server"><a href="#http-server" class="headerlink" title="http, server"></a>http, server</h5><ol>
<li><p>client_header_timeout time; 默认60s</p>
<p> 读取http请求首部的超时时长。如果客户端在此时间内未传输整个头，则会向客户端返回408（请求超时）错误。</p>
</li>
<li><p>ignore_invalid_headers on | off; 默认on</p>
<p> 是否忽略不合法的http首部，默认为on，off意味着请求首部中出现不合规的首部将拒绝响应。</p>
</li>
<li></li>
</ol>
<h5 id="http-server-location"><a href="#http-server-location" class="headerlink" title="http, server, location"></a>http, server, location</h5><ol>
<li><p>root path; 默认html</p>
<p> 设置web资源路径，用于指定请求的根文档目录，从根开始匹配。</p>
</li>
<li><p>index file …; 默认index，html</p>
<p> 定义默认页面，可以跟多个值。自左向右匹配。</p>
</li>
<li><p>error_page code … [=[response]] uri; 无默认</p>
<p> 当对于某个请求发回错误时，如果匹配上了error_page指令中设定的code，则重定向至新的URI中，错误重定向。</p>
<p> 如 error_page 500 502 503 504 /50x.html;</p>
<p> 也可以改变返回码。</p>
<p> 如error_page 404 =200 /404.html;</p>
</li>
<li><p>keepalive_timeout timeout [header_timeout]; 默认75s</p>
<p> 保持连接的超时时长，默认为75s。降低每个连接的alive时间可在一定程度上提高可响应连接数量，所以一般可适当降低此值。</p>
</li>
<li><p>keepalive_requests number; 默认100</p>
<p> 在一次长连接上允许承载的最大请求数。</p>
</li>
<li><p>keepalive_disable none | browser …; 默认msie6（ie6无法长连接）</p>
<p> 对指定的浏览器禁止使用长连接。</p>
</li>
<li><p>tcp_nodelay on | off; 默认on</p>
<p> 对keepalive连接是否使用tcp_nodelay选项</p>
<p> 启动配置，会在数据包达到一定大小后再发送数据。这样会减少网络通信次数，降低阻塞概率，但也会影响响应及时性。比较适合于文件下载这类的大数据通信场景。</p>
</li>
<li><p>client_body_timeout time; 默认60s</p>
<p> 读取http请求包体的超时时间。</p>
</li>
<li><p>send_timeout time; 默认60s</p>
<p> 发送响应的超时时长。超时后连接将关闭。</p>
</li>
<li><p>client_max_body_size size; 默认1m</p>
<p>http请求包体的最大值，常用于限定客户端所能够请求的最大包体，根据请求首部中的Content-Length来检查，以避免无用的传输。</p>
</li>
<li><p>limit_rate rate; 默认0</p>
<p>限制客户端每秒传输的字节数，默认为0，表示没有限制。</p>
</li>
<li><p>limit_rate_after size; 默认0</p>
<p>nginx向客户端发送响应报文时，如果时长超过了此处指定的时长，则后续的发送过程开始限速（下载站点常用）。</p>
<p>配合上面的limit_rate使用。</p>
</li>
<li><p>log_not_found on | off; 默认on</p>
<p>用户访问的文件不存在时，是否将其记录到错误日志中。</p>
</li>
<li><p>resolver address … [valid=time] [ipv6=on|off]; 无默认</p>
<p>指定nginx使用的dns服务器地址。</p>
<p>valid = 30s，缓存时间设置。在1.1.9版之前，不能调整缓存时间，而nginx总是缓存大概5分钟的时间。</p>
</li>
<li><p>resolver_timeout time; 默认30s</p>
<p>指定DNS解析超时时长。</p>
</li>
<li><p>server_tokens on | off | string; 默认on</p>
<p>是否在错误页面中显示和”响应头字段中发出nginx的版本号。从版本1.9.13开始，可以使用带有变量的字符串显式设置。空字符串禁用。</p>
</li>
<li><p>sendfile on | off; 默认off</p>
<p>是否启用sendfile内核复制模式功能。</p>
<p>作为静态服务器可以提高最大的IO访问速度。传统的文件读写采用read和write方式，流程为：硬盘 &gt;&gt; kernel buffer &gt;&gt; user buffer&gt;&gt; kernel socket buffer &gt;&gt;协议栈，采用sendfile文件读写的流程为：硬盘 &gt;&gt; kernel buffer (快速拷贝到kernel socket buffer) &gt;&gt;协议栈，很明显sendfile这个系统调用减少了内核到用户模式之间的切换和数据拷贝次数，直接从内核缓存的数据拷贝到协议栈，提高了很大的效率。</p>
</li>
<li><p>aio on | off | threads[=pool]; 默认off</p>
<p>是否启用异步文件IO功能。</p>
<p>Linux从内核版本2.6.22开始支持，有必要启用directio，否则读取将阻塞。</p>
<p>directio只能用于读取在512字节边界（或XFS为4K）上对齐的块。文件结束未对齐将在阻塞模式下读取。</p>
<p>当在Linux上同时启用aio和sendfile功能时，aio用于大于或等于directio指令中指定大小的文件，而小于或禁用directio时则用sendfile。</p>
<p>location /video/ {</p>
<p>sendfile on;</p>
<p>aio on;</p>
<p>directio 8m;</p>
<p>}</p>
</li>
<li><p>open_file_cache off | open_file_cache max=N [inactive=time]; 默认off</p>
<p>是否打开文件缓存功能。</p>
<p>max：用于缓存条目的最大值，允许打开的缓存条目最大数，当满两类以后将根据LRU（最小最少连接数）算法进行置换</p>
<p>inactive：某缓存条目在指定时长内没有被访问过时，将自动被删除，即缓存有效期，通常默认为60s。</p>
<p>缓存的信息包括：</p>
<ol>
<li><p>文件句柄、文件大小和上次修改时间；</p>
</li>
<li><p>已经打开的目录结构；</p>
</li>
<li><p>没有找到或没有访问权限的信息等。</p>
</li>
</ol>
</li>
<li><p>open_file_cache_errors on | off; 默认off</p>
<p>是否缓存文件找不到或没有权限访问等相关信息。</p>
</li>
<li><p>open_file_cache_valid time; 默认60s</p>
<p>多长时间检查一次缓存中的条目是否超出非活动时长。</p>
</li>
<li><p>open_file_cache_min_uses number; 默认1</p>
<p>在open_file_cache inactive指定的时长内被访问超过此处指定的次数时，才不会被删除（删除低命中率的缓存）。</p>
</li>
<li><p>gzip on | off; 默认off</p>
<p>开启内容压缩，可以有效降低客户端的访问流量和网络带宽</p>
</li>
<li><p>gzip_min_length length; 默认20k</p>
<p>内容超过最少长度后才开启压缩，因为太短的内容压缩效果不佳，且压缩过程还会浪费系统资源。这个压缩长度会作为http响应头Content-Length字段返回给客户端。</p>
</li>
<li><p>gzip_comp_level 1~9; 默认1</p>
<p>压缩级别，默认值为1。范围为1～9级，压缩级别越高压缩率越高，但对系统性能要求越高。</p>
</li>
<li><p>gzip_types mime-type …; 默认text/html</p>
<p>压缩内容类型，默认为text/html;。只压缩html文本，一般我们都会压缩js、css、json之类的，可以把这些常见的文本数据都配上。如：text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;</p>
</li>
</ol>
<h4 id="配置变量"><a href="#配置变量" class="headerlink" title="配置变量"></a>配置变量</h4><p>nginx配置文件支持使用变量，可以使用内置变量或自定义变量。用户自定义变量语法：set var_name value；<a href="http://nginx.org/en/docs/varindex.html" target="_blank" rel="external">http核心模块的内置变量</a></p>
<p>主要配置如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">$uri:当前请求的uri，不带参数  </div><div class="line">  </div><div class="line">$request_uri：请求的uri，带完整参数  </div><div class="line">  </div><div class="line">$host：http请求报文中host首部；如果请求中没有host首部，则以处理此请求的主机的主机名代替  </div><div class="line">  </div><div class="line">$hostname：nginx服务运行所在主机的主机名  </div><div class="line">  </div><div class="line">$remote_addr：客户端IP  </div><div class="line">  </div><div class="line">$remote_port: 客户端port  </div><div class="line">  </div><div class="line">$remote_user：使用用户认证时客户端用户输入的用户名  </div><div class="line">  </div><div class="line">$request_filename：用户请求中的URI经过本地root或alias转换后映射的本地的文件路径  </div><div class="line">  </div><div class="line">$request_method：请求方法  </div><div class="line">  </div><div class="line">$server_addr：服务器地址  </div><div class="line">  </div><div class="line">$server_name: 服务器名称  </div><div class="line">  </div><div class="line">$server_port：服务器端口  </div><div class="line">  </div><div class="line">$server_protocol：服务器向客户端发送响应时的协议，如http/1.1，http/1.0  </div><div class="line">  </div><div class="line">$scheme:在请求中使用的scheme 映射协议本身的协议  </div><div class="line">  </div><div class="line">$http_HEADER:匹配请求报文中指定的HEADER，$http_host匹配请求报文中的host首部  </div><div class="line">  </div><div class="line">$sent_http_HEADER:匹配响应报文中指定的HERDER，例如$http_content_type匹配相应报文中的content-type首部  </div><div class="line">  </div><div class="line">$document_root：当前请求映射到的root配置</div></pre></td></tr></table></figure>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>反向代理是nginx服务器最常用的功能之一：</p>
<p><img src="http://owek6x58j.bkt.clouddn.com/nginx-proxy.jpg" alt="nginx-proxy"></p>
<p><strong>1. 正向代理</strong></p>
<p> 正向代理是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。</p>
<p> 正向代理允许客户端通过它访问任意网站并且隐藏客户端自身。</p>
<p>  典型用途：为在防火墙内的局域网客户端提供访问Internet的途径，一个是提高安全性，一个VPN翻墙；可以利用缓冲特性减少网络使用率。</p>
<p><strong>2. 反向代理</strong></p>
<p> 反向代理是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p>
<p>反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。</p>
<p>典型用途：将防火墙后面的服务器提供给Internet用户访问，提高服务器的安全性。反向代理还可以为后端的多台服务器提供负载平衡，或为后端较慢的服务器提供缓冲服务。</p>
<h4 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h4><p>nginx的反向代理基于<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html" target="_blank" rel="external">ngx_http_proxy_module</a>，该模块有许多功能。</p>
<ol>
<li><p>proxy_connect_timeout：nginx将一个请求发送至upstream server之前等待的最大时长；</p>
</li>
<li><p>proxy_cookie_domain：将upstream server通过Set-Cookie首部设定的domain属性修改为指定的值，其值可以为一个字符串、正则表达式的模式或一个引用的变量；</p>
</li>
<li><p>proxy_cookie_path: 将upstream server通过Set-Cookie首部设定的path属性修改为指定的值，其值可以为一个字符串、正则表达式的模式或一个引用的变量；</p>
</li>
<li><p>proxy_hide_header：设定发送给客户端的报文中需要隐藏的首部；</p>
</li>
<li><p>proxy_pass：指定将请求代理至upstream server的URL路径；</p>
</li>
<li><p>proxy_set_header：将发送至upsream server的报文的某首部进行重写；</p>
</li>
<li><p>proxy_redirect：重写location并刷新从upstream server收到的报文的首部；</p>
</li>
<li><p>proxy_send_timeout：在连接断开之前两次发送至upstream server的写操作的最大间隔时长；</p>
</li>
<li><p>proxy_read_timeout：在连接断开之前两次从接收upstream server接收读操作的最大间隔时长；</p>
</li>
</ol>
<p>此外还有如缓存配置等等。</p>
<h4 id="配置proxy-pass反向代理"><a href="#配置proxy-pass反向代理" class="headerlink" title="配置proxy_pass反向代理"></a>配置proxy_pass反向代理</h4><p>proxy_pass配置可分三种：</p>
<ol>
<li><p>location的uri将被替换为上游服务器上的newuri</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">location /uri &#123;  </div><div class="line">  </div><div class="line">    proxy_pass http://ip:port/newuri;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>如果location的URI是通过模式匹配定义的，其URI将直接被传递至上游服务器，而不能为其指定转换的另一个URI。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line">    proxy_pass http://192.168.1.1:8080;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>也就是说不能代理后面不能加新的URI，加了会报错</p>
<ol>
<li><p>如果在loation中使用的URL重定向，那么nginx将使用重定向后的URI处理请求，而不再考虑上游服务器上定义的URI。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">location / &#123;  </div><div class="line">  </div><div class="line">    rewrite http://192.168.1.1/rewrite;  </div><div class="line">  </div><div class="line">    proxy_pass http://192.168.1.1/proxy;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="配置proxy-set-header，客户端信息记录到日志"><a href="#配置proxy-set-header，客户端信息记录到日志" class="headerlink" title="配置proxy_set_header，客户端信息记录到日志"></a>配置proxy_set_header，客户端信息记录到日志</h4><p>如果请求经过nginx反向代理服务器，后端web服务器无法直接获取到客户端真实的IP地址，因为$remote_addr获取到的是反向代理IP地址</p>
<p>可以通过proxy_set_header配置反向代理服务器在转发请求的http头信息中增加”X-Forwarded-For”行信息，该信息中记录客户端IP地址。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">location / &#123;  </div><div class="line">  </div><div class="line">    proxy_pass http://192.168.1.1/proxy; #本机代理到&quot;http://192.168.1.1/proxy  </div><div class="line">  </div><div class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  #$remote_addr; #代理转发的请求头部增加&quot;X-Forwarded-For&quot;客户端地址  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="负载均衡和健康检查"><a href="#负载均衡和健康检查" class="headerlink" title="负载均衡和健康检查"></a>负载均衡和健康检查</h3><p>nginx负载均衡是<a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html" target="_blank" rel="external">ngx_http_upstream_module</a>的功能</p>
<p>需要在配置文件http块上下文中定义upstream块，指定一组负载均衡的后端服务器，然后在上面说的proxy_pass中引用，就可以在反向代理时实现负载均衡</p>
<h4 id="配置选项-1"><a href="#配置选项-1" class="headerlink" title="配置选项"></a>配置选项</h4><ol>
<li><p>server address [parameters];</p>
<p> paramerters：  </p>
<pre><code>weight：负载均衡策略权重，默认为1；  

max_fails：允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误；  

fail_timeout：在经历了max_fails次失败后，暂停服务的时间。max_fails可以和fail_timeout一起使用，进行对后端服务器的健康状态检查；  

backup：当所有后端服务器都宕机时，可以指定代理服务器自身作为备份，对外提供维护提示页面；  

down：永久不可用。  
</code></pre></li>
</ol>
<p>upstream块里可以用多个server选项配置多个后端服务器，同时还可配置对后端服务器的健康状态检查，可以在server后面加上max_fails（proxy_next_upstream指定检查策略，默认为返回超时为失败）和fail_timeout参数实现；也可以用health_check选项来实现，health_check可以指定的参数较多，不过需要定义在location上下文中。</p>
<p>另外，可以指定代理服务器自身作为备份server，当所有后端服务器都宕机时，对外提供维护提示页面。</p>
<p>还可以指定负载均衡策略：主要有round_robin（加权轮询，默认）、hash、ip_hash、least_conn（最少连接）和least_time（最少响应时间，商业版本），策略定义在upstream上下文即可;</p>
<h4 id="配置操作"><a href="#配置操作" class="headerlink" title="配置操作"></a>配置操作</h4><p>先在配置一个名为web的upstream块，里面包含三个server：server1、server2和代理服务器自身，配置对后端服务器的健康状态检查、负载均衡策略；然后在location中的proxy_pass中引用该web组，配置如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">upstream webserver &#123; #定义名为web的负载均衡组，在下面proxy_pass引用  </div><div class="line">  </div><div class="line">    #ip_hash; #ip_hash负载均衡策略，注意，当下面定义代理服务器为backup时，当后端服务器重新上线时，不能进行正常转发  </div><div class="line">  </div><div class="line">    least_conn; #最少连接负载均衡策略  </div><div class="line">  </div><div class="line">    #least_time last_byte; #最少响应时间策略,商业版本  </div><div class="line">  </div><div class="line">    server 192.168.1.1 weight=2 max_fails=2 fail_timeout=2; #server1 权重2 两次检测失败，不向其转发 检查超时两秒为失败  </div><div class="line">  </div><div class="line">    server 192.168.1.2 weight=1 max_fails=2 fail_timeout=2; #server2  </div><div class="line">  </div><div class="line">    server 127.0.0.1:8080 weight=1 backup; #指定代理服务器自身作为备份server，当所有后端服务器都宕机时，对外提供维护提示页面  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">server &#123;  </div><div class="line">  </div><div class="line">    listen 80;  </div><div class="line">  </div><div class="line">    server_name localhost;  </div><div class="line">  </div><div class="line">       </div><div class="line">  </div><div class="line">    #charset utf-8;  </div><div class="line">  </div><div class="line">       </div><div class="line">  </div><div class="line">    #access_log logs/access.log error;  </div><div class="line">  </div><div class="line">       </div><div class="line">  </div><div class="line">    location / &#123;  </div><div class="line">  </div><div class="line">    proxy_pass http://web; #引用上面定义的upstream负载均衡组  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>Nginx常用的缓存可以分为四类：</p>
<ol>
<li><p>pxory_cache：代理缓存，作为代理服务器时，缓存后端服务器响应内容等；</p>
</li>
<li><p>open_log_cache：日志缓存；</p>
</li>
<li><p>open_file_cache：文件缓存，作为WEB服务器时需要响应文件给客户端。</p>
</li>
<li><p>fastcgi_cache：后端动态响应内容缓存，可能影响响应内容更新。</p>
</li>
</ol>
<p>缓存数据分为两部分（键：数据）：</p>
<ol>
<li><p>存储键和缓存对象元数据，存放在共享内存中;</p>
</li>
<li><p>存储缓存数据，存放在磁盘空间中；</p>
</li>
</ol>
<h4 id="代理缓存配置选项"><a href="#代理缓存配置选项" class="headerlink" title="代理缓存配置选项"></a>代理缓存配置选项</h4><p>这里只介绍代理缓存pxory_cache，这也是<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html" target="_blank" rel="external">ngx_http_proxy_module</a>模块提供的功能，这里配置选项较多，下面主要介绍有几个基本的选项：proxy_cache_path、proxy_cache和proxy_cache_valid。</p>
<h5 id="proxy-cache-path"><a href="#proxy-cache-path" class="headerlink" title="proxy_cache_path"></a>proxy_cache_path</h5><p>proxy_cache_path定义一个完整的缓存空间，指定缓存数据的磁盘路径、键（元数据）存放的内存空间以及一些其他参数，如缓存删除策略。注意，该选项只能定义在http块上下文中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">如:proxy_cache_path /etc/nginx/cache levels=1:2 keys_zone=one:10m max_size=1G inactive=10;  </div><div class="line">  </div><div class="line">    缓存数据存储在/etc/nginx/cache目录中；</div><div class="line"></div><div class="line">    levels:配置在该目录下再分两层目录，一层1个随机字符作为名称，二层2个随机字符作为名称，levels最多三层，每层最多两个字符，这是为了加快访问文件的速度；</div><div class="line">           最后使用代理url的哈希值作为关键字与文件名，一个缓存数据如下：/etc/nginx/cache/c/29/b7f54b2df772f4809d65029c；  </div><div class="line"></div><div class="line">    keys_zone:指定键（元数据）存放的内存空间，指定名称为one，这个名称后面proxy_cache需要引用；而10m就是内存空间的大小；  </div><div class="line"></div><div class="line">    max_size:指定最大缓存数据磁盘空间的大小；  </div><div class="line"></div><div class="line">    inactive:在inactive指定的时间内，未被访问的缓存数据将从缓存中删除。</div></pre></td></tr></table></figure>
<h5 id="proxy-cache"><a href="#proxy-cache" class="headerlink" title="proxy_cache"></a>proxy_cache</h5><p>proxy_cache用来引用上面proxy_cache_path定义的缓存空间，现时打开缓存功能，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">proxy_cache one； #引用上面定义上的缓存空间，同一缓存空间可以在几个地方使用</div></pre></td></tr></table></figure>
<h5 id="proxy-cache-valid"><a href="#proxy-cache-valid" class="headerlink" title="proxy_cache_valid"></a>proxy_cache_valid</h5><p>proxy_cache_valid设置不同响应代码的缓存时间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">proxy_cache_valid 200 302 10m;  </div><div class="line"></div><div class="line">proxy_cache_valid 404 1m;</div></pre></td></tr></table></figure></p>
<h4 id="配置代理缓存"><a href="#配置代理缓存" class="headerlink" title="配置代理缓存"></a>配置代理缓存</h4><p>先配置pxory_cache_path，再配置pxory_cache引用、打开缓存空间，接着配置两个proxy_cache_valid；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">proxy_cache_path /etc/nginx/cache levels=1:2 keys_zone=one:10m max_size=1G inactive=10m;     </div><div class="line">  </div><div class="line">server &#123;  </div><div class="line">  </div><div class="line">    listen 80;  </div><div class="line">    server_name localhost;  </div><div class="line"></div><div class="line">    #charset utf-8;  </div><div class="line">    #access_log logs/access.log error;  </div><div class="line"></div><div class="line">    add_header X-Cache &quot;$upstream_cache_status form $server_addr&quot;; #给请求响应增加一个头部信息，表示从服务器上返回的cache状态怎么样（有没有命中）  </div><div class="line">    </div><div class="line">    location / &#123;  </div><div class="line"></div><div class="line">        proxy_pass http://web; #引用上面定义的upstream负载均衡组  </div><div class="line">        proxy_cache one; #引用上面定义上的缓存空间，同一缓存空间可以在几个地方使用  </div><div class="line">        proxy_cache_valid 200 302 10m;  </div><div class="line">        proxy_cache_valid 404 1m; #对代码200和302的响应设置10分钟的缓存，对代码404的响应设置为1分钟:  </div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat 配置文件详解]]></title>
      <url>/2018/04/03/Tomcat%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Tomcat隶属于Apache基金会，是开源的轻量级WEB应用服务器，使用非常广泛。server.xml是Tomcat中最重要的配置文件，server.xml的每一个元素都对应了Tomcat中的一个组件；通过对xml文件中元素的配置，可以实现对Tomcat中各个组件的控制。</p>
<p>故搜索一些server.xml配置文件的详解，留以备用。</p>
<h2 id="tomcat-自带的-server-xml-文件"><a href="#tomcat-自带的-server-xml-文件" class="headerlink" title="tomcat 自带的 server.xml 文件"></a>tomcat 自带的 server.xml 文件</h2><p>server.xml 位于 Tomcat 的 conf 目录下，下面是 tomcat 自带的 server.xml 文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"8005"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.startup.VersionLoggerListener"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.AprLifecycleListener"</span> <span class="attr">SSLEngine</span>=<span class="string">"on"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.JasperListener"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.JreMemoryLeakPreventionListener"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.ThreadLocalLeakPreventionListener"</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">GlobalNamingResources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">"UserDatabase"</span> <span class="attr">auth</span>=<span class="string">"Container"</span></span></div><div class="line">              <span class="attr">type</span>=<span class="string">"org.apache.catalina.UserDatabase"</span></div><div class="line">              <span class="attr">description</span>=<span class="string">"User database that can be updated and saved"</span></div><div class="line">              <span class="attr">factory</span>=<span class="string">"org.apache.catalina.users.MemoryUserDatabaseFactory"</span></div><div class="line">              <span class="attr">pathname</span>=<span class="string">"conf/tomcat-users.xml"</span> /&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">GlobalNamingResources</span>&gt;</span></div><div class="line"> </div><div class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">"Catalina"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></div><div class="line">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></div><div class="line">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8009"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">"Catalina"</span> <span class="attr">defaultHost</span>=<span class="string">"localhost"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.realm.LockOutRealm"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.realm.UserDatabaseRealm"</span></span></div><div class="line">               <span class="attr">resourceName</span>=<span class="string">"UserDatabase"</span>/&gt;</div><div class="line">      <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></div><div class="line"> </div><div class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"WEBapps"</span></span></div><div class="line">            <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></div><div class="line">               <span class="attr">prefix</span>=<span class="string">"localhost_access_log."</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></div><div class="line">               <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</div><div class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h2><p>整体结构如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Server</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Service</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Connector</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Connector</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Engine</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Host</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">Context</span> /&gt;</span><span class="comment">&lt;!-- 现在常常使用自动部署，不推荐配置Context元素，Context小节有详细说明 --&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="元素分类"><a href="#元素分类" class="headerlink" title="元素分类"></a>元素分类</h2><p>server.xml 文件中的元素可大致分为四类：</p>
<ul>
<li>顶层元素: <code>&lt;Server&gt;</code> 和 <code>&lt;Service&gt;</code></li>
</ul>
<p>其中 Server 元素是整个配置文件的根元素， Service 元素则代表一个 Engine 元素和一组与之相连的 Connector 元素。</p>
<ul>
<li>连接器: <code>&lt;Connector&gt;</code></li>
</ul>
<p>Connector 元素代表了外部客户端发送请求到特定 Service 的接口；同时也是外部客户端从特定 Service 接收响应的接口</p>
<ul>
<li>容器: <code>&lt;Engine&gt;&lt;Host&gt;&lt;Context&gt;</code></li>
</ul>
<p>容器的作用是处理 Connector 接收进来的请求，并产生相应的响应。 Engine 、 Host 、 Context 都是容器，但他们是父子关系： Engine 包含 Host ， Host 包含 Context 。一个 Engine 组件可以处理 Service 中所有的请求，一个 Host 组件可以处理发向特定虚拟主机的所有请求， 一个 Context 组件可以处理一个特定的 WEB 应用的所有请求。</p>
<ul>
<li>内嵌组件: 可以内嵌到容器中的组件。其实， Server 、 Service 、 Connector 、 Engine 、 Host 和 Context 是最重要的最核心的 Tomcat 组件，其他组件都可以归为内嵌组件。</li>
</ul>
<h2 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h2><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p>Server 元素在最顶层，代表整个 Tomcat 容器，因此他必须是 server.xml 中唯一一个最外层元素。一个 Server 元素中可以有一个或多个 Service 元素。</p>
<p>在自带的 server.xml 文件中，最外层有一个 Server 元素， shutdown 属性表示关闭 Server 的指令； port 属性表示 Server 接收 shutdown 指令的端口，设置为 -1 可以禁掉该端口。可选属性： className ，值需要是实现了org.apache.catalina.Server接口的类名，标准实现类是org.apache.catalina.core.StandardServer类。</p>
<p>Server 的主要任务，就是提供一个接口让客户端能够访问到这个 Service 集合，同时维护他所包含的所有 Service 的生命周期，包括如何初始化、如何结束服务、如何找到客户端要访问的 Service 。</p>
<h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>Service 元素的作用是在 Connector 和 Engine 外面包一层，将他们组装在一起，对外提供服务。一个 Service 可以包含多个 Connector ，但是只能包含一个 Engine ；其中 Connector 的作用是接收客户端请求， Engine 的作用是处理接收进来的请求。</p>
<p>在自带的 server.xml 文件中， Server 中包含一个名称为 “Catalina” 的 Service 。实际上， Tomcat 可以提供多个 Service ，不同的 Service 监听不同的端口。</p>
<h3 id="Connector"><a href="#Connector" class="headerlink" title="Connector"></a>Connector</h3><p>Connector 元素的主要功能是接收连接的请求，创建 Request 和 Response 对象用于和请求端交换数据；然后分配线程让 Engine 来处理这个请求，并把产生的 Request 和 Response 对象传给 Engine 。</p>
<p>通过配置 Connector ，可以控制请求 Service 的协议和端口。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8009"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>在自带的 server.xml 文件中， Service 包含两个 Connector ：</p>
<ol>
<li><p>通过配置第一个 Connector ，客户端可以通过8080端口使用http协议访问 Tomcat ，其中， protocol 属性规定了请求的协议， port 属性规定了请求的端口号， redirectPort 属性表示当强制要求https而请求是http时，重定向至端口号为8443的 Connector ， connectionTimeout 属性表示连接的超时时间。</p>
</li>
<li><p>通过配置第二个 Connector ，客户端可以通过8009端口使用AJP协议访问Tomcat，AJP协议负责和其他的HTTP服务器（如Apache）建立连接；在把 Tomcat 与其他HTTP服务器集成时，就需要用到这个连接器。之所以用 Tomcat 和其他服务器集成，是因为 Tomcat 可以用作 Servlet/JSP 容器，但是对静态资源的处理速度较慢，不如 Apache 和 IIS 等HTTP服务器；因此常常将 Tomcat 与 Apache 等集成，前者作为 Servlet 容器，后者处理静态资源，而AJP协议便负责 Tomcat 和 Apache 的连接， Tomcat 和 Apache 等集成的原理如下图：</p>
</li>
</ol>
<p><img src="http://owek6x58j.bkt.clouddn.com/078%257WA%7B%29Q%7BH%5DAZJ6LN_G0K.png" alt="tomcat-apache">;</p>
<h3 id="Engine"><a href="#Engine" class="headerlink" title="Engine"></a>Engine</h3><p>Engine 元素在 Service 中有且只有一个； Engine 是 Service 组件中的请求处理组件。 Engine 组件从一个或多个 Connector 中接收请求并处理，并将完成的响应返回给 Connector ，最终传递给客户端。</p>
<p><code>&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</code></p>
<p>上面的配置语句，其中name属性用于日志和错误信息，在整个 Service 中应该唯一。 defaultHost 属性指定了默认的 host 名称，当发生本机的请求指定的 host 名称不存在时，一律使用 defaultHost 指定的 host 进行处理；因此， defaultHost 的值必须与 Engine 的一个 Host 组件的name属性值匹配。</p>
<h3 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h3><h4 id="Engine-和-Host"><a href="#Engine-和-Host" class="headerlink" title="Engine 和 Host"></a>Engine 和 Host</h4><p>Host 是 Engine 的子容器， Engine 组件中可以内嵌一个或多个 Host 组件，每个 Host 组件代表 Engine 中的一个虚拟主机。 Host 组件至少有一个，且其中一个的 name 必须与 Engine 组件的 defaultHost 属性相匹配。</p>
<h4 id="Host-的作用"><a href="#Host-的作用" class="headerlink" title="Host 的作用"></a>Host 的作用</h4><p>Host 虚拟主机的作用，是运行多个WEB应用（一个 Context 代表一个 WEB 应用），并负责安装、展开和结束每个 WEB 应用。</p>
<p>Host 组件代表的虚拟主机，对应了服务器中一个网络名实体（如”www.soloist.top”,或IP地址”114.114.114.114”）；为了使用户可以通过网络名连接 Tomcat 服务器，这个名字应该在 DNS 服务器上注册。</p>
<p>客户端通常使用主机名来标识他们希望连接的主机；该主机名也会包含在HTTP请求头中。 Tomcat 从 HTTP 头中提取出主机名，寻找名称匹配的主机。如果没有主机匹配，请求将发送至默认主机（localhost）。因此默认主机不需要是在 DNS 服务器中注册的网络名，因为任何与所有 Host 名不匹配的请求，都会路由至默认主机。</p>
<h4 id="Host-的配置"><a href="#Host-的配置" class="headerlink" title="Host 的配置"></a>Host 的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span> <span class="attr">appBase</span>=<span class="string">"WEBapps"</span> <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面的配置项中，name属性指定虚拟主机的主机名，一个 Engine 中有且仅有一个 Host 组件的 name 属性与 Engine 组件的 defaultHost 属性相匹配；一般情况下，主机名需要是在 DNS 服务器中注册的网络名，但是 Engine 指定的 defaultHost 不需要。</p>
<p>unpackWARs 属性指定了是否将代表 WEB 应用的 WAR 文件解压；如果为 true ，通过解压后的文件结构运行该 WEB 应用，如果为 false ，直接使用 WAR 文件运行 WEB 应用。</p>
<p>Host 中的 autoDeploy 属性与配置中未出现的 xmlBase 和 deployOnStartup 属性，都与 WEB 应用中的自动部署有关，将在 Context 中介绍。</p>
<h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><h4 id="Context-的作用"><a href="#Context-的作用" class="headerlink" title="Context 的作用"></a>Context 的作用</h4><p>Context 元素代表在特定虚拟主机上运行的一个 WEB 应用。在后文中，提到的 Context 、 应用或 WEB 应用，都指代的是 WEB 应用。每个 WEB 应用基于 WAR 文件，或 WAR 文件解压后对应的目录（称为应用目录）。</p>
<p>Context 是 Host 的子容器，每个 Host 中可以定义任意多的 Context 元素。</p>
<p>在自带的 server.xml 文件中，我们可以发现并没有 Context 元素的配置，因为 Tomcat 开启了自动部署， WEB 应用没有在配置文件中静态部署，而是由 Tomcat 通过特定的规则自动部署。</p>
<h4 id="WEB-应用自动部署"><a href="#WEB-应用自动部署" class="headerlink" title="WEB 应用自动部署"></a>WEB 应用自动部署</h4><p><strong>Host 的配置</strong></p>
<p>要开启自动部署，需要配置所在的虚拟主机；配置的方式就是前面提到的 deployOnStartup 和 autoDeploy 属性。如果 deployOnStartup 和 autoDeploy 设置为 true ，则 Tomcat 启动自动部署；当检测到新的 WEB 应用或 WEB 应用的更新时，会触发应用的部署（或重新部署）。二者的主要区别在于， deployOnStartup 为 true 时， Tomcat 在启动时检查 WEB 应用，且检测到所有的 WEB 应用视作新应用； autoDeploy 为 true 时， Tomcat 在运行时定期检查新的 WEB 应用或 WEB 应用的更新。除此之外，二者的处理相似。</p>
<p>通过配置 deployOnStartup 和 autoDeploy 可以开启虚拟主机自动部署 WEB 应用；实际上，自动部署依赖于检查是否有新的或更改过的 WEB 应用。而 Host 元素的 appBase 和 xmlBase 设置了检查 WEB 应用更新的目录。</p>
<p>其中， appBase 属性指定 WEB 应用所在的目录，默认值是 WEBapps ，这是一个相对路径，代表 Tomcat 根目录下的 WEBapps 文件夹。</p>
<p>xmlBase 属性指定 WEB 应用的 xml 配置文件所在的目录，默认值是 conf/<engine_name>/<host_name>，例如在自带文件中，主机 localhost 的 xmlBase 默认值为 Tomcat 根目录下 conf/Catalina/localhost。</host_name></engine_name></p>
<p><strong>检查 WEB 应用更新</strong></p>
<p>一个WEB应用可能包含以下文件：xml配置文件，WAR包，以及一个应用目录（该目录包含WEB应用的文件结构）；其中xml配置文件位于xmlBase指定的目录，WAR包和应用目录位于appBase指定的目录。</p>
<p>Tomcat 按如下的顺序进行扫描，检查应用更新。</p>
<ol>
<li><p>扫描虚拟主机指定的xmlBase下的xml配置文件。</p>
</li>
<li><p>扫描虚拟主机指定的appBase下的WAR文件。</p>
</li>
<li><p>扫描虚拟主机指定的appBase下的应用目录。</p>
</li>
</ol>
<p><strong>Context 元素的配置</strong></p>
<p>Context 元素最重要的属性是 docBase 和 path ，此外 reloadable 属性也比较常用。</p>
<p>docBase 指定了该 WEB 应用使用的 WAR 包路径，或应用目录，需要注意的是，在自动部署场景下（配置文件位于xmlBase中），docBase不在appBase目录中，才需要指定；如果 docBase 指定的 WAR 包或应用目录就在 appBase 中，则不需要指定，因为 Tomcat 会自动扫描appBase中的WAR包和应用目录，指定了反而会造成问题。</p>
<p>path 指定了访问该 WEB 应用的上下文路径，当请求到来时， Tomcat 根据 WEB 应用的 path 属性与 URI 的匹配程度来选择 WEB 应用处理相应请求。例如， WEB 应用 app1 的 path 属性是 “/app1”， WEB 应用 app2 的 path 属性是 “/app2”，那么请求/app/index.html会交给app1来处理，而请求/app2/index.html会交给app2来处理。如果一个Context元素的path属性为””，那么这个Context是虚拟主机的默认WEB应用；当请求的url与所有的path都不匹配时，使用该默认WEB应用来处理。</p>
<p>需要注意的是，在自动部署场景下（配置文件位于xmlBase中），不能指定path属性，path属性由配置文件的文件名、WAR文件的文件名或应用目录的文件名称自动推导出来。如扫描WEB应用时，发现了xmlBase目录下的app1.xml，或appBase目录下的app1.WAR或app1应用目录，则该WEB应用的path属性是”app1”，如果名称是ROOT，则该WEB应用是虚拟主机默认的WEB应用，此时path属性推导为””。</p>
<p>reloadable属性指示Tomcat是否在运行时监控在WEB-INF/classes和WEB-INF/lib目录下的class文件的改动。如果为true，则当class文件改动时，会触发WEB应用的重新加载。在开发环境下，reloadable设置为true便于测试，但是在生产环境中设置为true会给服务器性能带来压力，因此默认值为false。</p>
<p><strong>自动部署举例</strong></p>
<p>最典型的自动部署，就是当我们安装完Tomcat后，WEBapps目录下有如下文件夹：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- docs</div><div class="line">- example</div><div class="line">- host-manager</div><div class="line">- manager</div><div class="line">- ROOT</div></pre></td></tr></table></figure>
<p>当我们启动Tomcat后，可以使用<a href="http://localhost:8080/来访问Tomcat，其实访问的就是ROOT对应的WEB应用；我们也可以通过http://localhost:8080/docs来访问docs应用，其他同理。" target="_blank" rel="external">http://localhost:8080/来访问Tomcat，其实访问的就是ROOT对应的WEB应用；我们也可以通过http://localhost:8080/docs来访问docs应用，其他同理。</a></p>
<h4 id="server-xml中静态部署WEB应用"><a href="#server-xml中静态部署WEB应用" class="headerlink" title="server.xml中静态部署WEB应用"></a>server.xml中静态部署WEB应用</h4><p>除了自动部署，我们也可以在server，xml中通过<context>元素静态部署WEB应用。静态部署和动态部署是可以共存的，在实际应用中，并不推荐使用静态部署，因为server.xml是不可动态加载的资源，服务器一旦启动了以后，要修改这个文件，只有重启服务器才能加载。而自动部署可以在Tomcat运行时通过定期的扫描来实现，不需要重启服务器。</context></p>
<p>server.xml中使用Context元素配置WEB应用，Context元素应该位于Host元素中</p>
<p>docBase：静态部署时，docBase可以在appBase目录下，也可以不在。</p>
<p>path：静态部署时，可以显式指定path属性，但是仍然受到了严格的限制：只有当自动部署完全关闭(deployOnStartup和autoDeploy都为false)或docBase不在appBase中时，才可以设置path属性。在本例中，docBase不在appBase中，因此path属性可以设置。</p>
<p>reloadable属性的用法与自动部署时相同。</p>
<h2 id="核心组件的关联"><a href="#核心组件的关联" class="headerlink" title="核心组件的关联"></a>核心组件的关联</h2><h3 id="整体关系"><a href="#整体关系" class="headerlink" title="整体关系"></a>整体关系</h3><p>核心组件的整体关系，可以总结如下：</p>
<p>Server元素在最顶层，代表整个Tomcat容器；一个Server元素中可以有一个或多个Service元素。</p>
<p>Service在Connector和Engine外面包了一层，把它们组装在一起，对外提供服务。一个Service可以包含多个Connector，但是只能包含一个Engine；Connector接收请求，Engine处理请求。</p>
<p>Engine、Host和Context都是容器，且 Engine包含Host，Host包含Context。每个Host组件代表Engine中的一个虚拟主机；每个Context组件代表在特定Host上运行的一个WEB应用。</p>
<h3 id="如何确定请求由谁处理？"><a href="#如何确定请求由谁处理？" class="headerlink" title="如何确定请求由谁处理？"></a>如何确定请求由谁处理？</h3><h4 id="根据协议和端口号选定Service和Engine"><a href="#根据协议和端口号选定Service和Engine" class="headerlink" title="根据协议和端口号选定Service和Engine"></a>根据协议和端口号选定Service和Engine</h4><p>Service中的Connector组件可以接收特定端口的请求。因此，当Tomcat启动时，Service组件便会监听特定端口，在上面的配置文件中，Catalina这个Service监听了基于HTTP协议的8080端口和基于AJP协议的8009端口。当请求进来时，Tomcat便可以根据协议和端口号选定处理请求的Service；Service一旦被选定，Engine也就确定了。</p>
<p><strong>通过在Server中配置多个Service，可以实现通过不同的端口号来访问同一台机器上的不同应用。</strong></p>
<h4 id="根据域名或IP地址选定Host"><a href="#根据域名或IP地址选定Host" class="headerlink" title="根据域名或IP地址选定Host"></a>根据域名或IP地址选定Host</h4><p>Service确定后，Tomcat在Service中寻找名称与域名/IP地址匹配的Host处理该请求，如果没有找到，则使用Engine中指定defaultHost来处理该请求。因为上面的配置文件只有一个Host，因此该Service/Engine的所有请求都交给该Host处理。</p>
<h4 id="根据URI选定Context-WEB应用"><a href="#根据URI选定Context-WEB应用" class="headerlink" title="根据URI选定Context/WEB应用"></a>根据URI选定Context/WEB应用</h4><p>这点在Context中有介绍。</p>
<h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>以请求<a href="http://localhost:8080/examples/index.html为例，首先通过协议和端口号（HTTP和8080）选定Service，然后通过主机名（localhost）选定Host，然后通过URI（/examples/index.html）选定WEB应用" target="_blank" rel="external">http://localhost:8080/examples/index.html为例，首先通过协议和端口号（HTTP和8080）选定Service，然后通过主机名（localhost）选定Host，然后通过URI（/examples/index.html）选定WEB应用</a></p>
<h3 id="如何配置多个服务？"><a href="#如何配置多个服务？" class="headerlink" title="如何配置多个服务？"></a>如何配置多个服务？</h3><p>通过在Server中配置多个Service服务，可以实现通过不同的端口号来访问同一台机器上部署的不同应用。</p>
<p>在server.xml中配置多服务的方法很简单：</p>
<ol>
<li><p>复制\<service>，放在当前\<service>后面。</service></service></p>
</li>
<li><p>修改端口号：根据需要监听的端口号修改\<connector>元素的port属性，必须保证该端口没有被其他进程占用，否则将会出错。</connector></p>
</li>
<li><p>修改Service和Engine的name属性</p>
</li>
<li><p>修改Host的appBase属性（如WEBapps2）</p>
</li>
<li><p>WEB应用仍然使用自动部署</p>
</li>
<li><p>将要部署的WEB应用（WAR包或应用目录）拷贝到新的appBase目录下。</p>
</li>
</ol>
<p>以上面的配置文件为例，可以这样配置多服务：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version='1.0' encoding='utf-8'?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"8005"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.startup.VersionLoggerListener"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.AprLifecycleListener"</span> <span class="attr">SSLEngine</span>=<span class="string">"on"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.JasperListener"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.JreMemoryLeakPreventionListener"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.ThreadLocalLeakPreventionListener"</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">GlobalNamingResources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">"UserDatabase"</span> <span class="attr">auth</span>=<span class="string">"Container"</span> <span class="attr">type</span>=<span class="string">"org.apache.catalina.UserDatabase"</span> <span class="attr">description</span>=<span class="string">"User database that can be updated and saved"</span> <span class="attr">factory</span>=<span class="string">"org.apache.catalina.users.MemoryUserDatabaseFactory"</span> <span class="attr">pathname</span>=<span class="string">"conf/tomcat-users.xml"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">GlobalNamingResources</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">"Catalina"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8009"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">"Catalina"</span> <span class="attr">defaultHost</span>=<span class="string">"localhost"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.realm.LockOutRealm"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.realm.UserDatabaseRealm"</span></span></div><div class="line">               <span class="attr">resourceName</span>=<span class="string">"UserDatabase"</span>/&gt;</div><div class="line">      <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"/opt/project/WEBapps"</span> <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span> <span class="attr">prefix</span>=<span class="string">"localhost_access_log."</span> <span class="attr">suffix</span>=<span class="string">".txt"</span> <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">"Catalina2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8084"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8010"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">"Catalina2"</span> <span class="attr">defaultHost</span>=<span class="string">"localhost"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.realm.LockOutRealm"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.realm.UserDatabaseRealm"</span></span></div><div class="line">               <span class="attr">resourceName</span>=<span class="string">"UserDatabase"</span>/&gt;</div><div class="line">      <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"/opt/project/WEBapps2"</span> <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span> <span class="attr">prefix</span>=<span class="string">"localhost_access_log."</span> <span class="attr">suffix</span>=<span class="string">".txt"</span> <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></div></pre></td></tr></table></figure>
<p>再将原WEBapps下的docs目录拷贝到WEBapps2中，则通过如下两个接口都可以访问docs应用：</p>
<p><a href="http://localhost:8080/docs/" target="_blank" rel="external">http://localhost:8080/docs/</a></p>
<p><a href="http://localhost:8084/docs/" target="_blank" rel="external">http://localhost:8084/docs/</a></p>
<h2 id="其他组件"><a href="#其他组件" class="headerlink" title="其他组件"></a>其他组件</h2><p>除核心组件外，server.xml中还可以配置很多其他组件，具体可以查看<a href="http://tomcat.apache.org/tomcat-8.0-doc/config/index.html" target="_blank" rel="external">Tomcat官方文档</a></p>
<h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.startup.VersionLoggerListener"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.AprLifecycleListener"</span> <span class="attr">SSLEngine</span>=<span class="string">"on"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.JasperListener"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.JreMemoryLeakPreventionListener"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.ThreadLocalLeakPreventionListener"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>Listener(即监听器)定义的组件，可以在特定事件发生时执行特定的操作；被监听的事件通常是Tomcat的启动和停止。</p>
<p>监听器可以在Server、Engine、Host或Context中，上面配置的的监听器都是在Server中。实际上，本例中定义的6个监听器，都只能存在于Server组件中。监听器不允许内嵌其他组件。</p>
<p>监听器需要配置的最重要的属性是className，该属性规定了监听器的具体实现类，该类必须实现了org.apache.catalina.LifecycleListener接口。</p>
<p>下面依次介绍配置文件中配置的监听器：</p>
<ul>
<li><p>VersionLoggerListener：当Tomcat启动时，该监听器记录Tomcat、Java和操作系统的信息。该监听器必须是配置的第一个监听器。</p>
</li>
<li><p>AprLifecycleListener：Tomcat启动时，检查APR库，如果存在则加载。APR，即Apache Portable Runtime，是Apache可移植运行库，可以实现高可扩展性、高性能，以及与本地服务器技术更好的集成。</p>
</li>
<li><p>JasperListener：在WEB应用启动之前初始化Jasper，Jasper是JSP引擎，把JVM不认识的JSP文件解析成java文件，然后编译成class文件供JVM使用。</p>
</li>
<li><p>JreMemoryLeakPreventionListener：与类加载器导致的内存泄露有关。</p>
</li>
<li><p>GlobalResourcesLifecycleListener：通过该监听器，初始化\<globalnamingresources>标签中定义的全局JNDI资源；如果没有该监听器，任何全局资源都不能使用。</globalnamingresources></p>
</li>
<li><p>ThreadLocalLeakPreventionListener：当WEB应用因thread-local导致的内存泄露而要停止时，该监听器会触发线程池中线程的更新。当线程执行完任务被收回线程池时，活跃线程会一个一个的更新。只有当WEB应用(即Context元素)的renewThreadsWhenStoppingContext属性设置为true时，该监听器才有效。</p>
</li>
</ul>
<h3 id="GlobalNamingResources与Realm"><a href="#GlobalNamingResources与Realm" class="headerlink" title="GlobalNamingResources与Realm"></a>GlobalNamingResources与Realm</h3><p>上面的配置文件中，Engine组件下定义了Realm组件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.realm.LockOutRealm"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.realm.UserDatabaseRealm"</span> <span class="attr">resourceName</span>=<span class="string">"UserDatabase"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Realm，可以把它理解成“域”；Realm提供了一种用户密码与WEB应用的映射关系，从而达到角色安全管理的作用。在本例中，Realm的配置使用name为UserDatabase的资源实现。而该资源在Server元素中使用GlobalNamingResources配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">GlobalNamingResources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">"UserDatabase"</span> <span class="attr">auth</span>=<span class="string">"Container"</span> <span class="attr">type</span>=<span class="string">"org.apache.catalina.UserDatabase"</span> <span class="attr">description</span>=<span class="string">"User database that can be updated and saved"</span></span></div><div class="line">              <span class="attr">factory</span>=<span class="string">"org.apache.catalina.users.MemoryUserDatabaseFactory"</span> <span class="attr">pathname</span>=<span class="string">"conf/tomcat-users.xml"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">GlobalNamingResources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>GlobalNamingResources元素定义了全局资源，通过配置可以看出，该配置是通过读取/conf/tomcat-users.xml实现的。</p>
<h3 id="Valve"><a href="#Valve" class="headerlink" title="Valve"></a>Valve</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span> <span class="attr">prefix</span>=<span class="string">"localhost_access_log."</span> <span class="attr">suffix</span>=<span class="string">".txt"</span> <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>单词Valve的意思是“阀门”，在Tomcat中代表了请求处理流水线上的一个组件，Valve可以与Tomcat的容器（Engine、Host或Context）关联。</p>
<p>不同的Valve有不同的特性，下面介绍一下上面出现的AccessLogValve。</p>
<p>AccessLogValve的作用是通过日志记录其所在容器中处理的所有请求，上面的配置文件中，Valve放在Host下，便可以记录该Host处理的所有请求。AssessLogValve记录的日志就是访问日志，每天的请求会写到一个日志文件里。</p>
<p>上面AssessLogValve属性的配置，使用的是默认配置。AssessLogValve中各个属性的作用如下：</p>
<ol>
<li><p>className:规定了Valve的类型，是最重要的属性</p>
</li>
<li><p>directory:指定日志存储的位置</p>
</li>
<li><p>prefix:指定日志文件的前缀</p>
</li>
<li><p>suffix:指定日志文件的后缀</p>
</li>
<li><p>pattern:指定记录日志的格式，上面各项含义如下：</p>
<ul>
<li><p>%h:远程主机名或IP地址，如果有nginx等反向代理服务器进行请求分发，该主机名/IP地址代表的是nginx，否则代表的是客户端。</p>
</li>
<li><p>%l:远程逻辑用户名，一律是”-“，可以忽略</p>
</li>
<li><p>%u:授权的远程用户名，如果没有，则是”-“</p>
</li>
<li><p>%t:访问的时间</p>
</li>
<li><p>%r:请求的第一行，即请求的方法（get/post），url，及协议</p>
</li>
<li><p>%s:响应的状态，200、404等</p>
</li>
<li><p>%b:响应的数据量，不包括请求头，如果是0，则是”-“</p>
</li>
<li><p>除此之外，还有一个常用选项是%D，含义是请求处理的时间（单位是毫秒）</p>
</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Fragment 学习总结]]></title>
      <url>/2018/04/02/Android%20Fragment%20%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Fragment </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python requests库的使用]]></title>
      <url>/2018/03/14/Python%20requests%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> requests </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[排序算法汇总]]></title>
      <url>/2018/01/28/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<p>数据结构的一部分重要内容便是排序算法，对于排序之后的数组可以采用快速的 binary search 算法。排序算法多种多样，按类别有插入类、选择类、交换类，还有一些其他的比如归并等等，对于数据量太多内存无法盛放的情况，则有外部排序。度量各种算法的标准主要有，1）稳定性，2）最好/坏情况下的时间复杂度，3）最好/坏情况下的空间复杂度。</p>
<p>接下来一一介绍以上的算法及其性能分析，以下排序方法均是对于长度为 nn 的序列进行排序。</p>
<h2 id="插入类排序"><a href="#插入类排序" class="headerlink" title="插入类排序"></a>插入类排序</h2><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><p>直接插入排序从待排序序列中选取一个数，选好一个位置将其插入到有序列表中，不断重复这个过程直到排序完成。</p>
<p><img src="http://owek6x58j.bkt.clouddn.com/Insertion-sort.gif" alt="Insert-sort"></p>
<p>上图展示了直接插入执行的过程，开始假设第 0 个元素有序，对于第 i=1…n−1 个元素，自 i−1 起往前搜索，查找插入位置，同时后移记录，找到合适位置插入即可，可见共进行 n−1 次插入，若数组有序只需进行 n−1  次比较即可，无需移动，所示复杂度为 O(n) ，若数组逆序，则需进行 (n−1)(n−1+1)2(n−1)(n−1+1)2 次比较与移动，复杂度为 O(n2) ,所以最好时间复杂度 O(n) ,最差时间复杂度 O(n2) ,平均时间复杂度为 O(n2) 。由于在原地排序，空间复杂度为 O(1) ，另外该算法没有改变排序前后相同关键字的顺序，所以是稳定的。</p>
<p>代码演示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="comment">// i = 1 -&gt; n-1</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(nums[i] &gt;= nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> pivot = nums[i], j = i - <span class="number">1</span>; <span class="comment">//  待插入</span></div><div class="line">        <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; nums[j] &gt; pivot)</div><div class="line">            nums[j + <span class="number">1</span>] = nums[j--];</div><div class="line">        nums[j + <span class="number">1</span>] = pivot; <span class="comment">//j &lt; 0代表插入到最掐面</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h3><p>由于排序过程中前边已经有序，所以可以对有序序列进行折半查找，相对直接插入来说，减少了比较次数，但是由于找到插入位置后扔需移动序列中的元素，所以时间复杂度仍为 O(n2) 。折半插入排序中，需要用 binary search 找到插入位置插入即可。若有相同元素，为了保证其稳定性，则找到相同 key 的最后一个，比如说现在序列为 [1,1,1,1,1,3,4,1] ,我们要插入最后一个 1 ，为了保持其稳定性，则需找到最后一个 1 。</p>
<p>这种带有相同元素的 binary search 的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> POS, <span class="keyword">int</span> key)</span> </span>&#123; </div><div class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> high = nums.length - <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(low &lt;= high) &#123;</div><div class="line">        <span class="keyword">int</span> mid = low + (high - low) / <span class="number">2</span>; <span class="comment">//防止溢出</span></div><div class="line">        <span class="keyword">if</span>(nums[mid] == key) &#123;</div><div class="line">            <span class="keyword">if</span>(POS == -<span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">if</span>(mid &gt; <span class="number">0</span> &amp;&amp; nums[mid - <span class="number">1</span>] == nums[mid])  high = mid - <span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">return</span> mid;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (POS == <span class="number">1</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(mid &lt; nums.length - <span class="number">1</span> &amp;&amp; nums[mid + <span class="number">1</span>] == nums[mid]) low = mid + <span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">return</span> mid;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">return</span> mid; <span class="comment">// POS == 0</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; key) &#123;</div><div class="line">            high = mid - <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            low = mid + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> high; <span class="comment">//在 high 之后的元素插入即可</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>直接插入排序在序列基本有序时，运算量接近线性，所以希尔排序先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。因此希尔排序可理解为增量插入排序，如下图所示：</p>
<p><img src="http://owek6x58j.bkt.clouddn.com/Shell-sort.gif" alt="Shell-sort"></p>
<p>需要注意的是需要时的增量序列中的任意元素没有除 1 之外的公因子，且最后一个增量必为 1 ，所以在排序中，先给出一个系列间隔，使得待排序数组按这个间隔进行排序，最后来一遍直接插入排序即可。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shell_sort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="comment">//给定增量序列,， 注意 做自动生成 则增量不能有除 1 以外的公因子</span></div><div class="line">        <span class="keyword">int</span>[] dks = &#123;<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> dk : dks ) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = dk; i &lt; nums.length; i++) &#123;</div><div class="line">                <span class="keyword">if</span>(nums[i] &gt; nums[i - dk]) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">int</span> pivot = nums[i],j = i - dk;</div><div class="line">                <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; nums[j] &gt; pivot) &#123;</div><div class="line">                    nums[j + dk] = nums[j];</div><div class="line">                    j -= dk;</div><div class="line">                &#125;</div><div class="line">                nums[j+dk] = pivot;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//System.out.println(Arrays.toString(nums));</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//    output :</span></div><div class="line"><span class="comment">//            dk=5    [13, 27, 49, 55, 4, 49, 38, 65, 97, 76]</span></div><div class="line"><span class="comment">//            dk=3    [13, 4, 49, 38, 27, 49, 55, 65, 97, 76]</span></div><div class="line"><span class="comment">//            dk=1    [4, 13, 27, 38, 49, 49, 55, 65, 76, 97]</span></div></pre></td></tr></table></figure>
<p>由于希尔排序的时间复杂度设计一些数学难题，当数组长度 n 在一定范围内，其平均复杂度为 O(n1.3) ，而且是一种不稳定排序。</p>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h3><p>选择排序是这样执行的，对于数组 L 中的元素 0…n−1 ，首先找到最小的元素，与 0 交换，找到次小的元素，与 1 交换，重复执行直到结束。如下图所示：</p>
<p><img src="http://owek6x58j.bkt.clouddn.com/Selection-sort.gif" alt="Selection-sort"></p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select_sort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; nums.length - <span class="number">1</span> ; i ++) &#123;</div><div class="line">        <span class="keyword">int</span> j = i, idx = j;</div><div class="line">        <span class="keyword">for</span>(; j &lt; nums.length; j ++) &#123;</div><div class="line">            <span class="keyword">if</span>(nums[j] &lt; nums[idx]) idx = j;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>( i != idx) &#123;</div><div class="line">            <span class="keyword">int</span> tmp = nums[i];</div><div class="line">            nums[i] = nums[idx];</div><div class="line">            nums[idx] = tmp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>选择排序的最好时间复杂度 O(n2) ,最差时间复杂度 O(n2) ,平均时间复杂度为 O(n2) 。由于在原地排序，空间复杂度为 O(1) ，另外注意算法是不稳定的。比如说序列 [5¯,8,5,2,7]，第一次 5¯↔2 ,变为 [2,8,5,5¯,7] ，之后会选择第一个5，这便导致了不稳定的发生。</p>
<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>堆（Heap）可以看做一颗完全二叉树，其定义如下：</p>
<ul>
<li>父节点的键值总是大于等于（或者小于等于，对应最大堆或最小堆）左右子节点的键值</li>
<li>每个节点的左右子树都是一个二叉堆</li>
</ul>
<p>以最大堆为例，输出堆顶的最大元素，使得剩余的 n−1 个元素重新构建一个最大堆，得到大值，反复执行，便能得到一个有序序列，这个过程便是堆排序。可见堆排序需要解决以下两个问题：</p>
<ul>
<li>将无序序列构造成一个最大堆</li>
<li>输出堆顶元素后，将剩余元素重新调整为一个最大堆</li>
</ul>
<p>给定待排序数组之后，将其理解为完全二叉树的形式，在该完全二叉树的最后一个非叶子节点开始进行调整，构建堆，之后取走最值元素，调整剩余元素构造的堆，直到完成。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// heap sort 最大堆，会生成从小到大的序列，因为每次取得一个最大的放在数组的最后</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>) <span class="keyword">return</span>; </div><div class="line">    <span class="keyword">int</span> len = nums.length; <span class="comment">//长度</span></div><div class="line">    <span class="comment">//最后一个非叶子节点  n/2 -&gt; 0 不断调整，使其成为一个最大堆</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len / <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i)</div><div class="line">        head_adjust(nums, i, len - <span class="number">1</span>);</div><div class="line">    <span class="comment">//顶堆元素与最后一个交换，这时只有新的堆顶不满足堆的定义，调整为最大堆即可，然后将堆顶与倒数第二个交换</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) &#123;</div><div class="line">        <span class="keyword">int</span> tmp = nums[i];</div><div class="line">        nums[i]= nums[<span class="number">0</span>];</div><div class="line">        nums[<span class="number">0</span>] = tmp;</div><div class="line">        head_adjust(nums, <span class="number">0</span>, i-<span class="number">1</span>);  <span class="comment">// 这里 i 之后的元素都已经排序好了 </span></div><div class="line">    &#125;</div><div class="line">    System.out.println(Arrays.toString(nums));</div><div class="line">&#125;</div><div class="line"><span class="comment">// 针对某个节点调整该堆,根节点从i = 0 开始，所以左右孩子节点分别为  2*i+1 、 2*i+2</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">head_adjust</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start ,<span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> cur = nums[start];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span> * start + <span class="number">1</span> ; i &lt;= end ; i *= <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">if</span>( i + <span class="number">1</span> &lt;= end &amp;&amp; nums[i + <span class="number">1</span>] &gt; nums[i]) i++;<span class="comment">// i 为左右孩子较大的</span></div><div class="line">        <span class="keyword">if</span>( cur &gt; nums[i] ) <span class="keyword">break</span>; <span class="comment">// 父节点大于左右孩子</span></div><div class="line">        nums[start] = nums[i]; <span class="comment">// 交换 父子节点</span></div><div class="line">        start = i; <span class="comment">// 调整交换过后的子节点</span></div><div class="line">    &#125;</div><div class="line">    nums[start] = cur;  <span class="comment">//将待调整节点的值赋到最后的正确位置上</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>堆排序一般适用于 n 值较大的情形，其时间主要耗费在构建堆时的元素的反复筛选上，其最好时间复杂度 O(nlogn) ,最差时间复杂度 O(nlogn) ,平均时间复杂度为 O(nlogn) 。由于在原地排序，空间复杂度为 O(1) ,另外注意 堆排序是不稳定的。虽然其时间复杂度比较低，但一般情况下效率不如快速，归并甚至希尔排序。</p>
<h2 id="交换类排序"><a href="#交换类排序" class="headerlink" title="交换类排序"></a>交换类排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>冒泡比较简单，它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p>
<p>冒泡排序算法的运作如下：</p>
<ol>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li>
<li>针对所有的元素重复以上的步骤，除了最后一个。</li>
<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>
</ol>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置一个 flag ，当某次没有发生交换，说明数组已经有序了</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = nums.length-<span class="number">1</span> ; i &gt; <span class="number">0</span> ; i --)&#123;</div><div class="line">        flag = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; i ; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(nums[j] &gt; nums[j+<span class="number">1</span>])&#123;</div><div class="line">                <span class="keyword">int</span> tmp = nums[j+<span class="number">1</span>];</div><div class="line">                nums[j+<span class="number">1</span>] = nums[j];</div><div class="line">                nums[j] = tmp;</div><div class="line">                flag = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (flag == <span class="keyword">false</span>) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>时间复杂度当有序时最好时间复杂度 O(n) ，最差时间复杂度 O(n2) ，平均时间复杂度为 O(n2) ，为一种稳定排序。</p>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序，又称划分交换排序，使用分治法策略来把一个序列分为两个子序列。</p>
<p>步骤为：</p>
<ol>
<li>从数列中挑出一个元素，称为”基准”（pivot），</li>
<li>重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任何一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li>
<li>递归地把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>
</ol>
<p>递归到最底部时，数列的大小是零或一，也就是已经排序好了。这个算法一定会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。如下图所示：</p>
<p><img src="http://owek6x58j.bkt.clouddn.com/Partition_example.svg" alt="Partition"></p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</div><div class="line">    partion(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//递归版本，随机选取pivot</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ramdom_partion</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> left ,<span class="keyword">int</span> right)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (left &gt;= right) <span class="keyword">return</span>;</div><div class="line">    <span class="comment">//产生 left -right 之间的随机数,并交换到 left 处作为pivot</span></div><div class="line">    <span class="keyword">int</span> idx = <span class="keyword">new</span> Random().nextInt(right-left) + left;</div><div class="line">    <span class="keyword">int</span> tmp = nums[left];</div><div class="line">    nums[left] = nums[idx];</div><div class="line">    nums[idx] = tmp;</div><div class="line">    <span class="keyword">int</span> pivot = nums[left];</div><div class="line">    <span class="keyword">int</span> l = left, r = right;</div><div class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</div><div class="line">        <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[r] &gt;= pivot) --r;</div><div class="line">        <span class="keyword">if</span> (l &lt; r) nums[l] = nums[r];</div><div class="line">        <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[l] &lt; pivot) ++l;</div><div class="line">        <span class="keyword">if</span> (l &lt; r) nums[r] = nums[l];</div><div class="line">    &#125;</div><div class="line">    nums[l] = pivot;</div><div class="line">    ramdom_partion(nums, left, l - <span class="number">1</span>);</div><div class="line">    ramdom_partion(nums, l + <span class="number">1</span>, right);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//递归版本，设置第一个为 pivot </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">partion</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> left ,<span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (left &gt;= right) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> l = left, r = right;</div><div class="line">    <span class="keyword">int</span> pivot = nums[left]; <span class="comment">// 设置 pivot</span></div><div class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</div><div class="line">        <span class="keyword">while</span> ( l &lt; r &amp;&amp; nums[r] &gt;= pivot) --r;</div><div class="line">        <span class="keyword">if</span> (l &lt; r ) nums[l] = nums[r];</div><div class="line">        <span class="keyword">while</span> ( l &lt; r &amp;&amp; nums[l] &lt; pivot ) ++l;</div><div class="line">        <span class="keyword">if</span> (l &lt; r ) nums[r] = nums[l];</div><div class="line">    &#125;</div><div class="line">    nums[l] = pivot;</div><div class="line">    partion(nums, left, l - <span class="number">1</span>);</div><div class="line">    partion(nums, l + <span class="number">1</span>, right);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意若数组逆序，则 quick sort 退化为 bubble sort ，所以选择 pivot 的时候最好随机选取，以上代码中给出了随机选取的方式，选好后换到第一个即可，最好时间复杂度 O(nlogn) ，最差时间复杂度 O(n2) ，即数组逆序的时候，但是随机选取 pivot 应该不会有这种状况，平均时间复杂度为 O(nlogn) ，空间复杂度因为递归调用，所以操作系统需要对参数进行压栈，当数组逆序是，达到最坏空间复杂度为 O(n) ，一般情况的平均空间复杂度为  O(logn) ，且注意算法是不稳定的。</p>
<p><strong>事实上，快速排序通常明显比其他 O(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地达成。</strong></p>
<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>归并排序的思想是这样的，将待排序序列看成是 n 个长度为 1 的有序序列，将相邻的有序表成对归并，得到 n/2 个长度为 2 的有序表；将这些有序序列再次归并，得到 n/4 个长度为 4 的有序序列；如此反复进行下去，最后得到一个长度为 n 的有序序列。如下图所示：</p>
<p><img src="http://owek6x58j.bkt.clouddn.com/Merge-sort.gif" alt="Merge-sort"></p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//merge sort 分三个函数，分别是调用、划分、合并</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</div><div class="line">    sort(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//划分区间</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (left &gt;= right) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</div><div class="line">    sort(nums, left, mid);</div><div class="line">    sort(nums, mid+<span class="number">1</span>, right);</div><div class="line">    merge(nums, left, mid, right);</div><div class="line">&#125;</div><div class="line"><span class="comment">//将 [left...mid] 与 [mid+1...right] 两个序列合并为新的有序序列   </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> [] nums,<span class="keyword">int</span> left,<span class="keyword">int</span> mid,<span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[right - left + <span class="number">1</span>];<span class="comment">//建立额外的空间</span></div><div class="line">    <span class="keyword">int</span> l = left, r = mid+<span class="number">1</span>, k=<span class="number">0</span>;      <span class="comment">//</span></div><div class="line">    <span class="keyword">while</span> (l &lt;= mid &amp;&amp; r &lt;= right) &#123;</div><div class="line">        <span class="keyword">if</span> (nums[l] &lt;= nums [r]) tmp[k++] = nums[l++];</div><div class="line">        <span class="keyword">else</span> tmp[k++] = nums[r++];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (l &lt;=  mid ) tmp[k++] = nums[l++];</div><div class="line">    <span class="keyword">while</span> (r &lt;= right) tmp[k++] = nums[r++];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tmp.length; i++)</div><div class="line">        nums[left + i] = tmp[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line">链表归并排序：</div><div class="line"><span class="comment">//归并排序算法,类似于数组的归并，思路基本完全一样</span></div><div class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) </div><div class="line">        <span class="keyword">return</span> head;</div><div class="line">    ListNode prev = <span class="keyword">null</span>;</div><div class="line">    ListNode slow = head, fast = head; </div><div class="line">    <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>)&#123;</div><div class="line">        prev = slow; <span class="comment">// 记录后半部分的头指针</span></div><div class="line">        slow = slow.next;</div><div class="line">        fast = fast.next.next;</div><div class="line">    &#125;</div><div class="line">    prev.next = <span class="keyword">null</span>; <span class="comment">// 断开连接</span></div><div class="line">    </div><div class="line">    ListNode h1 = sortList(head);</div><div class="line">    ListNode h2 = sortList(slow);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> merge(h1, h2);</div><div class="line">&#125;<span class="comment">//归并两个链表的过程</span></div><div class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">merge</span><span class="params">(ListNode h1, ListNode h2)</span> </span>&#123;</div><div class="line">    ListNode fake = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">    ListNode tail = fake;</div><div class="line">    <span class="keyword">while</span> (h1 != <span class="keyword">null</span> &amp;&amp; h2 != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (h1.val &gt; h2.val) &#123;</div><div class="line">            tail.next = h2;</div><div class="line">            h2 = h2.next;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            tail.next = h1;</div><div class="line">            h1 = h1.next;</div><div class="line">        &#125;</div><div class="line">        tail = tail.next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (h1 != <span class="keyword">null</span>) tail.next = h1;</div><div class="line">    <span class="keyword">if</span> (h2 != <span class="keyword">null</span>) tail.next = h2;</div><div class="line">    <span class="keyword">return</span> fake.next;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>归并排序最好最坏的时间复杂度均为 O(nlogn) ，空间复杂度也为 O(n) ，且最大的优点是在 O(nlogn) 中他是一种稳定的排序算法。</p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 将80端口请求转发到8080]]></title>
      <url>/2017/12/31/Ubuntu%20%E5%B0%8680%E7%AB%AF%E5%8F%A3%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E5%88%B08080/</url>
      <content type="html"><![CDATA[<p>在Ubuntu部署了tomcat，一般会使用非root用户启动，但域名绑定时会直接访问80端口号。众所周知，在unix下，非root用户不能监听1024以上的端口号，这个tomcat服务器就没办法绑定在80端口下。所以这里需要使用linux的端口转发机制，把到80端口的服务请求都转到8080端口上。</p>
<h2 id="安装-iptables-persistent"><a href="#安装-iptables-persistent" class="headerlink" title="安装 iptables-persistent"></a>安装 iptables-persistent</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install iptables-persistent</div></pre></td></tr></table></figure>
<h2 id="添加-80-端口跳转到-8080-规则"><a href="#添加-80-端口跳转到-8080-规则" class="headerlink" title="添加 80 端口跳转到 8080 规则"></a>添加 80 端口跳转到 8080 规则</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080</div></pre></td></tr></table></figure>
<h2 id="保存跳转规则"><a href="#保存跳转规则" class="headerlink" title="保存跳转规则"></a>保存跳转规则</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iptables-save</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Tomcat </tag>
            
            <tag> iptables </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一次奇怪的debug]]></title>
      <url>/2017/12/31/%E4%B8%80%E6%AC%A1%E5%A5%87%E6%80%AA%E7%9A%84debug/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第一次在服务器Tomcat上用war包部署项目，但是在部署新的war包时出现了一个奇怪的bug，访问页面时，第一次打开会显示404页面，然后按F5刷新则会显示正常页面。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>最初先清除了浏览器缓存，重新访问，并没有解决。</p>
<p>然后尝试了重新部署，仍没有解决问题。</p>
<p>ps:我部署的方式极其简单粗暴</p>
<ul>
<li><p>idea导出war包，用xshell传到服务器</p>
</li>
<li><p>stop Tomcat</p>
</li>
<li><p>删除Tomcat的webapps目录下之前的war包和文件夹</p>
</li>
<li><p>将war包拷贝到webapps目录下</p>
</li>
<li><p>start Tomcat</p>
</li>
</ul>
<p>后来查到一个办法，删除tomcat中work/Catalina目录下项目同名文件</p>
<p>不过我在目录下没找到同名文件，只有一个localhost（可能是我server.xml文件配置问题？）文件夹，删除之后，再访问，正常显示。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tomcat </tag>
            
            <tag> war部署 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown 简单语法]]></title>
      <url>/2017/12/30/Markdown%20%E7%AE%80%E5%8D%95%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>Markdown是一种极简的『标记语言』，将文本转为HTML，本文介绍Markdown基本语法，内容很少，一行语法一行示例。</p>
<h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>星号与下划线都可以，单是斜体，双是粗体，符号可跨行，符号可加空格</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="strong">**一个人来到田纳西**</span></div><div class="line"><span class="strong">__毫无疑问__</span></div><div class="line">*我做的馅饼</div><div class="line">是全天下*</div><div class="line"><span class="emphasis">_最好吃的_</span></div></pre></td></tr></table></figure>
<p><strong>一个人来到田纳西</strong></p>
<p><strong>毫无疑问</strong></p>
<p><em>我做的馅饼<br>是全天下</em></p>
<p><em>最好吃的</em></p>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>三个或更多-_*，必须单独一行，可含空格</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="emphasis">___</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>翻译成html就是<code>&lt;blockquote&gt;&lt;/blockquote&gt;</code>，符号后的空格可不要</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;引用</div></pre></td></tr></table></figure>
<blockquote>
<p>引用</p>
</blockquote>
<p>内层符号前的空格必须要</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;引用</div><div class="line"> &gt;&gt;引用</div></pre></td></tr></table></figure>
<blockquote>
<p>引用</p>
<blockquote>
<p>引用</p>
</blockquote>
</blockquote>
<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p> 符号之后的空格不能少，-+*效果一样，但不能混合使用，因混合是嵌套列表，内容可超长</p>
 <figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">- </span>无序列表</div><div class="line"><span class="bullet">- </span>无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！</div></pre></td></tr></table></figure>
<ul>
<li>无序列表</li>
<li>无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！</li>
</ul>
<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>数字不能省略但可无序，点号之后的空格不能少</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1. </span>有序列表</div><div class="line"><span class="bullet">2. </span>有序列表</div><div class="line"><span class="bullet">3. </span>有序列表</div><div class="line"><span class="bullet">8. </span>有序列表</div></pre></td></tr></table></figure>
<ol>
<li>有序列表</li>
<li>有序列表</li>
<li>有序列表</li>
<li>有序列表</li>
</ol>
<h2 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h2><p>-+*可循环使用，但符号之后的空格不能少，符号之前的空格至少为两个</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">- </span>嵌套列表</div><div class="line">  + 嵌套列表</div><div class="line">  + 嵌套列表</div><div class="line"><span class="code">    - 嵌套列表</span></div><div class="line"><span class="code">      * 嵌套列表</span></div><div class="line"><span class="bullet">- </span>嵌套列表</div></pre></td></tr></table></figure>
<ul>
<li>嵌套列表<ul>
<li>嵌套列表</li>
<li>嵌套列表<ul>
<li>嵌套列表<ul>
<li>嵌套列表</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>嵌套列表</li>
</ul>
<h2 id="文字超链：Inline方式"><a href="#文字超链：Inline方式" class="headerlink" title="文字超链：Inline方式"></a>文字超链：Inline方式</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">百度</span>](<span class="link">http://www.baidu.com "百度"</span>)</div></pre></td></tr></table></figure>
<p><a href="http://www.baidu.com" title="百度" target="_blank" rel="external">百度</a></p>
<h2 id="图片超链"><a href="#图片超链" class="headerlink" title="图片超链"></a>图片超链</h2><p>多个感叹号，Tooltips可省略，要设置大小只能借助HTML标记</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="string">GitHub Mark</span>](<span class="link">http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png "GitHub Mark"</span>)</div></pre></td></tr></table></figure>
<p><img src="http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png" alt="GitHub Mark" title="GitHub Mark"></p>
<h2 id="索引超链：Reference方式"><a href="#索引超链：Reference方式" class="headerlink" title="索引超链：Reference方式"></a>索引超链：Reference方式</h2><p>索引，[]内可以是任意字符</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">![<span class="string">GitHub Octocat</span>][<span class="symbol">1</span>]</div><div class="line"></div><div class="line">[<span class="symbol">1</span>]:<span class="link">http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png</span></div></pre></td></tr></table></figure>
<p><img src="http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png" alt="GitHub Octocat"></p>
<h2 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">http:</span>//<span class="attr">baidu.com</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p><a href="http://baidu.com" target="_blank" rel="external">http://baidu.com</a></p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!-- 注释 --&gt;</span></span></div></pre></td></tr></table></figure>
<!-- 注释 -->
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>文本中可直接用html标签，但是要前后加上空行。</p>
]]></content>
      
        <categories>
            
            <category> Markdown </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 常用命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu下常用指令]]></title>
      <url>/2017/12/30/Ubuntu%E4%B8%8B%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近租了个服务器，用的是ubuntu17.04版本系统，所以搜集了一部分常用的指令，方便以后查阅。</p>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h4><p>–help简单的帮助</p>
<p>help command 详细的帮助</p>
<p>man command 最详细的帮助</p>
<h4 id="ls-命令（显示当前目录文件）"><a href="#ls-命令（显示当前目录文件）" class="headerlink" title="ls 命令（显示当前目录文件）"></a>ls 命令（显示当前目录文件）</h4><p>-a 显示全部文件与文件夹，包括隐藏的文件或文件夹</p>
<p>-l 显示详细的文件信息，包括权限，用户，用户组等</p>
<p>-h  将文件大小以方便阅读的形式表示出来，配合-l参数使用，常有奇效</p>
<h4 id="cd-进入其他目录"><a href="#cd-进入其他目录" class="headerlink" title="cd 进入其他目录"></a>cd 进入其他目录</h4><p>cd /etc/  从绝对路径进入etc文件夹</p>
<p>cd etc/  从当前目录进入etc文件夹</p>
<p>cd ..  返回当前目录的上一级目录</p>
<p>cd -  返回上一次所在的目录</p>
<p>cd 或 cd ~  返回属主目录</p>
<h4 id="tab键-命令补全"><a href="#tab键-命令补全" class="headerlink" title="tab键 命令补全"></a>tab键 命令补全</h4><p>tab键常用于在你输入了命令的前几个单词时，按下tab键进行补全，如果有多个前面部分相同的命令，则按两次tab键</p>
<h4 id="alias-别名"><a href="#alias-别名" class="headerlink" title="alias 别名"></a>alias 别名</h4><p>alias ubuntu=”ls” 用于为一个命令取别名，当你输入ubuntu时等价输入了ls命令</p>
<h4 id="apt-get-下载"><a href="#apt-get-下载" class="headerlink" title="apt-get 下载"></a>apt-get 下载</h4><p>最常用的指令，用于从软件源获取需要的软件</p>
<p>常用参数：</p>
<p>update  与你的软件源（在/etc/apt/sources.list中列出）更新软件包列表，换源后需要执行</p>
<p>upgrade  根据update得到的源软件库与本地已经安装的对比，如果需要升级就全部升级</p>
<p>install  安装软件包，可以使用tab键补全软件包的名字</p>
<p>remove  卸载软件包</p>
<p>purge  卸载软件包，同时删除该软件的配置文件</p>
<p>source  从源里下载软件包的源码到当前目录并解压（除非指定-download-only参数）</p>
<p>check  用来（自动）修复已安装软件包之间的依赖关系</p>
<p>clean  清除/var/cache/apt/archives/包括其子目录partial/下的所有软件包缓存</p>
<p>autoclean  删除旧版本的软件包缓存</p>
<p>download  下载软件包的二进制包到当前目录</p>
<h4 id="more、less-分页显示文本文件内容"><a href="#more、less-分页显示文本文件内容" class="headerlink" title="more、less  分页显示文本文件内容"></a>more、less  分页显示文本文件内容</h4><h4 id="head、tail-显示文件头、尾内容"><a href="#head、tail-显示文件头、尾内容" class="headerlink" title="head、tail    显示文件头、尾内容"></a>head、tail    显示文件头、尾内容</h4><h4 id="管道符-连接多个命令"><a href="#管道符-连接多个命令" class="headerlink" title="|  管道符 连接多个命令"></a>|  管道符 连接多个命令</h4><p>将一个命令的标准输出作为另一个命令的标准输入。也就是把几个命令组合起来使用，后一个命令除以前一个命令的结果。</p>
<p>例：grep -r “close” /home/* | more       在home目录下所有文件中查找，包括close的文件，并分页输出。</p>
<h4 id="grep-字符串-在文本文件中查找某个字符串"><a href="#grep-字符串-在文本文件中查找某个字符串" class="headerlink" title="grep 字符串  在文本文件中查找某个字符串"></a>grep 字符串  在文本文件中查找某个字符串</h4><h4 id="sudo-管理员权限"><a href="#sudo-管理员权限" class="headerlink" title="sudo 管理员权限"></a>sudo 管理员权限</h4><p>sudo  我们主要用来临时提升权限，主要用以管理员(超级用户)的权限来运行命令，当需要修改当前登录用户力所不能及的文件/目录时需要用sudo</p>
<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="find-起始目录-name-查找的文件或目录"><a href="#find-起始目录-name-查找的文件或目录" class="headerlink" title="find 起始目录 -name 查找的文件或目录"></a>find 起始目录 -name 查找的文件或目录</h4><h4 id="mkdir-目录名-创建一个目录"><a href="#mkdir-目录名-创建一个目录" class="headerlink" title="mkdir 目录名  创建一个目录"></a>mkdir 目录名  创建一个目录</h4><p>-p  如果给出的路径中父目录不存在,则同时创建父目录</p>
<h4 id="touch-文件名-创建一个或多个文件"><a href="#touch-文件名-创建一个或多个文件" class="headerlink" title="touch 文件名 ..  创建一个或多个文件"></a>touch 文件名 ..  创建一个或多个文件</h4><h4 id="rmdir-空目录名-删除一个空目录"><a href="#rmdir-空目录名-删除一个空目录" class="headerlink" title="rmdir 空目录名  删除一个空目录"></a>rmdir 空目录名  删除一个空目录</h4><p>等同 rm -f</p>
<h4 id="rm-文件名-删除一个或多个文件"><a href="#rm-文件名-删除一个或多个文件" class="headerlink" title="rm 文件名 ..  删除一个或多个文件"></a>rm 文件名 ..  删除一个或多个文件</h4><p>最常用参数:</p>
<p>-f  不提示不存在的文件,直接跳过</p>
<p>-i  每个删除动作都提示</p>
<p>-I  删除多个文件(多于3个时)或者递归式删除(对于非空目录)提示一次</p>
<p>-r和-R  递归式删除该目录下的一切东东</p>
<p>-v  显示每个文件的删除动作(个人总是推荐使用此参数,明白你在做什么)</p>
<p><strong>注意：慎用</strong></p>
<p>rm -rf 非空目录名  删除一个非空目录下的一切</p>
<h4 id="mv-源文件或目录-目标文件或目录"><a href="#mv-源文件或目录-目标文件或目录" class="headerlink" title="mv 源文件或目录 目标文件或目录"></a>mv 源文件或目录 目标文件或目录</h4><p>根据mv命令中的第二个参数类型（是目标文件还是目标目录），mv命令将文件重命名或将其移至一个新的目录中。当第二个参数类型是文件时，mv命令完成文件重命名，此时，源文件只能有一个（也可以是源目录名），它将所给的源文件或目录重命名为给定的目标文件名。当第二个参数是已存在的目录名称时，源文件或目录参数可以有多个，mv命令将各参数指定的源文件均移至目标目录中。</p>
<p><strong>最常用参数:</strong></p>
<p>-b  为每个已经存在的目的文件做个备份(防止覆盖)</p>
<p>-f  不提示是否覆盖已经存在的目的文件</p>
<p>-i  与-f参数相反</p>
<p>-u  仅当源文件比目的文件更新或者目的文件不存在时候才移动</p>
<p>-v  显示移动文件的进度(个人总是推荐使用此参数,明白你在做什么)</p>
<h4 id="cat-文件名"><a href="#cat-文件名" class="headerlink" title="cat 文件名 .."></a>cat 文件名 ..</h4><p>把(一个或多个)文件内容(连接)显示到标准输出，当文本文件很小，而且你只是想看下，并不打算用gedit或者vim之类编辑器编辑的时候，可以使用。</p>
<h4 id="find-路经-name"><a href="#find-路经-name" class="headerlink" title="find 路经 -name"></a>find 路经 -name</h4><p>“字符串”查找路经所在范围内满足字符串匹配的文件和目录</p>
<p><strong>最常用参数:</strong></p>
<p>-v  列出当前正在执行的步骤</p>
<p>-R  递归式,即改变非空目录下的一切为指定权限</p>
<h4 id="cp-文件名或目录名-拷贝文件或目录"><a href="#cp-文件名或目录名-拷贝文件或目录" class="headerlink" title="cp 文件名或目录名  拷贝文件或目录"></a>cp 文件名或目录名  拷贝文件或目录</h4><p><strong>最常用参数：</strong></p>
<p>-b  为每个已经存在的目的文件作个备份</p>
<p>-d  遇到软链接时不拷贝软链接所指向的文件;拷贝时保留links属性(链接数)</p>
<p>-p  保留文件的访问权限,所有者,和时间戳</p>
<p>-R和-r  递归式拷贝(cp过程遇到非空目录才有效),即拷贝目录,子目录,子目录的子目录…..</p>
<p>-a  作用同-dpR</p>
<p>-s  并不真的做拷贝,而只是为每个文件作软链接(符号链接)</p>
<p>-u  仅当源文件比目的文件更新或者目的文件不存在时候才拷贝</p>
<h4 id="ln-源文件或目录-目标文件或目录-为文件建立连接"><a href="#ln-源文件或目录-目标文件或目录-为文件建立连接" class="headerlink" title="ln 源文件或目录 目标文件或目录  为文件建立连接"></a>ln 源文件或目录 目标文件或目录  为文件建立连接</h4><p>linux的链接分为两种:硬链接和软链接，ln默认建立硬链接，硬链接的意思是一个档案可以有多个名称，而软链接的方式则是产生一个特殊的档案，该档案的内容是指向另一个档案的位置。硬链接是存在同一个文件系统中，而软链接却可以跨越不同的文件系统</p>
<p><strong>注意：</strong></p>
<p>ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化</p>
<p><strong>最常用参数:</strong></p>
<p>-s  建立软链接(符号链接,可以理解为win下的快捷方式)</p>
<p>-f  如果要建立的链接名已经存在,则删除之</p>
<p>-b  删除，覆盖以前建立的链接</p>
<p>-v 显示详细的处理过程</p>
<h4 id="tar-打包与解包"><a href="#tar-打包与解包" class="headerlink" title="tar 打包与解包"></a>tar 打包与解包</h4><p>和ps命令一样,tar一般不用单个参数,而是多个参数的组合,记住参数x是解压(extract),c是创建包(create)即可</p>
<p><strong>最常用参数:</strong></p>
<p>-xvf  详细列出解包的步骤</p>
<p>-cvf  详细列出打包的步骤</p>
<p>-j  用来说明这是个tar.bz2包,例如tar -xjvf myfile.tar.bz2</p>
<p>-t  列出包中的文件列表</p>
<p><strong>打包时常追加的参数:</strong></p>
<p>-r  追加到压缩包中</p>
<p>-u  只把比包中更新的文件追加进去</p>
<p>-h  不把符号链接添加到包中,而是添加此符号链接指向的文件</p>
<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><h4 id="etc-passwd-存储用户账号"><a href="#etc-passwd-存储用户账号" class="headerlink" title="/etc/passwd  存储用户账号"></a>/etc/passwd  存储用户账号</h4><h4 id="etc-group-存储组账号"><a href="#etc-group-存储组账号" class="headerlink" title="/etc/group  存储组账号"></a>/etc/group  存储组账号</h4><h4 id="etc-shadow-存储用户账号的密码"><a href="#etc-shadow-存储用户账号的密码" class="headerlink" title="/etc/shadow  存储用户账号的密码"></a>/etc/shadow  存储用户账号的密码</h4><h4 id="etc-gshadow-存储用户组账号的密码"><a href="#etc-gshadow-存储用户组账号的密码" class="headerlink" title="/etc/gshadow  存储用户组账号的密码"></a>/etc/gshadow  存储用户组账号的密码</h4><h4 id="etc-profile-系统环境变量"><a href="#etc-profile-系统环境变量" class="headerlink" title="/etc/profile  系统环境变量"></a>/etc/profile  系统环境变量</h4><h4 id="bash-profile-用户环境变量"><a href="#bash-profile-用户环境变量" class="headerlink" title="bash_profile  用户环境变量"></a>bash_profile  用户环境变量</h4><h4 id="bashrc-用户环境变量"><a href="#bashrc-用户环境变量" class="headerlink" title=".bashrc  用户环境变量"></a>.bashrc  用户环境变量</h4><h4 id="su-user-切换用户，加载配置文件-bashrc"><a href="#su-user-切换用户，加载配置文件-bashrc" class="headerlink" title="su user  切换用户，加载配置文件.bashrc"></a>su user  切换用户，加载配置文件.bashrc</h4><h4 id="su-user-切换用户，加载配置文件-etc-profile-，加载bash-profile"><a href="#su-user-切换用户，加载配置文件-etc-profile-，加载bash-profile" class="headerlink" title="su - user  切换用户，加载配置文件/etc/profile ，加载bash_profile"></a>su - user  切换用户，加载配置文件/etc/profile ，加载bash_profile</h4><h4 id="useradd-创建一个新的用户"><a href="#useradd-创建一个新的用户" class="headerlink" title="useradd  创建一个新的用户"></a>useradd  创建一个新的用户</h4><h4 id="groupadd-组名-创建一个新的组"><a href="#groupadd-组名-创建一个新的组" class="headerlink" title="groupadd 组名  创建一个新的组"></a>groupadd 组名  创建一个新的组</h4><h4 id="passwd-用户名-为用户创建密码"><a href="#passwd-用户名-为用户创建密码" class="headerlink" title="passwd 用户名 为用户创建密码"></a>passwd 用户名 为用户创建密码</h4><p><strong>最常用参数：</strong></p>
<p>-d 用户名  删除用户密码也能登陆</p>
<p>-S 用户名  查询用户状态</p>
<h4 id="usermod-l-新用户名-老用户名-为用户改名"><a href="#usermod-l-新用户名-老用户名-为用户改名" class="headerlink" title="usermod -l 新用户名 老用户名  为用户改名"></a>usermod -l 新用户名 老用户名  为用户改名</h4><h4 id="userdel-–r-用户名-删除用户一切"><a href="#userdel-–r-用户名-删除用户一切" class="headerlink" title="userdel –r 用户名  删除用户一切"></a>userdel –r 用户名  删除用户一切</h4><h4 id="chown-R-owner-group-File-Directory-更改文件的用户及用户组"><a href="#chown-R-owner-group-File-Directory-更改文件的用户及用户组" class="headerlink" title="chown [-R] owner[:group] {File|Directory} 更改文件的用户及用户组"></a>chown [-R] owner[:group] {File|Directory} 更改文件的用户及用户组</h4><p>chown root:root filename</p>
<p>如果需要将某一目录下的所有文件都改变其拥有者，可以使用-R参数</p>
<h4 id="chgrp-group-File-Directory-更改文件所属组群"><a href="#chgrp-group-File-Directory-更改文件所属组群" class="headerlink" title="chgrp [group] {File|Directory} 更改文件所属组群"></a>chgrp [group] {File|Directory} 更改文件所属组群</h4><p>chgrp root filename</p>
<p>chgrp </p>
<h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><p>三种基本权限</p>
<p>R 读 数值表示为4</p>
<p>W 写 数值表示为2</p>
<p>X 可执行 数值表示为1</p>
<p>例如：</p>
<p>-rw-rw-r–一共十个字符，分成四段。</p>
<p>第一个字符“-”表示普通文件；这个位置还可能会出现“l”链接；“d”表示目录</p>
<p>第二三四个字符“rw-”表示当前所属用户的权限，所以用数值表示为4+2=6</p>
<p>第五六七个字符“rw-”表示当前所属组的权限，所以用数值表示为4+2=6</p>
<p>第八九十个字符“r–”表示其他用户权限，所以用数值表示为2</p>
<h4 id="更改权限"><a href="#更改权限" class="headerlink" title="更改权限"></a>更改权限</h4><p>sudo chmod [u所属用户  g所属组  o其他用户  a所有用户] [+增加权限  -减少权限] [r  w  x] 目录名 </p>
<p>例如：有一个文件filename，权限为“-rw-r—-x”，将权限值改为“-rwxrw-r-x”，用数值表示为765</p>
<p>sudo chmod u+x g+w o+r filename</p>
<p>上面的例子可以用数值表示</p>
<p>sudo chmod 765 filename</p>
<h3 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h3><h4 id="ps，top-列出当前命令的执行状态"><a href="#ps，top-列出当前命令的执行状态" class="headerlink" title="ps，top 列出当前命令的执行状态"></a>ps，top 列出当前命令的执行状态</h4><p>ps为静态，top为动态(top时’q’退出)</p>
<p><strong>最常用参数(ps多用参数集合,而不是单个参数,并且配合grep使用):</strong></p>
<p>-ef  以标准语法列出当前所有进程状态,例如ps -ef | grep eva  列出eva的进程状态</p>
<p>aux  以BSD语法列出</p>
<p>-ejH  列出进程树</p>
<p>-eLf  同时列出线程状态</p>
<h4 id="kill-进程号-PID-杀死一个进程"><a href="#kill-进程号-PID-杀死一个进程" class="headerlink" title="kill 进程号(PID)  杀死一个进程"></a>kill 进程号(PID)  杀死一个进程</h4><h4 id="kill-9-进程号-强制杀死一个进程"><a href="#kill-9-进程号-强制杀死一个进程" class="headerlink" title="kill -9 进程号  强制杀死一个进程"></a>kill -9 进程号  强制杀死一个进程</h4><h4 id="stat-显示指定文件的详细信息，比ls更详细"><a href="#stat-显示指定文件的详细信息，比ls更详细" class="headerlink" title="stat  显示指定文件的详细信息，比ls更详细"></a>stat  显示指定文件的详细信息，比ls更详细</h4><h4 id="who-显示在线登陆用户"><a href="#who-显示在线登陆用户" class="headerlink" title="who  显示在线登陆用户"></a>who  显示在线登陆用户</h4><h4 id="whoami-显示当前操作用户"><a href="#whoami-显示当前操作用户" class="headerlink" title="whoami  显示当前操作用户"></a>whoami  显示当前操作用户</h4><h4 id="hostname-显示主机名"><a href="#hostname-显示主机名" class="headerlink" title="hostname  显示主机名"></a>hostname  显示主机名</h4><h4 id="uname-显示系统信息"><a href="#uname-显示系统信息" class="headerlink" title="uname  显示系统信息"></a>uname  显示系统信息</h4><h4 id="du-查看目录大小-du-h-home带有单位显示目录信息"><a href="#du-查看目录大小-du-h-home带有单位显示目录信息" class="headerlink" title="du  查看目录大小 du -h /home带有单位显示目录信息"></a>du  查看目录大小 du -h /home带有单位显示目录信息</h4><h4 id="df-查看磁盘大小-df-h-带有单位显示磁盘信息"><a href="#df-查看磁盘大小-df-h-带有单位显示磁盘信息" class="headerlink" title="df  查看磁盘大小 df -h 带有单位显示磁盘信息"></a>df  查看磁盘大小 df -h 带有单位显示磁盘信息</h4><h4 id="ifconfig-查看网络情况"><a href="#ifconfig-查看网络情况" class="headerlink" title="ifconfig  查看网络情况"></a>ifconfig  查看网络情况</h4><h4 id="ping-测试网络连通"><a href="#ping-测试网络连通" class="headerlink" title="ping  测试网络连通"></a>ping  测试网络连通</h4><h4 id="netstat-显示网络状态信息"><a href="#netstat-显示网络状态信息" class="headerlink" title="netstat  显示网络状态信息"></a>netstat  显示网络状态信息</h4><p><strong>常用参数</strong></p>
<p>-a  (all)显示所有选项，默认不显示LISTEN相关</p>
<p>-t  (tcp)仅显示tcp相关选项</p>
<p>-u  (udp)仅显示udp相关选项</p>
<p>-n  拒绝显示别名，能显示数字的全部转化成数字。</p>
<p>-l  仅列出有在 Listen (监听) 的服務状态</p>
<p>-p  显示建立相关链接的程序名</p>
<p>-r  显示路由信息，路由表</p>
<p>-e  显示扩展信息，例如uid等</p>
<p>-s  按各个协议进行统计</p>
<p>-c  每隔一个固定时间，执行该netstat命令。</p>
<p><strong>注意：</strong></p>
<p>LISTEN和LISTENING的状态只有用-a或者-l才能看到</p>
<h4 id="man-功能很多，简单的可以查看命令帮助，如：man-ls"><a href="#man-功能很多，简单的可以查看命令帮助，如：man-ls" class="headerlink" title="man  功能很多，简单的可以查看命令帮助，如：man ls"></a>man  功能很多，简单的可以查看命令帮助，如：man ls</h4><h4 id="ufw-防火墙"><a href="#ufw-防火墙" class="headerlink" title="ufw  防火墙"></a>ufw  防火墙</h4><p>常用参数：</p>
<p>enable  启动防火墙</p>
<p>status  查看防火墙状态</p>
<p>allow 端口号或服务名  开放指定端口号</p>
<p>allow 22/tcp  只打开使用tcp/ip协议的22端口</p>
<p>disable  关闭防火墙</p>
<p>allow from 192.168.254.254  允许某特定IP</p>
<p>delete allow  删除已添加的规则</p>
<h4 id="clear-清屏"><a href="#clear-清屏" class="headerlink" title="clear  清屏"></a>clear  清屏</h4>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 常用命令 </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java 数据类型]]></title>
      <url>/2017/11/18/java%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>Java 的数据类型分为基本数据类型和引用数据类型。</p>
<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>基本数据类型有四类八种，分别是：</p>
<p><strong>byte</strong>：Java中最小的数据类型，在内存中占8位(bit)，即1个字节，取值范围-128~127，默认值0、</p>
<p><strong>short</strong>：短整型，在内存中占16位，即2个字节，取值范围-32768~32717，默认值0、</p>
<p><strong>int</strong>：整型，用于存储整数，在内在中占32位，即4个字节，取值范围-2147483648~2147483647，默认值0、</p>
<p><strong>long</strong>：长整型，在内存中占64位，即8个字节-2^63~2^63-1，默认值0L；</p>
<p><strong>float</strong>：浮点型，在内存中占32位，即4个字节，用于存储带小数点的数字（与double的区别在于float类型有效小数点只有6~7位），默认值0、</p>
<p><strong>double</strong>：双精度浮点型，用于存储带有小数点的数字，在内存中占64位，即8个字节，默认值0；</p>
<p><strong>boolean</strong>：布尔类型，占1个字节，用于判断真或假（仅有两个值，即true、false），默认值false；</p>
<p><strong>char</strong>：字符型，用于存储单个字符，占16位，即2个字节，取值范围0~65535，默认值为空。</p>
<p>这种类型通过如 <code>int a = 3</code> 的形式定义，称为自动变量。值得注意的是，自动变量存的是字面值，不是类的引用，这里的 a 是一个指向 int 类型的引用，指向3这个字面值。这些字面值大小可知，生存期可知，因此会保存在栈中。</p>
<p>另外，栈有一个很重要的特殊性，即数据可以共享。如果我们同时定义<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">3</span>; </div><div class="line"><span class="keyword">int</span> b = <span class="number">3</span>;</div></pre></td></tr></table></figure></p>
<p>编译器先处理 <code>int a = 3</code> ；会在栈中创建一个变量a的引用，然后查找有无字面值为3的地址，如果没有，则开辟一个存放3字面值的地址，然后将a指向3的地址。然后处理 <code>int b = 3</code> ；创建b的引用后，由于栈中已经有3的字面值，便将b直接指向3的地址。因此，a与b同时指向3。</p>
<p>但是要注意，通过引用修改字面值不会导致另一个指向此字面值的引用的值改变，在字面值被修改时，编译器会重新搜索栈中是否存在被修改后的字面值，如果不存在，则开辟一片空间存放新字面值的地址，如果存在，则直接将引用指向这个地址。</p>
<h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><p>除基本数据类型之外的数据类型都是引用数据类型，其中 String 类是特殊的引用数据类型，这些类型的数据全部存放在堆中，Java 通过 new 关键字来显式告诉编译器，在运行时根据需要动态创建，比较灵活，但是会占用更多的时间。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object o = <span class="keyword">new</span> Object();</div></pre></td></tr></table></figure>
<p>引用数据类型（除String）在创建时可以同时创建一个引用变量，该变量是基本数据类型，存储在栈中，指向引用数据类型在堆中的地址。如果通过一个引用变量修改引用数据类型，则其他指向这个对象的引用也会即刻反映出这些改变。</p>
<p>在方法中，调用时传入的实际参数，如果是基本数据类型，则会传入字面值，而如果是引用数据类型，则传入的是该对象的地址。因此，在被调用方法中对引用数据类型进行操作，调用方法中的引用变量所对应的该对象也会相应变化。</p>
<h2 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a>String 类</h2><p>String 类是一种特殊的引用数据类型。可以使用 <code>String str = new String(&quot;asd&quot;);</code> 的方式来创建，也可以使用 <code>String str = &quot;asd&quot;;</code> 的方式来创建。一个字符串对象创建后他的值不能改变，如果改变字符串的值，编译器将会创建一个新的字符串对象，然后把地址指向新地址。</p>
<p>常量池(constant pool)指的是在编译期被确定，并被保存在已编译的.class文件中的一些数据。它包括了关于类、方法、接口等中的常量，也包括字符串常量。因此，对于 <code>String str = &quot;asd&quot;;</code> ，将会保存在常量池中。而对于 <code>String str = new String(&quot;asd&quot;);</code> ，编译器将会创建一个字符串对象，并把 str指向该地址。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String s1 = <span class="string">""</span>;</div><div class="line">String s2 = <span class="keyword">new</span> String(<span class="string">""</span>);</div><div class="line"></div><div class="line">System.out.println(s1);</div><div class="line">System.out.println(s2);</div></pre></td></tr></table></figure>
<p>将会打印</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">null</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">String s0 = <span class="string">"asdf"</span>; </div><div class="line">String s1 = <span class="string">"asdf"</span>; </div><div class="line">String s2 = <span class="string">"as"</span> + <span class="string">"df"</span>; </div><div class="line"></div><div class="line">System.out.println(s0 == s1); </div><div class="line">System.out.println(s0 == s2);</div></pre></td></tr></table></figure>
<p>将会打印</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">true</div><div class="line">true</div></pre></td></tr></table></figure>
<p>因为这些字符串在编译时就被确定了，其中 <code>String s2 = &quot;as&quot; + &quot;df&quot;;</code> 由多个字符串常量连接而成，因此在编译时就被解析为一个字符串常量，因此结果为true。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">String s0 = <span class="string">"asdf"</span>;</div><div class="line">String s1 = <span class="keyword">new</span> String(<span class="string">"asdf"</span>);</div><div class="line">String s2 = <span class="string">"as"</span> + <span class="keyword">new</span> String(<span class="string">"df"</span>);</div><div class="line"></div><div class="line">System.out.println(s0 == s1);</div><div class="line">System.out.println(s0 == s2);</div><div class="line">System.out.println(s1 == s2);</div></pre></td></tr></table></figure>
<p>结果为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">false </div><div class="line">false </div><div class="line">false</div></pre></td></tr></table></figure></p>
<p>其中 s0 是在编译时常量池中的引用， s1 是在运行时创建的对象， s2 因为在编译时无法确定 new String(“df”)，所以也是在运行时创建的对象，其地址与 s1 不同。因此结果为false。</p>
<p>如果想要比较字符串之间的值，则应该使用 equals() 方法。</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java 堆和栈]]></title>
      <url>/2017/11/17/java%20%E5%A0%86%E5%92%8C%E6%A0%88/</url>
      <content type="html"><![CDATA[<p>栈和堆在 Java 中是用来在内存中存放数据的地方，与 C/C++ 不同， Java 自动管理栈和堆。</p>
<p>栈的存取速度比堆要快，仅次于直接位于 CPU 中的寄存器。但是，存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。堆可以动态的分配内存大小，生存期也可以不先告诉编译器，但是存取速度较慢。</p>
<h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>Java 的内存分为两种，堆内存和栈内存。</p>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>栈内存用于存放一些基本类型的变量和对象的引用变量。当在一段代码块中定义一个变量时， Java 就在栈中为这个变量分配内存空间，当超过变量的作用域后，Java 会自动释放掉为该变量分配的内存空间，该内存空间可以立刻被另作他用。</p>
<p>堆内存用于存放由 new 创建的对象和数组。在堆中分配的内存，由 Java 虚拟机自动垃圾回收器来管理。在堆中产生了一个数组或者对象后，还可以在栈中定义一个特殊的变量，这个变量的取值等于数组或者对象在堆内存中的首地址，在栈中的这个特殊的变量就变成了数组或者对象的引用变量，以后就可以在程序中使用栈内存中的引用变量来访问堆中的数组或者对象，引用变量相当于为数组或者对象起的一个别名，或者代号，是一个普通变量，在栈中分配内存，当程序运行到作用域外时释放。</p>
<p>数组和对象本身在堆中分配，在程序运行到使用 new 产生数组或对象的语句所在代码块之外，所占用的内存也不会释放。数组和对象在没有引用变量指向它的时候，将会变成垃圾，不能再被使用，但是仍然占着内存，在随后的一个不确定的时间由垃圾回收器释放。这是 Java 占内存的主要原因。</p>
<p>栈中的变量指向堆中的变量，可以看作是 Java 的指针。</p>
<h2 id="分配策略"><a href="#分配策略" class="headerlink" title="分配策略"></a>分配策略</h2><p>按照编译原理观点，程序运行时的内存分配有三种策略：静态、栈式、堆式。</p>
<p>静态储存分配指在编译时就能确定每个数据目标在运行时刻的储存空间需求，因此在编译时就可以给他们分配固定的内存空间，这种分配策略要求程序代码中不能有可变数据结构，也不允许有嵌套或者递归的结构出现，因为他们会导致编译程序无法准确计算储存空间需求。</p>
<p>栈式存储分配也可称为动态存储分配，是由一个类似于堆栈的运行栈来实现的。和静态存储分配相反，在栈式存储方案中，程序对数据区的需求在编译时是完全未知的，只有到运行的时候才能够知道，但是规定在运行中进入一个程序模块时，必须知道该程序模块所需的数据区大小才能够为其分配内存.和我们在数据结构所熟知的栈一样，栈式存储分配按照先进后出的原则进行分配。 </p>
<p>栈式储存分配要求在过程的入口处必须知道所有的存储需求，而堆式分配则专门负责在编译时或运行时模块入口处都无法确定储存需求的数据结构的内存分配，比如：可变长度串和对象实例，堆由大片的可利用块或空闲块组成，堆中的内存可以按照任意顺序分配和释放。</p>
<h3 id="区别-1"><a href="#区别-1" class="headerlink" title="区别"></a>区别</h3><p>从栈和堆的功能和作用来通俗的比较，堆主要用来存放对象，栈主要用来执行程序。这种不同主要是由于堆和栈的特点决定的：</p>
<p>在 Java 中，所有的方法调用都是通过栈来进行的，所有的局部变量，形式参数都是从栈中分配内存空间。实际上也不是什么分配，只是从栈顶向上用就行。需要注意的是，在分配的时候，比如为一个即将要调用的程序模块分配数据区时，应事先知道这个数据区的大小，也就说是虽然分配是在程序运行时进行的，但是分配的大小多少是确定的，不变的，而这个“大小多少”是在编译时确定的，不是在运行时。 </p>
<p>堆是应用程序在运行的时候请求操作系统分配给自己内存，由于从操作系统管理的内存分配，所以在分配和销毁时都要占用时间，因此用堆的效率非常低。但是堆的优点在于，编译器不必知道要从堆里分配多少存储空间，也不必知道存储的数据要在堆里停留多长的时间，因此，用堆保存数据时会得到更大的灵活性。事实上，面向对象的多态性，堆内存分配是必不可少的，因为多态变量所需的存储空间只有在运行时创建了对象之后才能确定。</p>
<h2 id="JVM-中的堆和栈"><a href="#JVM-中的堆和栈" class="headerlink" title="JVM 中的堆和栈"></a>JVM 中的堆和栈</h2><p>JVM 是基于栈的虚拟机。 JVM 为每个新创建的线程都分配一个栈.也就是说，对于一个Java程序来说，它的运行就是通过对堆栈的操作来完成的。堆栈以帧为单位保存线程的状态。JVM对堆栈只进行两种操作：以帧为单位的压栈和出栈操作。 </p>
<p>我们知道，某个线程正在执行的方法称为此线程的当前方法，当前方法使用的帧称为当前帧。当线程激活一个 Java 方法， JVM 就会在线程的 Java 堆栈里新压入一个帧，这个帧自然成为了当前帧。在此方法执行期间，这个帧将用来保存参数，局部变量，中间计算过程和其他数据，这个帧在这里和编译原理中的活动纪录的概念是差不多的。</p>
<p>从 Java 的这种分配机制来看，栈又可以这样理解：栈是 JVM 在建立某个进程时或者线程为这个线程建立的存储区域，该区域具有先进后出的特性。</p>
<p>每一个 Java 应用都唯一对应一个 JVM 实例，每一个实例唯一对应一个堆。应用程序在运行中所创建的所有类实例或数组都放在这个堆中，并由应用所有的线程共享。</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gradle 项目中文乱码的解决]]></title>
      <url>/2017/09/27/Gradle%20%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近使用 Gradle 构建项目，项目里需要自定义异常，结果发现异常信息乱码。百度了一堆教程也没解决，最后查看 class 文件发现是编译过程中造成的乱码。</p>
<p>在官方文档中发现， Gradle 会根据操作系统选择编码，Windows 中文操作系统的默认编码是GBK，而项目使用的编码格式是UTF-8，最终 Gradle 将UTF-8编码识别为GBK编码，导致了乱码问题。</p>
<a id="more"></a>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>在 <code>build.gradle</code> 文件中添加</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tasks.withType(JavaCompile) &#123;  </div><div class="line">    options.encoding = <span class="string">"UTF-8"</span>  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样 Gradle 会将文件识别为UTF-8编码。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>上面的解决办法需要每个项目都插入一段，有点麻烦，不过还是有其他更简便的办法。就是在 Windows 下新建 <code>GRADLE_OPTS</code> 环境变量，值为 <code>-Dfile.encoding=utf-8</code>。这样在终端中使用的 Gradle 命令便可以识别UTF-8编码格式。</p>
<p>如果是 IDE 进行 Gradle 操作，那么还需要设置IDE的参数。因为我使用的是 idea，这里只介绍 idea 的解决办法。打开 <code>File-&gt;Settings-&gt;Build,Execution,Deployment-&gt;Build Tools-&gt;Gradle</code>，在 <code>Gradle Vm Options</code> 中添加 <code>-Dfile.encoding=utf-8</code>。</p>
]]></content>
      
        <categories>
            
            <category> Gradle </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gradle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[idea 常用快捷键及插件]]></title>
      <url>/2017/09/27/idea%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8A%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>记录下 idea 常用的快捷键，便于以后使用。</p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h3><p>常用的有fori/sout/psvm+Tab即可生成循环、System.out、main方法等boilerplate样板代码</p>
<a id="more"></a>
<p>要输入for(User user : users)只需输入user.for+Tab</p>
<p>要输入Date birthday = user.getBirthday();只需输入user.getBirthday().var+Tab即可。代码标签输入完成后，按Tab，生成代码</p>
<p>Ctrl+Alt+O 优化导入的类和包</p>
<p>Alt+Insert 生成代码(如get,set方法,构造函数等)或者右键（Generate） </p>
<p>fori/sout/psvm + Tab  </p>
<p>Ctrl+Alt+T  生成try catch  或者 Alt+Enter </p>
<p>Ctrl + O 重写方法  </p>
<p>Ctrl + I 实现方法 </p>
<p>Ctrl+Shift+U 大小写转化  </p>
<p>Alt+回车    导入包,自动修正 </p>
<p>Ctrl+J      自动代码  </p>
<p>Ctrl+Shift+J，整合两行为一行 </p>
<p>Ctrl+空格   代码提示  </p>
<p>Ctrl+Shift+SPACE 自动补全代码  </p>
<p>Ctrl+Alt+L  格式化代码  </p>
<p>Ctrl+Alt+I  自动缩进    </p>
<p>Ctrl+E      最近更改的代码</p>
<p>Ctrl+P   方法参数提示</p>
<p>Ctrl+Q   可以看到当前方法的声明</p>
<p>Shift+F6  重构-重命名 (包、类、方法、变量、甚至注释等) </p>
<p>Ctrl+Alt+V 提取变量 </p>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>Ctrl+Shift+Backspace    可以跳转到上次编辑的地 </p>
<p>Ctrl+Alt+left/right     前后导航编辑过的地方 </p>
<p>Alt+7   靠左窗口显示当前文件的结构 </p>
<p>Ctrl+F12    浮动显示当前文件的结构 </p>
<p>Alt+F7      找到你的函数或者变量或者类的所有引用到的地方 </p>
<p>Ctrl+Alt+F7     找到你的函数或者变量或者类的所有引用到的地方 </p>
<p>Ctrl+Shift+Alt+N    查找类中的方法或变量 </p>
<p>双击Shift 在项目的所有目录查找文件 </p>
<p>Ctrl+N   查找类 </p>
<p>Ctrl+Shift+N    查找文件 </p>
<p>Ctrl+G   定位行  </p>
<p>Ctrl+F   在当前窗口查找文本  </p>
<p>Ctrl+Shift+F    在指定窗口查找文本  </p>
<p>Ctrl+R   在当前窗口替换文本  </p>
<p>Ctrl+Shift+R  在指定窗口替换文本  </p>
<p>Alt+Shift+C  查找修改的文件  </p>
<p>Ctrl+E   最近打开的文件  </p>
<p>F3   向下查找关键字出现位置  </p>
<p>Shift+F3    向上一个关键字出现位置  </p>
<p>选中文本，按Alt+F3 ，高亮相同文本，F3逐个往下查找相同文本 </p>
<p>F4   查找变量来源  </p>
<p>Ctrl+Shift+O  弹出显示查找内容 </p>
<p>Ctrl+W 选中代码，连续按会有其他效果 </p>
<p>F2 或Shift+F2 高亮错误或警告快速定位 </p>
<p>Ctrl+Up/Down 光标跳转到第一行或最后一行下 </p>
<p>Ctrl+B 快速打开光标处的类或方法  </p>
<p>Ctrl+Alt+B  找所有的子类  </p>
<p>Ctrl+Shift+B  找变量的类  </p>
<p>Ctrl+Shift+上下键  上下移动代码 </p>
<p>Ctrl+Alt+ left/right 返回至上次浏览的位置 </p>
<p>Ctrl+X 删除行 </p>
<p>Ctrl+D 复制行 </p>
<p>Ctrl+/ 或 Ctrl+Shift+/  注释（// 或者/<em>…</em>/ ） </p>
<p>Ctrl+H 显示类结构图 </p>
<p>Ctrl+Q 显示注释文档 </p>
<p>Alt+F1 查找代码所在位置 </p>
<p>Alt+1 快速打开或隐藏工程面板 </p>
<p>Alt+ left/right 切换代码视图 </p>
<p>Alt+ ↑/↓  在方法间快速移动定位  </p>
<p>Alt+6    查找TODO</p>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>Alt+F8      debug时选中查看值 </p>
<p>Alt+Shift+F9    选择 Debug </p>
<p>Alt+Shift+F10   选择 Run </p>
<p>Ctrl+Shift+F9   编译 </p>
<p>Ctrl+Shift+F8   查看断点 </p>
<p>F7  步入 </p>
<p>Shift+F7    智能步入 </p>
<p>Alt+Shift+F7    强制步入 </p>
<p>F8  步过 </p>
<p>Shift+F8    步出 </p>
<p>Alt+Shift+F8    强制步过 </p>
<p>Alt+F9  运行至光标处 </p>
<p>Ctrl+Alt+F9    强制运行至光标处 </p>
<p>F9  恢复程序 </p>
<p>Alt+F10  定位到断点 </p>
<h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>Ctrl+Alt+Shift+T    弹出重构菜单 </p>
<p>Shift+F6    重命名 </p>
<p>F6  移动 </p>
<p>F5  复制 </p>
<p>Alt+Delete  安全删除 </p>
<p>Ctrl+Alt+N  内联 </p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>Shift+Enter 另起一行 </p>
<p>Ctrl+Z   倒退(撤销) </p>
<p>Ctrl+Shift+Z  向前(取消撤销) </p>
<p>Ctrl+Alt+F12  资源管理器打开文件夹  </p>
<p>Alt+F1   查找文件所在目录位置  </p>
<p>Shift+Alt+Insert 竖编辑模式  </p>
<p>Ctrl+F4  关闭当前窗口 </p>
<p>Ctrl+Alt+V  可以引入变量。例如：new String(); 自动导入变量定义 </p>
<p>Ctrl+~    快速切换方案（界面外观、代码风格、快捷键映射等菜单） </p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>插件的安装就不多介绍了，主要介绍下常用的插件</p>
<h3 id="Background-Image-Plus"><a href="#Background-Image-Plus" class="headerlink" title="Background Image Plus"></a>Background Image Plus</h3><p>个人很喜欢的一款插件，可以为idea添加背景，安装之后，在打开View选项，就可以看到Set Background Image选项了。 </p>
<h3 id="FindBugs"><a href="#FindBugs" class="headerlink" title="FindBugs"></a>FindBugs</h3><p>FindBugs很多人都并不陌生，Eclipse中有插件可以帮助查找代码中隐藏的bug，IDEA中也有这款插件。</p>
<h3 id="CheckStyle"><a href="#CheckStyle" class="headerlink" title="CheckStyle"></a>CheckStyle</h3><p>通过检查对代码编码格式，命名约定，Javadoc，类设计等方面进行代码规范和风格的检查，从而有效约束开发人员更好地遵循代码编写规范。</p>
<p>软件安装成功之后，首先要设置规则。可以通过Preferences—&gt;Other Settings —&gt;CheckStyles进行设置，可以直接将文件添加进来，然后就可以对具体的文件进行检查了。</p>
<h3 id="GsonFormat"><a href="#GsonFormat" class="headerlink" title="GsonFormat"></a>GsonFormat</h3><p>Java开发中，经常有把json格式的内容转成Object的需求，GsonFormat这款插件可以实现该功能。</p>
<h3 id="Jrebel"><a href="#Jrebel" class="headerlink" title="Jrebel"></a>Jrebel</h3><p>JRebel for IntelliJ是一款热部署插件。能够在开发过程中帮助开发者节约大量的部署等待时间，几乎所有的代码改动都不需要重启应用服务器，连Spring增加一个Bean都可以热部署。是一款收费插件，具体设置可以百度。</p>
<h3 id="AceJump"><a href="#AceJump" class="headerlink" title="AceJump"></a>AceJump</h3><p>AceJump其实是一款能够代替鼠标的软件，只要安装了这款插件，可以在代码中跳转到任意位置。按快捷键进入 AceJump 模式后（默认是 Ctrl+J），再按任一个字符，插件就会在屏幕中这个字符的所有出现位置都打上标签，你只要再按一下标签的字符，就能把光标移到该位置上。换言之，你要 移动光标时，眼睛一直看着目标位置就行了，根本不用管光标的当前位置。</p>
<h3 id="Key-promoter"><a href="#Key-promoter" class="headerlink" title="Key promoter"></a>Key promoter</h3><p>Key promoter这款插件适合新手使用。当你点击鼠标一个功能的时候，可以提示你这个功能快捷键是什么。</p>
]]></content>
      
        <categories>
            
            <category> 常用命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> idea </tag>
            
            <tag> 插件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo next主题添加背景]]></title>
      <url>/2017/09/17/hexo%20next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF/</url>
      <content type="html"><![CDATA[<p>之前使用hexo next主题时突然想添加背景，百度了一下但没有关于Mist主题的教程，于是自己摸索修改了一下，并在这里记录下来。</p>
<h2 id="添加背景"><a href="#添加背景" class="headerlink" title="添加背景"></a>添加背景</h2><p>首先，找到根路径下的 <code>themes/next/source/css/_custom/custom.styl</code> 文件，添加</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">  background : url(/images/你的背景图片名字) no-repeat;</div><div class="line">  //width : 100%; </div><div class="line">  //height : 100%; //设置容器占满屏幕</div><div class="line">  //background-size : 100% 100%; //设置图片占满容器</div><div class="line">  //background-attachment : fixed;  //设置图片不随页面移动</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>并将背景图片添加到 <code>themes/next/source/images</code> 文件夹里</p>
<p>这里建议使用宽图。</p>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="http://owek6x58j.bkt.clouddn.com/image1.png" alt=""></p>
<p>我们会发现导航栏显得不搭，这里在询问了朋友后的解决办法是透明化导航栏</p>
<h2 id="透明化header"><a href="#透明化header" class="headerlink" title="透明化header"></a>透明化header</h2><p>虚化导航栏有两种方式：</p>
<p>1.在 <code>themes/next/source/css/_common/components/header/header.styl</code> 文件中修改</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.header</span> &#123; <span class="attribute">background</span>: $head-bg; <span class="attribute">opacity</span>: <span class="number">0.7</span>&#125;</div></pre></td></tr></table></figure>
<p>我们发现导航栏会变成这样</p>
<p><img src="http://owek6x58j.bkt.clouddn.com/image2.png" alt=""></p>
<p>opacity 属性会将子容器也一并透明化，所以如果使用了next自带的搜索，将会失效无法使用</p>
<p>2.在 <code>themes/next/source/css/_schemes/Mist/_header.styl</code> 中修改</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.header</span> &#123; <span class="attribute">background</span>: <span class="built_in">rgba</span>(245, 245, 245, 0.6); &#125;</div></pre></td></tr></table></figure>
<p>效果为</p>
<p><img src="http://owek6x58j.bkt.clouddn.com/image3.png" alt=""></p>
<p>因为子容器都有 background 属性，所以子容器不会受到父容器透明化的影响，而搜索功能也能正常使用</p>
<h2 id="修改footer"><a href="#修改footer" class="headerlink" title="修改footer"></a>修改footer</h2><p>下拉博客会发现，footer 也因为设置了固定颜色而盖住了背景。</p>
<p>这个需要在 <code>themes/next/source/css/_schemes/Mist/index.styl</code> 文件中修改</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.footer</span> &#123;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">80px</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(245, 245, 245, 0.6);</div><div class="line">  <span class="attribute">color</span>: $grey-dim;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果想子容器也透明化的话，则在 <code>themes/next/source/css/_common/components/footer/footer.styl</code> 中修改，且不要修改 index.styl 文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.footer &#123;</div><div class="line">  font-size: 14px;</div><div class="line">  color: $grey-dark;</div><div class="line">  opactiy: 0.7;</div><div class="line"></div><div class="line">  img &#123; border: none; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>至此，添加背景便完成了。</p>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 反射]]></title>
      <url>/2017/09/12/Java%20%E5%8F%8D%E5%B0%84/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第一次接触反射是在学习 Spring 框架的时候，当看到 Spring 通过反射注入对象时感到十分有趣。所以这里系统的学习一下反射机制。</p>
<p>动态语言，是指程序在运行时可以改变其结构：新的函数可以被引进，已有的函数可以被删除等在结构上的变化。比如众所周知的ECMAScript(JavaScript)便是一个动态语言。除此之外如Ruby、Python等也都属于动态语言，而C、C++等语言则不属于动态语言。(引自: 百度百科)</p>
<a id="more"></a>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>主要是指程序可以访问，检测和修改它本身状态或行为的一种能力，并能根据自身行为的状态和结果，调整或修改应用所描述行为的状态和相关的语义。</p>
<p>反射是java中一种强大的工具，能够使我们很方便的创建灵活的代码，这些代码可以再运行时装配，无需在组件之间进行源代码链接。但是反射使用不当会成本很高！</p>
<p><strong>通俗说就是</strong></p>
<p>1.可以于运行时加载,探知和使用编译期间完全未知的类</p>
<p>2.程序在运行状态中, 可以动态加载一个只有名称的类, 对于任意一个已经加载的类,都能够知道这个类的所有属性和方法; 对于任意一个对象,都能调用他的任意一个方法和属性</p>
<p>3.加载完类之后, 在堆内存中会产生一个Class类型的对象(一个类只有一个Class对象), 这个对象包含了完整的类的结构信息,而且这个Class对象就像一面镜子,透过这个镜子看到类的结构,所以被称之为:反射。</p>
<h1 id="使用的类"><a href="#使用的类" class="headerlink" title="使用的类"></a>使用的类</h1><p>通过查询api可以发现使用了四个类，分别对应类的本身，类的构造方法，类的方法，类的属性。</p>
<h2 id="java-lang-Class"><a href="#java-lang-Class" class="headerlink" title="java.lang.Class;"></a>java.lang.Class<t>;</t></h2><p>Class 类的实例表示正在运行的 Java 应用程序中的类和接口。枚举是一种类，注释是一种接口。每个数组属于被映射为 Class 对象的一个类，所有具有相同元素类型和维数的数组都共享该 Class 对象。基本的 Java 类型（boolean、byte、char、short、int、long、float 和 double）和关键字 void 也表示为 Class 对象。 </p>
<p>Class 没有公共构造方法。Class 对象是在加载类时由 Java 虚拟机以及通过调用类加载器中的 defineClass 方法自动构造的。 </p>
<p>获取的方式有三种：</p>
<p>1.对象的getClass()方法;</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printClassName</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">         System.out.println(<span class="string">"The class of "</span> + obj +</div><div class="line">                            <span class="string">" is "</span> + obj.getClass().getName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.类的.class(最安全/性能最好)属性;</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printClassName</span><span class="params">()</span> </span>&#123;</div><div class="line">         System.out.println(<span class="string">"The class of Object "</span> +</div><div class="line">                            <span class="string">"is "</span> + Object.class.getName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.运用Class.forName(String className)动态加载类,className需要是<strong>类的全限定名</strong>(最常用).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printClassName</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"The class of Object "</span> +</div><div class="line">                           <span class="string">"is"</span> + Class.forName(<span class="string">"java.lang.Object"</span>).getName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="通过Class获取信息"><a href="#通过Class获取信息" class="headerlink" title="通过Class获取信息"></a>通过Class获取信息</h3><p>常用的有：</p>
<p>1.获取方法  <code>Method getMethod(String name, Class&lt;?&gt;... parameterTypes)</code></p>
<p>2.获取属性  <code>Field getField(String name)</code></p>
<p>3.获取构造器  <code>Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)</code></p>
<p>4.获取内部类 <code>Class&lt;?&gt;[] getDeclaredClasses()</code></p>
<p>5.获取外部类 <code>Class&lt;?&gt; getDeclaringClass()</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> Test;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by ly on 2017/9/12</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        test();</div><div class="line">        test2();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">        Class testClass = TestClass.class;</div><div class="line">        System.out.println(testClass.getName());</div><div class="line">        Class[] declaredClass = testClass.getDeclaredClasses();</div><div class="line">        <span class="keyword">for</span> (Class c: declaredClass) &#123;</div><div class="line">            System.out.println(c.getName());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</div><div class="line">        Class AClass = A.class;</div><div class="line">        System.out.println(AClass);</div><div class="line">        Class declaredClass = AClass.getDeclaringClass();</div><div class="line">        System.out.println(declaredClass.getName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p>test.TestClass</p>
<p>test.TestClass$A</p>
<p>class test.TestClass$A</p>
<p>test.TestClass</p>
<h2 id="java-lang-reflect-Method"><a href="#java-lang-reflect-Method" class="headerlink" title="java.lang.reflect.Method;"></a>java.lang.reflect.Method;</h2><p>Method 提供关于类或接口上单独某个方法（以及如何访问该方法）的信息。所反映的方法可能是类方法或实例方法（包括抽象方法）。 </p>
<p>Method 允许在匹配要调用的实参与底层方法的形参时进行扩展转换；但如果要进行收缩转换，则会抛出 IllegalArgumentException。 </p>
<h3 id="获取Method"><a href="#获取Method" class="headerlink" title="获取Method"></a>获取Method</h3><p>通过Class下的方法</p>
<p>1.<code>Method getMethod(String name, Class&lt;?&gt;... parameterTypes)</code>  //返回一个 Method 对象，它反映此 Class 对象所表示的类或接口的指定<strong>公共成员方法</strong>。</p>
<p>name - 方法名 </p>
<p>parameterTypes - 参数列表</p>
<p>2.<code>Method[] getMethods()</code> //返回一个包含某些 Method 对象的数组，这些对象反映此 Class 对象所表示的类或接口（包括那些由该类或接口声明的以及从超类和超接口继承的那些的类或接口）的公共 member 方法。数组类返回从 Object 类继承的所有（公共）member 方法。返回数组中的元素没有排序，也没有任何特定的顺序。如果此 Class 对象表示没有公共成员方法的类或接口，或者表示一个基本类型或 void，则此方法返回长度为 0 的数组。</p>
<h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><p><code>Object invoke(Object obj, Object... args)</code></p>
<p>obj - 从中调用底层方法的对象</p>
<p>args - 用于方法调用的参数 </p>
<p>对带有指定参数的指定对象调用由此 Method 对象表示的底层方法。个别参数被自动解包，以便与基本形参相匹配，基本参数和引用参数都随需服从方法调用转换。 </p>
<p>如果底层方法是静态的，那么可以忽略指定的 obj 参数。该参数可以为 null。 </p>
<p>如果底层方法所需的形参数为 0，则所提供的 args 数组长度可以为 0 或 null。 </p>
<p>如果底层方法是实例方法，则使用动态方法查找来调用它，这一点记录在 Java Language Specification, Second Edition 的第 15.12.4.4 节中；在发生基于目标对象的运行时类型的重写时更应该这样做。 </p>
<p>如果底层方法是静态的，并且尚未初始化声明此方法的类，则会将其初始化。</p>
<p>如果方法正常完成，则将该方法返回的值返回给调用者；如果该值为基本类型，则首先适当地将其包装在对象中。但是，如果该值的类型为一组基本类型，则数组元素不 被包装在对象中；换句话说，将返回基本类型的数组。如果底层方法返回类型为 void，则该调用返回 null。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException, IllegalArgumentException, InvocationTargetException</span>&#123;</div><div class="line">        Class c = Object.class;</div><div class="line">        Method method = c.getMethod(<span class="string">"toString"</span>);</div><div class="line">        method.invoke(c.newInstance());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="java-lang-reflect-Field"><a href="#java-lang-reflect-Field" class="headerlink" title="java.lang.reflect.Field;"></a>java.lang.reflect.Field;</h2><p>Field 提供有关类或接口的单个字段的信息，以及对它的动态访问权限。反射的字段可能是一个类（静态）字段或实例字段。 </p>
<h3 id="获取Field"><a href="#获取Field" class="headerlink" title="获取Field"></a>获取Field</h3><p>通过Class下的方法</p>
<p>1.<code>Field getField(String name)</code> //返回一个 Field 对象，它反映此 Class 对象所表示的类或接口的指定<strong>公共成员字段</strong>。</p>
<p>name - 字段名 </p>
<p>2.<code>Field[] getFields()</code>//返回一个包含某些 Field 对象的数组，这些对象反映此 Class 对象所表示的类或接口的<strong>所有可访问公共字段</strong>。返回数组中的元素没有排序，也没有任何特定的顺序。如果类或接口没有可访问的<strong>公共字段</strong>，或者表示一个数组类、一个基本类型或 void，则此方法返回长度为 0 的数组。 </p>
<h3 id="获取Field上的值"><a href="#获取Field上的值" class="headerlink" title="获取Field上的值"></a>获取Field上的值</h3><p><code>Object get(Object obj)</code></p>
<p>返回指定对象上此 Field 表示的字段的值。如果该值是一个基本类型值，则自动将其包装在一个对象中。 </p>
<p>底层字段的值是按以下方式获得的： </p>
<p>如果底层字段是一个静态字段，则忽略 obj 变量；它可能为 null。 </p>
<p>否则，底层字段是一个实例字段。如果指定的 obj 变量为 null，则该方法将抛出一个 NullPointerException。如果指定对象不是声明底层字段的类或接口的实例，则该方法将抛出一个 IllegalArgumentException。 </p>
<p>如果此 Field 对象强制实施 Java 语言访问控制，并且底层字段是不可访问的，则该方法将抛出一个 IllegalAccessException。如果底层字段是静态的，并且声明该字段的类尚未初始化，则初始化这个类。 </p>
<p>否则，从底层实例字段或静态字段中获取该值。如果该字段是一个基本类型字段，则在返回前将该值包装在一个对象中，否则照原样返回。 </p>
<p>如果字段隐藏在 obj 的类型中，则根据前面的规则获得字段的值。 </p>
<h2 id="java-lang-reflect-Constructor"><a href="#java-lang-reflect-Constructor" class="headerlink" title="java.lang.reflect.Constructor;"></a>java.lang.reflect.Constructor;</h2><p>Constructor 提供关于类的单个构造方法的信息以及对它的访问权限。 </p>
<h3 id="获取Constructor"><a href="#获取Constructor" class="headerlink" title="获取Constructor"></a>获取Constructor</h3><p>通过Class下的方法</p>
<p>1.<code>Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)</code></p>
<p>返回一个 Constructor 对象，它反映此 Class 对象所表示的类的指定<strong>公共构造方法</strong>。parameterTypes 参数是 Class 对象的一个数组，这些 Class 对象按声明顺序标识构造方法的形参类型。 如果此 Class 对象表示非静态上下文中声明的内部类，则形参类型作为第一个参数包括显示封闭的实例。 </p>
<p>要反映的构造方法是此 Class 对象所表示的类的公共构造方法，其形参类型与 parameterTypes 所指定的参数类型相匹配。 </p>
<p>2.<code>Constructor&lt;?&gt;[] getConstructors()</code></p>
<p>返回一个包含某些 Constructor 对象的数组，这些对象反映此 Class 对象所表示的类的<strong>所有公共构造方法</strong>。如果该类没有公共构造方法，或者该类是一个数组类，或者该类反映一个基本类型或 void，则返回一个长度为 0 的数组。 注意，此方法返回 Constructor<t> 对象的数组（即取自此类构造方法的数组）时，此方法的返回类型是 Constructor&lt;?&gt;[]，不是 预期的 Constructor<t>[]。此少量信息的返回类型是必需的，因为从此方法返回之后，该数组可能被修改以保存不同类的 Constructor 对象，而这将违反 Constructor<t>[] 的类型保证。</t></t></t></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 注解]]></title>
      <url>/2017/09/10/Java%20%E6%B3%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>注解是java引入的一项非常受欢迎的补充，它提供了一种结构化的，并且具有类型检查能力的新途径，从而使得程序员能够为代码加入元数据，而不会导致代码杂乱且难以阅读。使用注解能够帮助我们避免编写累赘的部署描述文件，以及其他生成的文件。</p>
<p>注解的语法比较简单，除了@符号的使用之外，它基本与java固有的语法一致。但由于java源码中提供的内置注解很少，所以大部分同学对注解都不是很了解，虽然我们都接触过，比如java内置的几种注解：</p>
<pre><code>@Override，表示当前的方法定义将覆盖超类中的方法。
@Deprecated，表示当前方法即将废弃，不推荐使用。
@SuppressWarnings，表示忽略编译器的警告信息。
</code></pre><a id="more"></a>
<p>要深入学习注解，我们就必须能定义自己的注解，并使用注解，在定义自己的注解之前，我们就必须要了解Java为我们提供的元注解和相关定义注解的语法。</p>
<h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><p>元注解的作用就是负责注解其他注解。Java5.0定义了4个标准的meta-annotation类型，它们被用来提供对其它 annotation类型作说明。Java5.0定义的元注解：</p>
<p>1.<a href="#Target">@Target</a></p>
<p>2.<a href="#Retention">@Retention</a></p>
<p>3.<a href="#Documented">@Documented</a></p>
<p>4.<a href="#Inherited">@Inherited</a></p>
<p>这些类型和它们所支持的类在java.lang.annotation包中可以找到。下面我们看一下每个元注解的作用和相应分参数的使用说明。</p>
<h3 id="Target"><a href="#Target" class="headerlink" title="@Target"></a><span id="Target">@Target</span></h3><p>@Target说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。</p>
<p>作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）</p>
<p>取值(ElementType)有：</p>
<p>1.CONSTRUCTOR:用于描述构造器</p>
<p>2.FIELD:用于描述域</p>
<p>3.LOCAL_VARIABLE:用于描述局部变量</p>
<p>4.METHOD:用于描述方法</p>
<p>5.PACKAGE:用于描述包</p>
<p>6.PARAMETER:用于描述参数</p>
<p>7.TYPE:用于描述类、接口(包括注解类型) 或enum声明</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Table &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">tableName</span><span class="params">()</span> <span class="keyword">default</span> "className"</span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> NoDBColumn &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注解Table 可以用于注解类、接口(包括注解类型) 或enum声明,而注解NoDBColumn仅可用于注解类的成员变量。</p>
<h3 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a><span id="Retention">@Retention</span></h3><p>@Retention定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对 Annotation的“生命周期”限制。</p>
<p>作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）</p>
<p>取值（RetentionPolicy）有：</p>
<p>1.SOURCE:在源文件中有效（即源文件保留）</p>
<p>2.CLASS:在class文件中有效（即class保留）</p>
<p>3.RUNTIME:在运行时有效（即运行时保留）</p>
<p>Retention meta-annotation类型有唯一的value作为成员，它的取值来自java.lang.annotation.RetentionPolicy的枚举类型值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Column &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> "fieldName"</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">setFuncName</span><span class="params">()</span> <span class="keyword">default</span> "setField"</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFuncName</span><span class="params">()</span> <span class="keyword">default</span> "getField"</span>; </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">defaultDBValue</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Column注解的的RetentionPolicy的属性值是RUTIME,这样注解处理器可以通过反射，获取到该注解的属性值，从而去做一些运行时的逻辑处理</p>
<h3 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a><span id="Documented">@Documented</span></h3><p>@Documented用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。Documented是一个标记注解，没有成员。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Column &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> "fieldName"</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">setFuncName</span><span class="params">()</span> <span class="keyword">default</span> "setField"</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFuncName</span><span class="params">()</span> <span class="keyword">default</span> "getField"</span>; </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">defaultDBValue</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a><span id="Inherited">@Inherited</span></h3><p>@Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。</p>
<p>注意：@Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，方法并不从它所重载的方法继承annotation。</p>
<p>当@Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。如果我们使用java.lang.reflect去查询一个@Inherited annotation类型的annotation时，反射代码检查将展开工作：检查class和其父类，直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Inherited</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Greeting &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> FontColor&#123; BLUE,RED,GREEN&#125;;</div><div class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">FontColor <span class="title">fontColor</span><span class="params">()</span> <span class="keyword">default</span> FontColor.GREEN</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p>使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口，由编译程序自动完成其他细节。在定义注解时，不能继承其他的注解或接口。@interface用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。方法的名称就是参数的名称，返回值类型就是参数的类型（返回值类型只能是基本类型、Class、String、enum）。可以通过default来声明参数的默认值。</p>
<p><strong>定义注解格式：</strong></p>
<p><em>public @interface 注解名 {定义体}</em></p>
<p><strong>注解参数的可支持数据类型：</strong></p>
<p>1.所有基本数据类型（int,float,boolean,byte,double,char,long,short)</p>
<p>2.String类型</p>
<p>3.Class类型</p>
<p>4.enum类型</p>
<p>5.Annotation类型</p>
<p>6.以上所有类型的数组</p>
<p>Annotation类型里面的参数该怎么设定: </p>
<p>第一,只能用public或默认(default)这两个访问权修饰.例如,String value();这里把方法设为default默认类型；</p>
<p>第二,参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基本数据类型和 String,Enum,Class,annotations等数据类型,以及这一些类型的数组.例如,String value();这里的参数成员就为String;</p>
<p>第三,如果只有一个参数成员,最好把参数名称设为”value”,后加小括号.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 自定义注解</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@interface</span> MyAnnotation &#123;</div><div class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注解元素的默认值：</strong></p>
<p>注解元素必须有确定的值，要么在定义注解的默认值中指定，要么在使用注解时指定，非基本类型的注解元素的值不可为null。因此, 使用空字符串或0作为默认值是一种常用的做法。这个约束使得处理器很难表现一个元素的存在或缺失的状态，因为每个注解的声明中，所有元素都存在，并且都具有相应的值，为了绕开这个约束，我们只能定义一些特殊的值，例如空字符串或者负数，一次表示某个元素不存在，在定义注解时，这已经成为一个习惯用法。</p>
<h2 id="注解处理"><a href="#注解处理" class="headerlink" title="注解处理"></a>注解处理</h2><p>注解类使用上了，我们还需要一个注解处理器来解析我们定义的Bean，这样才能将注解转换成我们需要的操作。</p>
<p>Java使用Annotation接口来代表程序元素前面的注解，该接口是所有Annotation类型的父接口。除此之外，Java在java.lang.reflect 包下新增了AnnotatedElement接口，该接口代表程序中可以接受注解的程序元素，该接口主要有如下几个实现类：</p>
<p>Class：类定义</p>
<p>Constructor：构造器定义</p>
<p>Field：类的成员变量定义</p>
<p>Method：类的方法定义</p>
<p>Package：类的包定义</p>
<p>java.lang.reflect 包下主要包含一些实现反射功能的工具类，实际上，java.lang.reflect 包所有提供的反射API扩充了读取运行时Annotation信息的能力。当一个Annotation类型被定义为运行时的Annotation后，该注解才能是运行时可见，当class文件被装载时被保存在class文件中的Annotation才会被虚拟机读取。</p>
<p>AnnotatedElement 接口是所有程序元素（Class、Method和Constructor）的父接口，所以程序通过反射获取了某个类的AnnotatedElement对象之后，程序就可以调用该对象的如下四个个方法来访问Annotation信息：</p>
<pre><code>&lt;T extends Annotation&gt; T getAnnotation(Class&lt;T&gt; annotationClass): 返回改程序元素上存在的、指定类型的注解，如果该类型注解不存在，则返回null。

Annotation[] getAnnotations():返回该程序元素上存在的所有注解。

boolean is AnnotationPresent(Class&lt;?extends Annotation&gt; annotationClass):判断该程序元素上是否包含指定类型的注解，存在则返回true，否则返回false.

Annotation[] getDeclaredAnnotations()：返回直接存在于此元素上的所有注解。与此接口中的其他方法不同，该方法将忽略继承的注解。（如果没有注解直接存在于此元素上，则返回长度为零的一个数组。）该方法的调用者可以随意修改返回的数组；这不会对其他调用者返回的数组产生任何影响。
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAnnotation</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">            MyAnnotation annotation = annotation.class.getAnnotation(MyAnnotation.class);</div><div class="line">            System.out.println(annotation.value());</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@MyAnnotation</span>(value = <span class="string">"123"</span>)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">annotation</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上是通过反射获取annotation类的注解，并打印注解中value的值</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC 配置及常用注解]]></title>
      <url>/2017/09/10/Spring%20MVC%20%E6%B3%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>  Spring MVC 作为目前最主流的MVC框架之一，需要程序员熟练掌握。 而使用注解可以大大简化配置的流程，减少工作量。 所以这里简单讲解Spring MVC注解的配置和常用注解。</p>
  <a id="more"></a>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="jar包引入"><a href="#jar包引入" class="headerlink" title="jar包引入"></a>jar包引入</h2><p>  <strong>使用Gradle</strong></p>
<ul>
<li><p>compile ‘org.springframework:spring-context:4.2.5.RELEASE’</p>
</li>
<li><p>compile ‘org.springframework:spring-webmvc:4.2.5.RELEASE’</p>
</li>
</ul>
<h2 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h2><p>  SpringMVC是一个基于DispatcherServlet的MVC框架，每一个请求最先访问的都是DispatcherServlet，DispatcherServlet负责转发每一个Request请求给相应的Handler，Handler处理以后再返回相应的视图(View)和模型(Model)，返回的视图和模型都可以不指定，即可以只返回Model或只返回View或都不返回。</p>
<p>  DispatcherServlet是继承自HttpServlet的，既然SpringMVC是基于DispatcherServlet的，那么我们先来配置一下DispatcherServlet，好让它能够管理我们希望它管理的内容。HttpServlet是在web.xml文件中声明的。</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></div><div class="line">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</div><div class="line">      <span class="comment">&lt;!-- 指定Spring Bean的配置文件所在目录 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">          <span class="comment">&lt;!-- 默认是/WEB-INF/applicationContext.xml --&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">      </div><div class="line">      <span class="comment">&lt;!-- Spring配置 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line">  </div><div class="line">      <span class="comment">&lt;!-- spring mvc配置 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">              <span class="comment">&lt;!-- 默认是/WEB-INF/[servlet名字]-servlet.xml --&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">  </div><div class="line">      <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">      </div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>ContextLoaderListener指定了IOC容器初始化的方法</li>
</ul>
<h2 id="Spring-MVC配置"><a href="#Spring-MVC配置" class="headerlink" title="Spring MVC配置"></a>Spring MVC配置</h2>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line"></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line"></div><div class="line">       <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line"></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></div><div class="line"></div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd</div><div class="line">		</div><div class="line">		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"&gt;</div><div class="line"></div><div class="line"></div><div class="line">      <span class="comment">&lt;!-- 启用spring mvc 注解 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></div><div class="line">      </div><div class="line">      <span class="comment">&lt;!-- 设置使用注解的类所在的jar包 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"controller"</span>/&gt;</span></div><div class="line">      </div><div class="line">      <span class="comment">&lt;!-- 对转向页面的路径解析。prefix：前缀， suffix：后缀 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="attr">p:prefix</span>=<span class="string">"/jsp/"</span> <span class="attr">p:suffix</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h2><p>  对你的Controller类使用@Controller注解进行标记。</p>
<h1 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h1><h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h2><p>  在SpringMVC 中，控制器Controller 负责处理由DispatcherServlet 分发的请求，它把用户请求的数据经过业务处理层处理之后封装成一个Model ，然后再把该Model 返回给对应的View 进行展示。在SpringMVC 中提供了一个非常简便的定义Controller 的方法，你无需继承特定的类或实现特定的接口，只需使用@Controller 标记一个类是Controller ，然后使用@RequestMapping 和@RequestParam 等一些注解用以定义URL 请求和Controller 方法之间的映射，这样的Controller 就能被外界访问到。此外Controller 不会直接依赖于HttpServletRequest 和HttpServletResponse 等HttpServlet 对象，它们可以通过Controller 的方法参数灵活的获取到。</p>
<p>  @Controller 用于标记在一个类上，使用它标记的类就是一个SpringMVC Controller 对象。分发处理器将会扫描使用了该注解的类的方法，并检测该方法是否使用了@RequestMapping 注解。@Controller 只是定义了一个控制器类，而使用@RequestMapping 注解的方法才是真正处理请求的处理器。单单使用@Controller 标记在一个类上还不能真正意义上的说它就是SpringMVC 的一个控制器类，因为这个时候Spring 还不认识它。那么要如何做Spring 才能认识它呢？这个时候就需要我们把这个控制器类交给Spring 来管理。有两种方式：</p>
<ol>
<li><p>在SpringMVC 的配置文件中定义MyController 的bean 对象。</p>
</li>
<li><p>在SpringMVC 的配置文件中告诉Spring 该到哪里去找标记为@Controller 的Controller 控制器。</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--方式一--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.host.app.web.controller.MyController"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!--方式二--&gt;</span></div><div class="line"><span class="tag">&lt; <span class="attr">context:component-scan</span> <span class="attr">base-package</span> = <span class="string">"com.host.app.web"</span> /&gt;</span>//路径写到controller的上一层(扫描包详解见下面浅析)</div></pre></td></tr></table></figure>
<h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><p>  RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p>
<p>  RequestMapping注解有六个属性。</p>
<p>  <strong>value</strong> : 指定请求的实际地址，指定的地址可以是URI Template 模式（后面将会说明）;</p>
<p>  <strong>method</strong> : 指定请求的method类型， GET、POST、PUT、DELETE等;</p>
<p>  <strong>consumes</strong> :  指定处理请求的提交内容类型（Content-Type），例如application/json, text/html;</p>
<p>  <strong>produces</strong> : 指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回;</p>
<p>  <strong>params</strong> : 指定request中必须包含某些参数值是，才让该方法处理。</p>
<p>  <strong>headers</strong> : 指定request中必须包含某些指定的header值，才能让该方法处理请求。</p>
<h3 id="使用-RequestMapping-来映射-Request-请求与处理器"><a href="#使用-RequestMapping-来映射-Request-请求与处理器" class="headerlink" title="使用 @RequestMapping 来映射 Request 请求与处理器"></a>使用 @RequestMapping 来映射 Request 请求与处理器</h3><p>  <em>方式一、通过常见的类路径和方法路径结合访问controller方法</em></p>
<p>  <em>方式二、使用url模板</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span> ( <span class="string">"/test/&#123;variable1&#125;"</span> )</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span> ( <span class="string">"/showView/&#123;variable2&#125;"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">showView</span><span class="params">( @PathVariable(<span class="string">"variable1"</span>)</span> String variable1, @<span class="title">PathVariable</span> <span class="params">(<span class="string">"variable2"</span>)</span> <span class="keyword">int</span> variable2) </span>&#123;</div><div class="line">       ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</div><div class="line">       modelAndView.setViewName( <span class="string">"viewName"</span> );</div><div class="line">       modelAndView.addObject( <span class="string">" 需要放到 model 中的属性名称 "</span> , <span class="string">" 对应的属性值，它是一个对象 "</span> );</div><div class="line">       <span class="keyword">return</span> modelAndView;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  URI 模板就是在 URI 中给定一个变量，然后在映射的时候动态的给该变量赋值。如URI 模板<a href="http://localhost/app/{variable1}/index.html" target="_blank" rel="external">http://localhost/app/{variable1}/index.html</a> ，这个模板里面包含一个变量variable1 ，那么当我们请求<a href="http://localhost/app/hello/index.html" target="_blank" rel="external">http://localhost/app/hello/index.html</a> 的时候，该URL 就跟模板相匹配，只是把模板中的variable1 用hello 来取代。这个变量在SpringMVC 中是使用@PathVariable 来标记的。在SpringMVC 中，我们可以使用@PathVariable 来标记一个Controller 的处理方法参数，表示该参数的值将使用URI 模板中对应的变量的值来赋值。</p>
<p>  代码中我们定义了两个URI 变量，一个是控制器类上的variable1 ，一个是showView 方法上的variable2 ，然后在showView 方法的参数里面使用@PathVariable 标记使用了这两个变量。所以当我们使用/test/hello/showView/2.do 来请求的时候就可以访问到MyController 的showView 方法，这个时候variable1 就被赋予值hello ，variable2 就被赋予值2 ，然后我们在showView 方法参数里面标注了参数variable1 和variable2 是来自访问路径的path 变量，这样方法参数variable1 和variable2 就被分别赋予hello 和2 。方法参数variable1 是定义为String 类型，variable2 是定义为int 类型，像这种简单类型在进行赋值的时候Spring 是会帮我们自动转换的。</p>
<p>  在上面的代码中我们可以看到在标记variable1 为path 变量的时候我们使用的是@PathVariable ，而在标记variable2 的时候使用的是@PathVariable(“variable2”) 。这两者有什么区别呢？第一种情况就默认去URI 模板中找跟参数名相同的变量，但是这种情况只有在使用debug 模式进行编译的时候才可以，而第二种情况是明确规定使用的就是URI 模板中的variable2 变量。当不是使用debug 模式进行编译，或者是所需要使用的变量名跟参数名不相同的时候，就要使用第二种方式明确指出使用的是URI 模板中的哪个变量。</p>
<p>  除了在请求路径中使用URI 模板，定义变量之外，@RequestMapping 中还支持通配符“* ”。如下面的代码我就可以使用/myTest/whatever/wildcard.do 访问到Controller 的testWildcard 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span> ( <span class="string">"/myTest"</span> )</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</div><div class="line">    <span class="meta">@RequestMapping</span> ( <span class="string">"*/wildcard"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testWildcard</span><span class="params">()</span> </span>&#123;</div><div class="line">       System. out .println( <span class="string">"wildcard------------"</span> );</div><div class="line">       <span class="keyword">return</span> <span class="string">"wildcard"</span> ;</div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="params属性"><a href="#params属性" class="headerlink" title="params属性"></a>params属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span> (value= <span class="string">"testParams"</span> , params=&#123; <span class="string">"param1=value1"</span> , <span class="string">"param2"</span> , <span class="string">"!param3"</span> &#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testParams</span><span class="params">()</span> </span>&#123;</div><div class="line">    System. out .println( <span class="string">"test Params..........."</span> );</div><div class="line">    <span class="keyword">return</span> <span class="string">"testParams"</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  用@RequestMapping 的params 属性指定了三个参数，这些参数都是针对请求参数而言的，它们分别表示参数param1 的值必须等于value1 ，参数param2 必须存在，值无所谓，参数param3 必须不存在，只有当请求/testParams.do 并且满足指定的三个参数条件的时候才能访问到该方法。所以当请求/testParams.do?param1=value1&amp;param2=value2 的时候能够正确访问到该testParams 方法，当请求/testParams.do?param1=value1&amp;param2=value2&amp;param3=value3 的时候就不能够正常的访问到该方法，因为在@RequestMapping 的params 参数里面指定了参数param3 是不能存在的。</p>
<h3 id="method属性"><a href="#method属性" class="headerlink" title="method属性"></a>method属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span> (value= <span class="string">"testMethod"</span> , method=&#123;RequestMethod. GET , RequestMethod. DELETE &#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"method"</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  在上面的代码中就使用method 参数限制了以GET 或DELETE 方法请求/testMethod 的时候才能访问到该Controller 的testMethod 方法。</p>
<h3 id="headers属性"><a href="#headers属性" class="headerlink" title="headers属性"></a>headers属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span> (value= <span class="string">"testHeaders"</span> , headers=&#123; <span class="string">"host=localhost"</span> , <span class="string">"Accept"</span> &#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHeaders</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"headers"</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  headers 属性的用法和功能与params 属性相似。在上面的代码中当请求/testHeaders.do 的时候只有当请求头包含Accept 信息，且请求的host 为localhost 的时候才能正确的访问到testHeaders 方法。</p>
<h3 id="RequestMapping-标记的处理器方法支持的方法参数和返回类型"><a href="#RequestMapping-标记的处理器方法支持的方法参数和返回类型" class="headerlink" title="@RequestMapping 标记的处理器方法支持的方法参数和返回类型"></a>@RequestMapping 标记的处理器方法支持的方法参数和返回类型</h3><p>  <strong>1.支持的方法参数类型</strong></p>
<p>   （1）HttpServlet 对象，主要包括HttpServletRequest 、HttpServletResponse 和HttpSession 对象。 这些参数Spring 在调用处理器方法的时候会自动给它们赋值，所以当在处理器方法中需要使用到这些对象的时候，可以直接在方法上给定一个方法参数的申明，然后在方法体里面直接用就可以了。但是有一点需要注意的是在使用HttpSession 对象的时候，如果此时HttpSession 对象还没有建立起来的话就会有问题。</p>
<p>   （2）Spring 自己的WebRequest 对象。 使用该对象可以访问到存放在HttpServletRequest 和HttpSession 中的属性值。</p>
<p>   （3）InputStream 、OutputStream 、Reader 和Writer 。 InputStream 和Reader 是针对HttpServletRequest 而言的，可以从里面取数据；OutputStream 和Writer 是针对HttpServletResponse 而言的，可以往里面写数据。</p>
<p>   （4）使用@PathVariable 、@RequestParam 、@CookieValue 和@RequestHeader 标记的参数。</p>
<p>   （5）使用@ModelAttribute 标记的参数。</p>
<p>   （6）java.util.Map 、Spring 封装的Model 和ModelMap 。 这些都可以用来封装模型数据，用来给视图做展示。</p>
<p>   （7）实体类。 可以用来接收上传的参数。</p>
<p>   （8）Spring 封装的MultipartFile 。 用来接收上传文件的。</p>
<p>   （9）Spring 封装的Errors 和BindingResult 对象。 这两个对象参数必须紧接在需要验证的实体对象参数之后，它里面包含了实体对象的验证结果。</p>
<p>  <strong>2.支持的返回类型</strong></p>
<p>   （1）一个包含模型和视图的ModelAndView 对象。</p>
<p>   （2）一个模型对象，这主要包括Spring 封装好的Model 和ModelMap ，以及java.util.Map ，当没有视图返回的时候视图名称将由RequestToViewNameTranslator 来决定。</p>
<p>   （3）一个View 对象。这个时候如果在渲染视图的过程中模型的话就可以给处理器方法定义一个模型参数，然后在方法体里面往模型中添加值。</p>
<p>   （4）一个String 字符串。这往往代表的是一个视图名称。这个时候如果需要在渲染视图的过程中需要模型的话就可以给处理器方法一个模型参数，然后在方法体里面往模型中添加值就可以了。</p>
<p>   （5）返回值是void 。这种情况一般是我们直接把返回结果写到HttpServletResponse 中了，如果没有写的话，那么Spring 将会利用RequestToViewNameTranslator 来返回一个对应的视图名称。如果视图中需要模型的话，处理方法与返回字符串的情况相同。</p>
<p>   （6）如果处理器方法被注解@ResponseBody 标记的话，那么处理器方法的任何返回类型都会通过HttpMessageConverters 转换之后写到HttpServletResponse 中，而不会像上面的那些情况一样当做视图或者模型来处理。</p>
<p>   （7）除以上几种情况之外的其他任何返回类型都会被当做模型中的一个属性来处理，而返回的视图还是由RequestToViewNameTranslator 来决定，添加到模型中的属性名称可以在该方法上用@ModelAttribute(“attributeName”) 来定义，否则将使用返回类型的类名称的首字母小写形式来表示。使用@ModelAttribute 标记的方法会在@RequestMapping 标记的方法执行之前执行。</p>
<h2 id="Resource-和-Autowired"><a href="#Resource-和-Autowired" class="headerlink" title="@Resource 和 @Autowired"></a>@Resource 和 @Autowired</h2><p>  @Resource和@Autowired都是做bean的注入时使用，其实@Resource并不是Spring的注解，它的包是javax.annotation.Resource，需要导入，但是Spring支持该注解的注入。</p>
<h3 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h3><p>  两者都可以写在字段和setter方法上。两者如果都写在字段上，那么就不需要再写setter方法。</p>
<h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><p>  <strong>(1) @Autowired</strong></p>
<p>  @Autowired为Spring提供的注解，需要导入包org.springframework.beans.factory.annotation.Autowired;只按照byType注入。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImpl</span> </span>&#123;</div><div class="line">    <span class="comment">// 下面两种@Autowired只要使用一种即可</span></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserDao userDao; <span class="comment">// 用于字段上</span></div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123; <span class="comment">// 用于属性的方法上</span></div><div class="line">        <span class="keyword">this</span>.userDao = userDao;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  @Autowired注解是按照类型（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。如果我们想使用按照名称（byName）来装配，可以结合@Qualifier注解一起使用。如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImpl</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="meta">@Qualifier</span>(<span class="string">"userDao"</span>)</div><div class="line">    <span class="keyword">private</span> UserDao userDao; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  <strong>(2) @Resource</strong></p>
<p>  @Resource默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。@Resource有两个重要的属性：name和type，而Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImpl</span> </span>&#123;</div><div class="line">    <span class="comment">// 下面两种@Resource只要使用一种即可</span></div><div class="line">    <span class="meta">@Resource</span>(name=<span class="string">"userDao"</span>)</div><div class="line">    <span class="keyword">private</span> UserDao userDao; <span class="comment">// 用于字段上</span></div><div class="line">    </div><div class="line">    <span class="meta">@Resource</span>(name=<span class="string">"userDao"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123; <span class="comment">// 用于属性的setter方法上</span></div><div class="line">        <span class="keyword">this</span>.userDao = userDao;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  注：最好是将@Resource放在setter方法上，因为这样更符合面向对象的思想，通过set、get去操作属性，而不是直接去操作属性。</p>
<p>  <strong>@Resource装配顺序：</strong></p>
<p>  ①如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常。</p>
<p>  ②如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常。</p>
<p>  ③如果指定了type，则从上下文中找到类似匹配的唯一bean进行装配，找不到或是找到多个，都会抛出异常。</p>
<p>  ④如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配。</p>
<p>  @Resource的作用相当于@Autowired，只不过@Autowired按照byType自动注入。</p>
<h2 id="ModelAttribute-和-SessionAttributes"><a href="#ModelAttribute-和-SessionAttributes" class="headerlink" title="@ModelAttribute 和 @SessionAttributes"></a>@ModelAttribute 和 @SessionAttributes</h2><p>  该Controller的所有方法在调用前，先执行此@ModelAttribute方法，可用于注解和方法参数中，可以把这个@ModelAttribute特性，应用在BaseController当中，所有的Controller继承BaseController，即可实现在调用Controller时，先执行@ModelAttribute方法。</p>
<p>  @SessionAttributes即将值放到session作用域中，写在class上面。</p>
<h3 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes"></a>@SessionAttributes</h3><p>  @SessionAttributes:</p>
<p>  该注解用来绑定HttpSession中的attribute对象的值，便于在方法中的参数里使用。</p>
<p>  该注解有value、types两个属性，可以通过名字和类型指定要使用的attribute 对象；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>  </div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/editPet.do"</span>)  </div><div class="line"><span class="meta">@SessionAttributes</span>(<span class="string">"pet"</span>)  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditPetForm</span> </span>&#123;  </div><div class="line">    <span class="comment">// ...   </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-ModelAttribute"><a href="#2-ModelAttribute" class="headerlink" title="2.@ModelAttribute"></a>2.@ModelAttribute</h3><p>  该注解有两个用法，一个是用于方法上，一个是用于参数上；</p>
<p>  用于方法上时： 通常用来在处理@RequestMapping之前，为请求绑定需要从后台查询的model；</p>
<p>  用于参数上时： 用来通过名称对应，把相应名称的值绑定到注解的参数bean上；要绑定的值来源于：</p>
<p>  A） @SessionAttributes 启用的attribute 对象上；</p>
<p>  B） @ModelAttribute 用于方法上时指定的model对象；</p>
<p>  C） 上述两种情况都没有时，new一个需要绑定的bean对象，然后把request中按名称对应的方式把值绑定到bean中。</p>
<p>  <strong>用到方法上</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ModelAttribute</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">addAccount</span><span class="params">(@RequestParam String number)</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> accountManager.findAccount(number);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  这种方式实际的效果就是在调用@RequestMapping的方法之前，为request对象的model里put（“account”， Account）。</p>
<p>  <strong>用在参数上</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;/edit"</span>, method = RequestMethod.POST)  </div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processSubmit</span><span class="params">(@ModelAttribute Pet pet)</span> </span>&#123;  </div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  首先查询 @SessionAttributes有无绑定的Pet对象，若没有则查询@ModelAttribute方法层面上是否绑定了Pet对象，若没有则将URI template中的值按对应的名称绑定到Pet对象的各属性上。</p>
<h3 id="3-使用-ModelAttribute-和-SessionAttributes-传递和保存数据"><a href="#3-使用-ModelAttribute-和-SessionAttributes-传递和保存数据" class="headerlink" title="3.使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据"></a>3.使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据</h3><p>  当 @ModelAttribute 标记在方法上的时候，该方法将在处理器方法执行之前执行，然后把返回的对象存放在 session 或模型属性中，属性名称可以使用 @ModelAttribute(“attributeName”) 在标记方法的时候指定，若未指定，则使用返回类型的类名称（首字母小写）作为属性名称。关于 @ModelAttribute 标记在方法上时对应的属性是存放在 session 中还是存放在模型中，我们来做一个实验，看下面一段代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span> ( <span class="string">"/myTest"</span> )</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@ModelAttribute</span> ( <span class="string">"hello"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getModel</span><span class="params">()</span> </span>&#123;</div><div class="line">       System. out .println( <span class="string">"-------------Hello---------"</span> );</div><div class="line">       <span class="keyword">return</span> <span class="string">"world"</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ModelAttribute</span> ( <span class="string">"intValue"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInteger</span><span class="params">()</span> </span>&#123;</div><div class="line">       System. out .println( <span class="string">"-------------intValue---------------"</span> );</div><div class="line">       <span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span> ( <span class="string">"sayHello"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">( @ModelAttribute ( <span class="string">"hello"</span> )</span> String hello, @<span class="title">ModelAttribute</span> <span class="params">( <span class="string">"intValue"</span> )</span> <span class="keyword">int</span> num, @<span class="title">ModelAttribute</span> <span class="params">( <span class="string">"user2"</span> )</span> User user, Writer writer, HttpSession session) <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">       writer.write( <span class="string">"Hello "</span> + hello + <span class="string">" , Hello "</span> + user.getUsername() + num);</div><div class="line">       writer.write( <span class="string">"\r"</span> );</div><div class="line">       Enumeration enume = session.getAttributeNames();</div><div class="line">       <span class="keyword">while</span> (enume.hasMoreElements())</div><div class="line">           writer.write(enume.nextElement() + <span class="string">"\r"</span> );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ModelAttribute</span> ( <span class="string">"user2"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123;</div><div class="line">       System. out .println( <span class="string">"---------getUser-------------"</span> );</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">"user2"</span> );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  当我们请求 /myTest/sayHello.do 的时候使用 @ModelAttribute 标记的方法会先执行，然后把它们返回的对象存放到模型中。最终访问到 sayHello 方法的时候，使用 @ModelAttribute 标记的方法参数都能被正确的注入值。执行结果如下所示：</p>
<p>  <em>Hello world,Hello user210</em></p>
<p>  由执行结果我们可以看出来，此时 session 中没有包含任何属性，也就是说上面的那些对象都是存放在模型属性中，而不是存放在 session 属性中。那要如何才能存放在 session 属性中呢？这个时候我们先引入一个新的概念 @SessionAttributes ，它的用法会在讲完 @ModelAttribute 之后介绍，这里我们就先拿来用一下。我们在 MyController 类上加上 @SessionAttributes 属性标记哪些是需要存放到 session 中的。看下面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span> ( <span class="string">"/myTest"</span> )</div><div class="line"><span class="meta">@SessionAttributes</span> (value=&#123; <span class="string">"intValue"</span> , <span class="string">"stringValue"</span> &#125;, types=&#123;User. <span class="class"><span class="keyword">class</span> &#125;)</span></div><div class="line"><span class="title">public</span> <span class="title">class</span> <span class="title">MyController</span> &#123;</div><div class="line"></div><div class="line">    <span class="meta">@ModelAttribute</span> ( <span class="string">"hello"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getModel</span><span class="params">()</span> </span>&#123;</div><div class="line">       System. out .println( <span class="string">"-------------Hello---------"</span> );</div><div class="line">       <span class="keyword">return</span> <span class="string">"world"</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ModelAttribute</span> ( <span class="string">"intValue"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInteger</span><span class="params">()</span> </span>&#123;</div><div class="line">       System. out .println( <span class="string">"-------------intValue---------------"</span> );</div><div class="line">       <span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="meta">@RequestMapping</span> ( <span class="string">"sayHello"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(Map&lt;String, Object&gt; map, @ModelAttribute ( <span class="string">"hello"</span> )</span> String hello, @<span class="title">ModelAttribute</span> <span class="params">( <span class="string">"intValue"</span> )</span> <span class="keyword">int</span> num, @<span class="title">ModelAttribute</span> <span class="params">( <span class="string">"user2"</span> )</span> User user, Writer writer, HttpServletRequest request) <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">       map.put( <span class="string">"stringValue"</span> , <span class="string">"String"</span> );</div><div class="line">       writer.write( <span class="string">"Hello "</span> + hello + <span class="string">" , Hello "</span> + user.getUsername() + num);</div><div class="line">       writer.write( <span class="string">"\r"</span> );</div><div class="line">       HttpSession session = request.getSession();</div><div class="line">       Enumeration enume = session.getAttributeNames();</div><div class="line">       <span class="keyword">while</span> (enume.hasMoreElements())</div><div class="line">           writer.write(enume.nextElement() + <span class="string">"\r"</span> );</div><div class="line">       System. out .println(session);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ModelAttribute</span> ( <span class="string">"user2"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</div><div class="line">       System. out .println( <span class="string">"---------getUser-------------"</span> );</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">"user2"</span> );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  在上面代码中我们指定了属性为 intValue 或 stringValue 或者类型为 User 的都会放到 Session中，利用上面的代码当我们访问 /myTest/sayHello.do 的时候，结果如下：</p>
<p>  <em>Hello world,Hello user210</em></p>
<p>  仍然没有打印出任何 session 属性，这是怎么回事呢？怎么定义了把模型中属性名为 intValue 的对象和类型为 User 的对象存到 session 中，而实际上没有加进去呢？难道我们错啦？我们当然没有错，只是在第一次访问 /myTest/sayHello.do 的时候 @SessionAttributes 定义了需要存放到 session 中的属性，而且这个模型中也有对应的属性，但是这个时候还没有加到 session 中，所以 session 中不会有任何属性，等处理器方法执行完成后 Spring 才会把模型中对应的属性添加到 session 中。所以当请求第二次的时候就会出现如下结果：</p>
<p>  <em>Hello world,Hello user210</em></p>
<p>  <em>user2</em></p>
<p>  <em>intValue</em></p>
<p>  <em>stringValue</em></p>
<p>  当 @ModelAttribute 标记在处理器方法参数上的时候，表示该参数的值将从模型或者 Session 中取对应名称的属性值，该名称可以通过 @ModelAttribute(“attributeName”) 来指定，若未指定，则使用参数类型的类名称（首字母小写）作为属性名称。</p>
<h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2><p>  用于将请求URL中的模板变量映射到功能处理方法的参数上，即取出url模板中的变量作为参数。若方法参数名称和需要绑定的uri template中变量名称不一致，需要在@PathVariable(“name”)指定uri template中的名称。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;  </div><div class="line">     <span class="meta">@RequestMapping</span>(value=<span class="string">"/user/&#123;userId&#125;/roles/&#123;roleId&#125;"</span>,method = RequestMethod.GET)  </div><div class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getLogin</span><span class="params">(@PathVariable(<span class="string">"userId"</span>)</span> String userId,  </span></div><div class="line">                            @<span class="title">PathVariable</span><span class="params">(<span class="string">"roleId"</span>)</span> String roleId)&#123;  </div><div class="line">         System.out.println(<span class="string">"User Id : "</span> + userId);  </div><div class="line">         System.out.println(<span class="string">"Role Id : "</span> + roleId);  </div><div class="line">         <span class="keyword">return</span> <span class="string">"hello"</span>;  </div><div class="line">     &#125;  </div><div class="line">     <span class="meta">@RequestMapping</span>(value=<span class="string">"/product/&#123;productId&#125;"</span>,method = RequestMethod.GET)  </div><div class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getProduct</span><span class="params">(@PathVariable(<span class="string">"productId"</span>)</span> String productId)</span>&#123;  </div><div class="line">           System.out.println(<span class="string">"Product Id : "</span> + productId);  </div><div class="line">           <span class="keyword">return</span> <span class="string">"hello"</span>;  </div><div class="line">     &#125;  </div><div class="line">     <span class="meta">@RequestMapping</span>(value=<span class="string">"/javabeat/&#123;regexp1:[a-z-]+&#125;"</span>,  </div><div class="line">           method = RequestMethod.GET)  </div><div class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getRegExp</span><span class="params">(@PathVariable(<span class="string">"regexp1"</span>)</span> String regexp1)</span>&#123;  </div><div class="line">           System.out.println(<span class="string">"URI Part 1 : "</span> + regexp1);  </div><div class="line">           <span class="keyword">return</span> <span class="string">"hello"</span>;  </div><div class="line">     &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><p>  @RequestParam主要用于在SpringMVC后台控制层获取参数，类似一种是request.getParameter(“name”)，它有三个常用参数：defaultValue = “0”, required = false, value = “isApp”；defaultValue 表示设置默认值，required 通过boolean设置是否是必须要传入的参数，value 值表示接受的传入的参数类型。</p>
<p>  A）常用来处理简单类型的绑定，通过Request.getParameter() 获取的String可直接转换为简单类型的情况（ String–&gt; 简单类型的转换操作由ConversionService配置的转换器来完成）；因为使用request.getParameter()方式获取参数，所以可以处理get 方式中queryString的值，也可以处理post方式中 body data的值；</p>
<p>  B）用来处理Content-Type: 为 application/x-www-form-urlencoded编码的内容，提交方式GET、POST；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>  </div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/pets"</span>)  </div><div class="line"><span class="meta">@SessionAttributes</span>(<span class="string">"pet"</span>)  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditPetForm</span> </span>&#123;  </div><div class="line">   <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)  </div><div class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">setupForm</span><span class="params">(@RequestParam(<span class="string">"petId"</span>)</span> <span class="keyword">int</span> petId, ModelMap model) </span>&#123;  </div><div class="line">       Pet pet = <span class="keyword">this</span>.clinic.loadPet(petId);  </div><div class="line">       model.addAttribute(<span class="string">"pet"</span>, pet);  </div><div class="line">   <span class="keyword">return</span> <span class="string">"petForm"</span>;  </div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h2><p>  该注解常用来处理Content-Type: 不是application/x-www-form-urlencoded编码的内容，例如application/json, application/xml等；</p>
<p>  它是通过使用 HandlerAdapter 配置的HttpMessageConverters来解析post data body，然后绑定到相应的bean上的。</p>
<p>  因为配置有FormHttpMessageConverter，所以也可以用来处理 application/x-www-form-urlencoded的内容，处理完的结果放在一个MultiValueMap<string, string="">里，这种情况在某些特殊需求下使用，详情查看FormHttpMessageConverter api;</string,></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/something"</span>, method = RequestMethod.PUT)  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(@RequestBody String body, Writer writer)</span> <span class="keyword">throws</span> IOException </span>&#123;  </div><div class="line">    writer.write(body);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h2><p>  作用：该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。</p>
<p>  使用时机：返回的数据不是html标签的页面，而是其他某种格式的数据时（如json、xml等）使用；</p>
<h2 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h2><p>  @RequestHeader 注解，可以把Request请求header部分的值绑定到方法的参数上。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">这是一个Request 的header部分：</div><div class="line"></div><div class="line">Host                    localhost:8080  </div><div class="line">Accept                  text/html,application/xhtml+xml,application/xml;q=0.9  </div><div class="line">Accept-Language         fr,en-gb;q=0.7,en;q=0.3  </div><div class="line">Accept-Encoding         gzip,deflate  </div><div class="line">Accept-Charset          ISO-8859-1,utf-8;q=0.7,*;q=0.7  </div><div class="line">Keep-Alive              300</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/displayHeaderInfo.do"</span>)  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayHeaderInfo</span><span class="params">(@RequestHeader(<span class="string">"Accept-Encoding"</span>)</span> String encoding,  </span></div><div class="line">                              @<span class="title">RequestHeader</span><span class="params">(<span class="string">"Keep-Alive"</span>)</span> <span class="keyword">long</span> keepAlive)  &#123;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  上面的代码，把request header部分的 Accept-Encoding的值，绑定到参数encoding上了， Keep-Alive header的值绑定到参数keepAlive上。</p>
<h2 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h2><p>  @CookieValue 可以把Request header中关于cookie的值绑定到方法的参数上。</p>
<p>  例如有如下Cookie值：</p>
<p>　　  JSESSIONID=415A4AC178C59DACE0B2C9CA727CDD84<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/displayHeaderInfo.do"</span>)  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayHeaderInfo</span><span class="params">(@CookieValue(<span class="string">"JSESSIONID"</span>)</span> String cookie)  </span>&#123;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  即把JSESSIONID的值绑定到参数cookie上。</p>
<h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h2><p>  相当于通用的注解，当不知道一些类归到哪个层时使用，但是不建议。</p>
<h2 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h2><p>  用于注解dao层，在daoImpl类上面注解。</p>
<h1 id="lt-context-component-scan-base-package-“”-gt-浅析"><a href="#lt-context-component-scan-base-package-“”-gt-浅析" class="headerlink" title="&lt; context:component-scan base-package = “” /&gt;浅析"></a>&lt; context:component-scan base-package = “” /&gt;浅析</h1><p>  component-scan 默认扫描的注解类型是 @Component，不过，在 @Component 语义基础上细化后的 @Repository, @Service 和 @Controller 也同样可以获得 component-scan 的青睐</p>
<p>  有了<code>&lt;context:component-scan&gt;</code>，另一个<code>&lt;context:annotation-config/&gt;</code>标签根本可以移除掉，因为已经被包含进去了</p>
<p>  另外<code>&lt;context:annotation-config/&gt;</code>还提供了两个子标签</p>
<p>  1.<code>&lt;context:include-filter&gt;</code> //指定扫描的路径</p>
<p>  2.<code>&lt;context:exclude-filter&gt;</code> //排除扫描的路径</p>
<p>  <code>&lt;context:component-scan&gt;</code> 有一个use-default-filters属性，属性默认为true,表示会扫描指定包下的全部的标有@Component的类，并注册成bean.也就是@Component的子注解@Service,@Repository等。</p>
<p>  这种扫描的粒度有点太大，如果你只想扫描指定包下面的Controller或其他内容则设置use-default-filters属性为false，表示不再按照scan指定的包扫描，而是按照<code>&lt;context:include-filter&gt;</code>指定的包扫描，示例：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.tan"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span> <span class="attr">expression</span>=<span class="string">"com.tan.*"</span>/&gt;</span>//注意后面要写.*</div><div class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  当没有设置use-default-filters属性或者属性为true时，表示基于base-package包下指定扫描的具体路径</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.tan"</span> &gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span> <span class="attr">expression</span>=<span class="string">".controller.*"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span> <span class="attr">expression</span>=<span class="string">".service.*"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span> <span class="attr">expression</span>=<span class="string">".dao.*"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  效果相当于：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.tan"</span> &gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span> <span class="attr">expression</span>=<span class="string">".model.*"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Spring MVC </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git常用命令]]></title>
      <url>/2017/09/05/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>记录一些Git命令</p>
<p>专用名词：</p>
<ul>
<li><p>Workspace: 工作区</p>
</li>
<li><p>Index/ Stage: 暂存区</p>
</li>
<li><p>Repository: 仓库区（本地仓库）</p>
</li>
<li><p>Remote: 远程仓库</p>
</li>
</ul>
<a id="more"></a>
<h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png" alt=""></p>
<h2 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h2><p><code>$ git init</code> # 在当前目录新建一个git代码库</p>
<p><code>$ git init [project-name]</code> # 新建一个目录，将其初始化为Git仓库</p>
<p><code>$ git clone [url]</code> # 下载一个项目和它的整个代码历史</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Git 的设置文件为<code>.gitconfig</code>, 它可以在用户主目录下（全局配置）， 也可以在项目目录下（项目配置）。</p>
<p><code>$ git config --list</code> # 显示当前的Git配置</p>
<p><code>$ git config -e [--global]</code> # 编辑Git配置文件</p>
<pre><code>$ git config [--global] user.name &quot;[name]&quot;

$ git config [--global] user.email &quot;[email address]&quot; # 设置提交代码时的用户信息
</code></pre><h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h2><p><code>$ git add [file1] [file2] ...</code> # 添加指定文件到暂存区</p>
<p><code>$ git add [dir]</code> # 添加指定目录到暂存区，包括子目录</p>
<p><code>$ git add .</code> # 添加当前目录所有文件到暂存区</p>
<p><code>$ git add -p</code> # 添加每个变化前，都会要求确认。 对于同一个文件的多处变化，可以多次提交</p>
<p><code>$ git rm [file1] [file2]</code> # 删除工作区文件，并且将这次删除放入暂存区</p>
<p><code>$ git rm --cached [file]</code> # 停止追踪指定文件，但该文件会保留在工作区</p>
<p><code>$ git mv [file-original] [file-renamed]</code> # 改名文件，并且将这个改名放入暂存区</p>
<h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><p><code>$ git commit -m [message]</code> # 提交暂存区到仓库区</p>
<p><code>$ git commit [file1] [file2] -m [message]</code> # 提交暂存区的指定文件到仓库区</p>
<p><code>$ git commit -a</code> # 提交工作区自上次 commit 之后的变化，直接到仓库区</p>
<p><code>$ git commit -v</code> # 提交时显示所有的 diff 信息</p>
<p><code>$ git commit -amend -m [message]</code> # 使用一次新的 commit ，替代上一次提交。如果代码没有任何新变化，则用来改写上一次 commit 的提交信息</p>
<p><code>$ git commit -amend [file1] [file2] ...</code> # 重做上一次 commit ，并包括指定文件的新变化</p>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p><code>$ git branch</code> # 列出所有本地分支</p>
<p><code>$ git branch -r</code> # 列出所有远程分支</p>
<p><code>$ git branch -a</code> # 列出所有本地分支和远程分支</p>
<p><code>$ git branch [branch-name]</code> # 新建一个分支，但依然停留在当前分支</p>
<p><code>$ git branch -b [branch]</code> # 新建一个分支，并切换到该分支</p>
<p><code>$ git branch [branch] [commit]</code> # 新建一个分支，指向指定commit</p>
<p><code>$ git branch --track [branch] [remote-branch]</code> # 新建一个分支，与指定的远程分支建立追踪关系</p>
<p><code>$ git checkout [branch-name]</code> # 切换到指定分支，并更新工作区</p>
<p><code>$ git checkout -</code> # 切换到上一个分支</p>
<p><code>$ git merge [branch]</code> # 合并指定分支到当前分支</p>
<p><code>$ git cherry-pick [commit]</code> # 选择一个commit，合并进当前分支</p>
<p><code>$ git branch -d [branch-name]</code> # 删除分支</p>
<pre><code>$ git push origin -delete [branch-name] 

$ git branch -dr [remote/branch] # 删除远程分支
</code></pre><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p><code>$ git tag</code> # 列出所有tag</p>
<p><code>$ git tag [tag]</code> # 新建一个tag在当前commit</p>
<p><code>$ git tag [tag] [commit]</code> # 新建一个tag在指定commit</p>
<p><code>$ git tag -d [tag]</code> # 删除本地tag</p>
<p><code>$ git push origin :refs/tags/[tagName]</code> # 删除远程tag</p>
<p><code>$ git show [tag]</code> # 查看tag信息</p>
<p><code>$ git push [remote] [tag]</code> # 提交指定tag</p>
<p><code>$ git push [remote] --tags</code> # 提交所有tag </p>
<p><code>$ git checkout -b [branch] [tag]</code> # 新建一个分支，指向某个tag</p>
<h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><p><code>$ git status</code> # 显示有变更的文件</p>
<p><code>$ git log</code> # 显示当前分支的版本历史</p>
<p><code>$ git log --stat</code> # 显示commit历史，以及每次commit发生变更的文件</p>
<p><code>$ git log -S [keyword]</code> # 搜索提交历史，根据关键词</p>
<p><code>$ git log [tag] HEAD --pretty=format:%s</code> # 显示某个commit之后的所有变动，每个commit占据一行</p>
<p><code>$ git log [tag] HEAD --grep feature</code> # 显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件</p>
<pre><code>$ git log --follow [file]

$ git whatchange [file] # 显示某个文件的版本历史，包括文件改名
</code></pre><p><code>$ git log -p [file]</code> # 显示指定文件相关的每一次diff</p>
<p><code>$ git log -5 --pretty --oneline</code> # 显示过去5次提交</p>
<p><code>$ git shortlog -sn</code> # 显示所有提交过的用户，按提交次数排序</p>
<p><code>$ git blame [file]</code> # 显示指定文件是什么人在什么时间修改过</p>
<p><code>$ git diff</code> # 显示暂存区和工作区的差异</p>
<p><code>$ git diff --cached [file]</code> # 显示暂存区和上一个commit的差异</p>
<p><code>$ git diff HEAD</code> # 显示工作区与当前分支最新commit之间的差异</p>
<p><code>$ git diff [first-branch]...[second-branch]</code> # 显示两次提交之间的差异</p>
<p><code>$ git diff --shortstat &quot;@{0 day ago}&quot;</code> # 显示今天你写了多少行代码</p>
<p><code>$ git show [commit]</code> # 显示某次提交的元数据和内容变化</p>
<p><code>$ git show --name-only [commit]</code> # 显示某次提交发生变化的文件</p>
<p><code>$ git show [commit]:[filename]</code> # 显示某次提交时，某个文件的内容</p>
<p><code>$ git reflog</code> # 显示当前分支的最近几次提交</p>
<h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><p><code>$ git fetch [remote]</code> # 下载远程仓库的所有变动</p>
<p><code>$ git remote -v</code> # 显示所有远程仓库</p>
<p><code>$ git remote show [remote]</code> # 显示某个远程仓库的信息</p>
<p><code>$ git remote add [shortname] [url]</code> # 增加一个新的远程仓库，并命名</p>
<p><code>$ git pull [remote] [branch]</code> # 取回远程仓库的变化，并与本地分支合并</p>
<p><code>$ git push [remote] [branch]</code> # 上传本地指定分支到远程仓库</p>
<p><code>$ git push [remote] --force</code> # 强行推送当前分支到远程仓库，即使有冲突</p>
<p><code>$ git push [remote] --all</code> # 推送所有分支到远程仓库</p>
<h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><p><code>$ git checkout [file]</code> # 恢复暂存区的指定文件到工作区</p>
<p><code>$ git checkout [commit] [file]</code> # 恢复某个commit的指定文件到暂存区和工作区</p>
<p><code>$ git checkout .</code> # 恢复暂存区的所有文件到工作区</p>
<p><code>$ git reset [file]</code> # 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</p>
<p><code>$ git reset --hard</code> # 重置暂存区与工作区，与上一次commit保持一致</p>
<p><code>$ git reset [commit]</code> # 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</p>
<p><code>$ git reset --hard [commit]</code> # 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</p>
<p><code>$ git reset --keep [commit]</code> # 重置当前HEAD为指定commit，但保持暂存区和工作区不变</p>
<p><code>$ git revert [commit]</code> # 新建一个commit，用来撤销指定commit。后者的所有变化都将被前者抵消，并且应用到当前分支。</p>
<pre><code>$ git stash

$ git stash pop # 暂时将未提交的变化移除，稍后再移入
</code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><code>$ git archive</code> # 生成一个可供发布的压缩包</p>
]]></content>
      
        <categories>
            
            <category> 常用命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于注解形式的Spring AOP实现]]></title>
      <url>/2017/08/14/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E5%BD%A2%E5%BC%8F%E7%9A%84Spring%20AOP%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> Spring MVC </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo常用命令笔记]]></title>
      <url>/2017/06/30/hexo/</url>
      <content type="html"><![CDATA[<h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><pre><code>npm install hexo -g #安装  
npm update hexo -g #升级  
hexo init #初始化
</code></pre><a id="more"></a>
<h2 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h2><p><code>hexo n &quot;我的博客&quot;</code> == <code>hexo new</code> “我的博客” #新建文章</p>
<p><code>hexo p</code> == <code>hexo publish</code></p>
<p><code>hexo g</code> == <code>hexo generate</code> #生成</p>
<p><code>hexo s</code> == <code>hexo server</code> #启动服务预览</p>
<p><code>hexo d</code> == <code>hexo deploy</code> #部署</p>
<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p><code>`
</code>hexo server` #Hexo 会监视文件变动并自动更新，您无须重启服务器。</p>
<p><code>hexo server -s</code> #静态模式</p>
<p><code>hexo server -p 5000</code> #更改端口</p>
<p><code>hexo server -i 192.168.1.1</code> #自定义 IP</p>
<p><code>hexo clean</code> #清除缓存 网页正常情况下可以忽略此条命令</p>
<p><code>hexo g</code> #生成静态网页</p>
<p><code>hexo d</code> #开始部署</p>
<h3 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3><p><code>hexo generate</code> #使用 Hexo 生成静态文件快速而且简单</p>
<p><code>hexo generate --watch</code> #监视文件变动</p>
<h3 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h3><pre><code>两个命令的作用是相同的
hexo generate --deploy
hexo deploy --generate
</code></pre><p><code>hexo deploy -g</code><br><code>hexo server -g</code></p>
<h2 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h2><p><code>hexo publish [layout] &lt;title&gt;</code></p>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p><code>hexo new &quot;postName&quot;</code> #新建文章</p>
<p><code>hexo new page &quot;pageName&quot;</code> #新建页面</p>
<p><code>hexo generate</code> #生成静态页面至public目录</p>
<p><code>hexo server</code> #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p>
<p><code>hexo deploy</code> #将.deploy目录部署到GitHub</p>
<p><code>hexo new [layout] &lt;title&gt;</code></p>
<p><code>hexo new photo &quot;My Gallery&quot;</code></p>
<p><code>hexo new &quot;Hello World&quot; --lang tw</code></p>
<h2 id="设置文章摘要"><a href="#设置文章摘要" class="headerlink" title="设置文章摘要"></a>设置文章摘要</h2><pre><code>以上是文章摘要 &lt;!--more--&gt; 以下是余下全文 
</code></pre><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p><code>hexo new page &lt;title&gt;</code></p>
<p><code>hexo new post &lt;title&gt;</code></p>
<p>###推送到服务器上</p>
<p><code>hexo n</code> #写文章</p>
<p><code>hexo g</code> #生成</p>
<p><code>hexo d</code> #部署 #可与hexo g合并为 hexo d -g</p>
]]></content>
      
        <categories>
            
            <category> 常用命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第一个问题]]></title>
      <url>/2017/06/29/Second/</url>
      <content type="html"><![CDATA[<h2 id="部署博客后的第一个问题"><a href="#部署博客后的第一个问题" class="headerlink" title="部署博客后的第一个问题"></a>部署博客后的第一个问题</h2><p>第一次通过 hexo + github 部署博客，并且绑定了个人域名。</p>
<p>但是在每次部署之后使用个人域名访问博客，就会出现 404 界面。</p>
<a id="more"></a>
<p>今天在搞定主题之后，直接上传就关了电脑，结果用手机访问博客时发现出现 404 界面。</p>
<p>爬起来开机去 github 的仓库中看了之后发现 在 setting 绑定的域名失效了，又变成了 github 的二级域名</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在百度了之后，绑定域名后DNS解析一定要修改，需要添加记录类型为 CNAME 的解析记录，其中记录值为 yourname.github.io</p>
<p>CNAME 是将自己的域名指向你的 github 域名</p>
<p>同时，在本地的 source 文件夹里创建 CNAME 文件 （注意：是CNAME 不是CHAME） 不带任何后缀</p>
<p>里面添加你的域名信息，如： xanxus.xin 不能含有 www 或者 http：//</p>
<p>然后<code>hexo d -g</code></p>
]]></content>
      
        <categories>
            
            <category> 测试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 侃侃 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[First]]></title>
      <url>/2017/06/29/First/</url>
      <content type="html"><![CDATA[<h2 id="第一篇文章"><a href="#第一篇文章" class="headerlink" title="第一篇文章"></a>第一篇文章</h2><p>从今天开始，咱也是有博客的人了，虽然目前能力低，没有什么有价值的文章哈哈哈哈哈哈哈哈哈哈哈</p>
<a id="more"></a>
<p>这个博客主要用来记录平时学习的心得体会，遇到的问题以及解决办法</p>
<p>虽然目前遇到的问题很简单，网上很容易找到答案。。。。。。。。</p>
<p>呃。。。。</p>
<p>也没啥要说的，希望这个博客能陪我到毕业甚至工作，也希望这个博客中能记录更多有价值的内容。</p>
]]></content>
      
        <categories>
            
            <category> 测试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 侃侃 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FirstTest]]></title>
      <url>/2017/06/29/FirstTest/</url>
      <content type="html"><![CDATA[<p>这是一篇测试用文章</p>
<p>第一次测试</p>
<p>第一次使用hexo搭建博客</p>
<a id="more"></a>
<p>#测试</p>
<p>这是一篇测试用文章</p>
<p>第一次测试</p>
<p>第一次使用hexo搭建博客</p>
<p>首次目标，上传至github，并成功。</p>
]]></content>
      
        
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/06/29/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
