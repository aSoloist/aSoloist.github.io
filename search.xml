<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[排序算法汇总]]></title>
      <url>/2018/01/28/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<p>数据结构的一部分重要内容便是排序算法，对于排序之后的数组可以采用快速的 binary search 算法。排序算法多种多样，按类别有插入类、选择类、交换类，还有一些其他的比如归并等等，对于数据量太多内存无法盛放的情况，则有外部排序。度量各种算法的标准主要有，1）稳定性，2）最好/坏情况下的时间复杂度，3）最好/坏情况下的空间复杂度。</p>
<p>接下来一一介绍以上的算法及其性能分析，以下排序方法均是对于长度为 nn 的序列进行排序。</p>
<h2 id="插入类排序"><a href="#插入类排序" class="headerlink" title="插入类排序"></a>插入类排序</h2><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><p>直接插入排序从待排序序列中选取一个数，选好一个位置将其插入到有序列表中，不断重复这个过程直到排序完成。</p>
<p><img src="http://owek6x58j.bkt.clouddn.com/Insertion-sort.gif" alt="Insert-sort"></p>
<p>上图展示了直接插入执行的过程，开始假设第 0 个元素有序，对于第 i=1…n−1 个元素，自 i−1 起往前搜索，查找插入位置，同时后移记录，找到合适位置插入即可，可见共进行 n−1 次插入，若数组有序只需进行 n−1  次比较即可，无需移动，所示复杂度为 O(n) ，若数组逆序，则需进行 (n−1)(n−1+1)2(n−1)(n−1+1)2 次比较与移动，复杂度为 O(n2) ,所以最好时间复杂度 O(n) ,最差时间复杂度 O(n2) ,平均时间复杂度为 O(n2) 。由于在原地排序，空间复杂度为 O(1) ，另外该算法没有改变排序前后相同关键字的顺序，所以是稳定的。</p>
<p>代码演示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="comment">// i = 1 -&gt; n-1</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(nums[i] &gt;= nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> pivot = nums[i], j = i - <span class="number">1</span>; <span class="comment">//  待插入</span></div><div class="line">        <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; nums[j] &gt; pivot)</div><div class="line">            nums[j + <span class="number">1</span>] = nums[j--];</div><div class="line">        nums[j + <span class="number">1</span>] = pivot; <span class="comment">//j &lt; 0代表插入到最掐面</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h3><p>由于排序过程中前边已经有序，所以可以对有序序列进行折半查找，相对直接插入来说，减少了比较次数，但是由于找到插入位置后扔需移动序列中的元素，所以时间复杂度仍为 O(n2) 。折半插入排序中，需要用 binary search 找到插入位置插入即可。若有相同元素，为了保证其稳定性，则找到相同 key 的最后一个，比如说现在序列为 [1,1,1,1,1,3,4,1] ,我们要插入最后一个 1 ，为了保持其稳定性，则需找到最后一个 1 。</p>
<p>这种带有相同元素的 binary search 的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> POS, <span class="keyword">int</span> key)</span> </span>&#123; </div><div class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> high = nums.length - <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(low &lt;= high) &#123;</div><div class="line">        <span class="keyword">int</span> mid = low + (high - low) / <span class="number">2</span>; <span class="comment">//防止溢出</span></div><div class="line">        <span class="keyword">if</span>(nums[mid] == key) &#123;</div><div class="line">            <span class="keyword">if</span>(POS == -<span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">if</span>(mid &gt; <span class="number">0</span> &amp;&amp; nums[mid - <span class="number">1</span>] == nums[mid])  high = mid - <span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">return</span> mid;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (POS == <span class="number">1</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(mid &lt; nums.length - <span class="number">1</span> &amp;&amp; nums[mid + <span class="number">1</span>] == nums[mid]) low = mid + <span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">return</span> mid;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">return</span> mid; <span class="comment">// POS == 0</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; key) &#123;</div><div class="line">            high = mid - <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            low = mid + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> high; <span class="comment">//在 high 之后的元素插入即可</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>直接插入排序在序列基本有序时，运算量接近线性，所以希尔排序先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。因此希尔排序可理解为增量插入排序，如下图所示：</p>
<p><img src="http://owek6x58j.bkt.clouddn.com/Shell-sort.gif" alt="Shell-sort"></p>
<p>需要注意的是需要时的增量序列中的任意元素没有除 1 之外的公因子，且最后一个增量必为 1 ，所以在排序中，先给出一个系列间隔，使得待排序数组按这个间隔进行排序，最后来一遍直接插入排序即可。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shell_sort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="comment">//给定增量序列,， 注意 做自动生成 则增量不能有除 1 以外的公因子</span></div><div class="line">        <span class="keyword">int</span>[] dks = &#123;<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> dk : dks ) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = dk; i &lt; nums.length; i++) &#123;</div><div class="line">                <span class="keyword">if</span>(nums[i] &gt; nums[i - dk]) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">int</span> pivot = nums[i],j = i - dk;</div><div class="line">                <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; nums[j] &gt; pivot) &#123;</div><div class="line">                    nums[j + dk] = nums[j];</div><div class="line">                    j -= dk;</div><div class="line">                &#125;</div><div class="line">                nums[j+dk] = pivot;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//System.out.println(Arrays.toString(nums));</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//    output :</span></div><div class="line"><span class="comment">//            dk=5    [13, 27, 49, 55, 4, 49, 38, 65, 97, 76]</span></div><div class="line"><span class="comment">//            dk=3    [13, 4, 49, 38, 27, 49, 55, 65, 97, 76]</span></div><div class="line"><span class="comment">//            dk=1    [4, 13, 27, 38, 49, 49, 55, 65, 76, 97]</span></div></pre></td></tr></table></figure>
<p>由于希尔排序的时间复杂度设计一些数学难题，当数组长度 n 在一定范围内，其平均复杂度为 O(n1.3) ，而且是一种不稳定排序。</p>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h3><p>选择排序是这样执行的，对于数组 L 中的元素 0…n−1 ，首先找到最小的元素，与 0 交换，找到次小的元素，与 1 交换，重复执行直到结束。如下图所示：</p>
<p><img src="http://owek6x58j.bkt.clouddn.com/Selection-sort.gif" alt="Selection-sort"></p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select_sort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; nums.length - <span class="number">1</span> ; i ++) &#123;</div><div class="line">        <span class="keyword">int</span> j = i, idx = j;</div><div class="line">        <span class="keyword">for</span>(; j &lt; nums.length; j ++) &#123;</div><div class="line">            <span class="keyword">if</span>(nums[j] &lt; nums[idx]) idx = j;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>( i != idx) &#123;</div><div class="line">            <span class="keyword">int</span> tmp = nums[i];</div><div class="line">            nums[i] = nums[idx];</div><div class="line">            nums[idx] = tmp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>选择排序的最好时间复杂度 O(n2) ,最差时间复杂度 O(n2) ,平均时间复杂度为 O(n2) 。由于在原地排序，空间复杂度为 O(1) ，另外注意算法是不稳定的。比如说序列 [5¯,8,5,2,7]，第一次 5¯↔2 ,变为 [2,8,5,5¯,7] ，之后会选择第一个5，这便导致了不稳定的发生。</p>
<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>堆（Heap）可以看做一颗完全二叉树，其定义如下：</p>
<ul>
<li>父节点的键值总是大于等于（或者小于等于，对应最大堆或最小堆）左右子节点的键值</li>
<li>每个节点的左右子树都是一个二叉堆</li>
</ul>
<p>以最大堆为例，输出堆顶的最大元素，使得剩余的 n−1 个元素重新构建一个最大堆，得到大值，反复执行，便能得到一个有序序列，这个过程便是堆排序。可见堆排序需要解决以下两个问题：</p>
<ul>
<li>将无序序列构造成一个最大堆</li>
<li>输出堆顶元素后，将剩余元素重新调整为一个最大堆</li>
</ul>
<p>给定待排序数组之后，将其理解为完全二叉树的形式，在该完全二叉树的最后一个非叶子节点开始进行调整，构建堆，之后取走最值元素，调整剩余元素构造的堆，直到完成。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// heap sort 最大堆，会生成从小到大的序列，因为每次取得一个最大的放在数组的最后</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>) <span class="keyword">return</span>; </div><div class="line">    <span class="keyword">int</span> len = nums.length; <span class="comment">//长度</span></div><div class="line">    <span class="comment">//最后一个非叶子节点  n/2 -&gt; 0 不断调整，使其成为一个最大堆</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len / <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i)</div><div class="line">        head_adjust(nums, i, len - <span class="number">1</span>);</div><div class="line">    <span class="comment">//顶堆元素与最后一个交换，这时只有新的堆顶不满足堆的定义，调整为最大堆即可，然后将堆顶与倒数第二个交换</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) &#123;</div><div class="line">        <span class="keyword">int</span> tmp = nums[i];</div><div class="line">        nums[i]= nums[<span class="number">0</span>];</div><div class="line">        nums[<span class="number">0</span>] = tmp;</div><div class="line">        head_adjust(nums, <span class="number">0</span>, i-<span class="number">1</span>);  <span class="comment">// 这里 i 之后的元素都已经排序好了 </span></div><div class="line">    &#125;</div><div class="line">    System.out.println(Arrays.toString(nums));</div><div class="line">&#125;</div><div class="line"><span class="comment">// 针对某个节点调整该堆,根节点从i = 0 开始，所以左右孩子节点分别为  2*i+1 、 2*i+2</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">head_adjust</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start ,<span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> cur = nums[start];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span> * start + <span class="number">1</span> ; i &lt;= end ; i *= <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">if</span>( i + <span class="number">1</span> &lt;= end &amp;&amp; nums[i + <span class="number">1</span>] &gt; nums[i]) i++;<span class="comment">// i 为左右孩子较大的</span></div><div class="line">        <span class="keyword">if</span>( cur &gt; nums[i] ) <span class="keyword">break</span>; <span class="comment">// 父节点大于左右孩子</span></div><div class="line">        nums[start] = nums[i]; <span class="comment">// 交换 父子节点</span></div><div class="line">        start = i; <span class="comment">// 调整交换过后的子节点</span></div><div class="line">    &#125;</div><div class="line">    nums[start] = cur;  <span class="comment">//将待调整节点的值赋到最后的正确位置上</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>堆排序一般适用于 n 值较大的情形，其时间主要耗费在构建堆时的元素的反复筛选上，其最好时间复杂度 O(nlogn) ,最差时间复杂度 O(nlogn) ,平均时间复杂度为 O(nlogn) 。由于在原地排序，空间复杂度为 O(1) ,另外注意 堆排序是不稳定的。虽然其时间复杂度比较低，但一般情况下效率不如快速，归并甚至希尔排序。</p>
<h2 id="交换类排序"><a href="#交换类排序" class="headerlink" title="交换类排序"></a>交换类排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>冒泡比较简单，它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p>
<p>冒泡排序算法的运作如下：</p>
<ol>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li>
<li>针对所有的元素重复以上的步骤，除了最后一个。</li>
<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>
</ol>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置一个 flag ，当某次没有发生交换，说明数组已经有序了</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = nums.length-<span class="number">1</span> ; i &gt; <span class="number">0</span> ; i --)&#123;</div><div class="line">        flag = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; i ; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(nums[j] &gt; nums[j+<span class="number">1</span>])&#123;</div><div class="line">                <span class="keyword">int</span> tmp = nums[j+<span class="number">1</span>];</div><div class="line">                nums[j+<span class="number">1</span>] = nums[j];</div><div class="line">                nums[j] = tmp;</div><div class="line">                flag = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (flag == <span class="keyword">false</span>) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>时间复杂度当有序时最好时间复杂度 O(n) ，最差时间复杂度 O(n2) ，平均时间复杂度为 O(n2) ，为一种稳定排序。</p>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序，又称划分交换排序，使用分治法策略来把一个序列分为两个子序列。</p>
<p>步骤为：</p>
<ol>
<li>从数列中挑出一个元素，称为”基准”（pivot），</li>
<li>重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任何一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li>
<li>递归地把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>
</ol>
<p>递归到最底部时，数列的大小是零或一，也就是已经排序好了。这个算法一定会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。如下图所示：</p>
<p><img src="http://owek6x58j.bkt.clouddn.com/Partition_example.svg" alt="Partition"></p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</div><div class="line">    partion(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//递归版本，随机选取pivot</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ramdom_partion</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> left ,<span class="keyword">int</span> right)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (left &gt;= right) <span class="keyword">return</span>;</div><div class="line">    <span class="comment">//产生 left -right 之间的随机数,并交换到 left 处作为pivot</span></div><div class="line">    <span class="keyword">int</span> idx = <span class="keyword">new</span> Random().nextInt(right-left) + left;</div><div class="line">    <span class="keyword">int</span> tmp = nums[left];</div><div class="line">    nums[left] = nums[idx];</div><div class="line">    nums[idx] = tmp;</div><div class="line">    <span class="keyword">int</span> pivot = nums[left];</div><div class="line">    <span class="keyword">int</span> l = left, r = right;</div><div class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</div><div class="line">        <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[r] &gt;= pivot) --r;</div><div class="line">        <span class="keyword">if</span> (l &lt; r) nums[l] = nums[r];</div><div class="line">        <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[l] &lt; pivot) ++l;</div><div class="line">        <span class="keyword">if</span> (l &lt; r) nums[r] = nums[l];</div><div class="line">    &#125;</div><div class="line">    nums[l] = pivot;</div><div class="line">    ramdom_partion(nums, left, l - <span class="number">1</span>);</div><div class="line">    ramdom_partion(nums, l + <span class="number">1</span>, right);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//递归版本，设置第一个为 pivot </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">partion</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> left ,<span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (left &gt;= right) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> l = left, r = right;</div><div class="line">    <span class="keyword">int</span> pivot = nums[left]; <span class="comment">// 设置 pivot</span></div><div class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</div><div class="line">        <span class="keyword">while</span> ( l &lt; r &amp;&amp; nums[r] &gt;= pivot) --r;</div><div class="line">        <span class="keyword">if</span> (l &lt; r ) nums[l] = nums[r];</div><div class="line">        <span class="keyword">while</span> ( l &lt; r &amp;&amp; nums[l] &lt; pivot ) ++l;</div><div class="line">        <span class="keyword">if</span> (l &lt; r ) nums[r] = nums[l];</div><div class="line">    &#125;</div><div class="line">    nums[l] = pivot;</div><div class="line">    partion(nums, left, l - <span class="number">1</span>);</div><div class="line">    partion(nums, l + <span class="number">1</span>, right);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意若数组逆序，则 quick sort 退化为 bubble sort ，所以选择 pivot 的时候最好随机选取，以上代码中给出了随机选取的方式，选好后换到第一个即可，最好时间复杂度 O(nlogn) ，最差时间复杂度 O(n2) ，即数组逆序的时候，但是随机选取 pivot 应该不会有这种状况，平均时间复杂度为 O(nlogn) ，空间复杂度因为递归调用，所以操作系统需要对参数进行压栈，当数组逆序是，达到最坏空间复杂度为 O(n) ，一般情况的平均空间复杂度为  O(logn) ，且注意算法是不稳定的。</p>
<p><strong>事实上，快速排序通常明显比其他 O(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地达成。</strong></p>
<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>归并排序的思想是这样的，将待排序序列看成是 n 个长度为 1 的有序序列，将相邻的有序表成对归并，得到 n/2 个长度为 2 的有序表；将这些有序序列再次归并，得到 n/4 个长度为 4 的有序序列；如此反复进行下去，最后得到一个长度为 n 的有序序列。如下图所示：</p>
<p><img src="http://owek6x58j.bkt.clouddn.com/Merge-sort.gif" alt="Merge-sort"></p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//merge sort 分三个函数，分别是调用、划分、合并</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</div><div class="line">    sort(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//划分区间</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (left &gt;= right) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</div><div class="line">    sort(nums, left, mid);</div><div class="line">    sort(nums, mid+<span class="number">1</span>, right);</div><div class="line">    merge(nums, left, mid, right);</div><div class="line">&#125;</div><div class="line"><span class="comment">//将 [left...mid] 与 [mid+1...right] 两个序列合并为新的有序序列   </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> [] nums,<span class="keyword">int</span> left,<span class="keyword">int</span> mid,<span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[right - left + <span class="number">1</span>];<span class="comment">//建立额外的空间</span></div><div class="line">    <span class="keyword">int</span> l = left, r = mid+<span class="number">1</span>, k=<span class="number">0</span>;      <span class="comment">//</span></div><div class="line">    <span class="keyword">while</span> (l &lt;= mid &amp;&amp; r &lt;= right) &#123;</div><div class="line">        <span class="keyword">if</span> (nums[l] &lt;= nums [r]) tmp[k++] = nums[l++];</div><div class="line">        <span class="keyword">else</span> tmp[k++] = nums[r++];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (l &lt;=  mid ) tmp[k++] = nums[l++];</div><div class="line">    <span class="keyword">while</span> (r &lt;= right) tmp[k++] = nums[r++];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tmp.length; i++)</div><div class="line">        nums[left + i] = tmp[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line">链表归并排序：</div><div class="line"><span class="comment">//归并排序算法,类似于数组的归并，思路基本完全一样</span></div><div class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) </div><div class="line">        <span class="keyword">return</span> head;</div><div class="line">    ListNode prev = <span class="keyword">null</span>;</div><div class="line">    ListNode slow = head, fast = head; </div><div class="line">    <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>)&#123;</div><div class="line">        prev = slow; <span class="comment">// 记录后半部分的头指针</span></div><div class="line">        slow = slow.next;</div><div class="line">        fast = fast.next.next;</div><div class="line">    &#125;</div><div class="line">    prev.next = <span class="keyword">null</span>; <span class="comment">// 断开连接</span></div><div class="line">    </div><div class="line">    ListNode h1 = sortList(head);</div><div class="line">    ListNode h2 = sortList(slow);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> merge(h1, h2);</div><div class="line">&#125;<span class="comment">//归并两个链表的过程</span></div><div class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">merge</span><span class="params">(ListNode h1, ListNode h2)</span> </span>&#123;</div><div class="line">    ListNode fake = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">    ListNode tail = fake;</div><div class="line">    <span class="keyword">while</span> (h1 != <span class="keyword">null</span> &amp;&amp; h2 != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (h1.val &gt; h2.val) &#123;</div><div class="line">            tail.next = h2;</div><div class="line">            h2 = h2.next;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            tail.next = h1;</div><div class="line">            h1 = h1.next;</div><div class="line">        &#125;</div><div class="line">        tail = tail.next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (h1 != <span class="keyword">null</span>) tail.next = h1;</div><div class="line">    <span class="keyword">if</span> (h2 != <span class="keyword">null</span>) tail.next = h2;</div><div class="line">    <span class="keyword">return</span> fake.next;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>归并排序最好最坏的时间复杂度均为 O(nlogn) ，空间复杂度也为 O(n) ，且最大的优点是在 O(nlogn) 中他是一种稳定的排序算法。</p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 将80端口请求转发到8080]]></title>
      <url>/2017/12/31/Ubuntu%20%E5%B0%8680%E7%AB%AF%E5%8F%A3%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E5%88%B08080/</url>
      <content type="html"><![CDATA[<p>在Ubuntu部署了tomcat，一般会使用非root用户启动，但域名绑定时会直接访问80端口号。众所周知，在unix下，非root用户不能监听1024以上的端口号，这个tomcat服务器就没办法绑定在80端口下。所以这里需要使用linux的端口转发机制，把到80端口的服务请求都转到8080端口上。</p>
<h2 id="安装-iptables-persistent"><a href="#安装-iptables-persistent" class="headerlink" title="安装 iptables-persistent"></a>安装 iptables-persistent</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install iptables-persistent</div></pre></td></tr></table></figure>
<h2 id="添加-80-端口跳转到-8080-规则"><a href="#添加-80-端口跳转到-8080-规则" class="headerlink" title="添加 80 端口跳转到 8080 规则"></a>添加 80 端口跳转到 8080 规则</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080</div></pre></td></tr></table></figure>
<h2 id="保存跳转规则"><a href="#保存跳转规则" class="headerlink" title="保存跳转规则"></a>保存跳转规则</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iptables-save</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Tomcat </tag>
            
            <tag> iptables </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一次奇怪的debug]]></title>
      <url>/2017/12/31/%E4%B8%80%E6%AC%A1%E5%A5%87%E6%80%AA%E7%9A%84debug/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第一次在服务器Tomcat上用war包部署项目，但是在部署新的war包时出现了一个奇怪的bug，访问页面时，第一次打开会显示404页面，然后按F5刷新则会显示正常页面。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>最初先清除了浏览器缓存，重新访问，并没有解决。</p>
<p>然后尝试了重新部署，仍没有解决问题。</p>
<p>ps:我部署的方式极其简单粗暴</p>
<ul>
<li><p>idea导出war包，用xshell传到服务器</p>
</li>
<li><p>stop Tomcat</p>
</li>
<li><p>删除Tomcat的webapps目录下之前的war包和文件夹</p>
</li>
<li><p>将war包拷贝到webapps目录下</p>
</li>
<li><p>start Tomcat</p>
</li>
</ul>
<p>后来查到一个办法，删除tomcat中work/Catalina目录下项目同名文件</p>
<p>不过我在目录下没找到同名文件，只有一个localhost（可能是我server.xml文件配置问题？）文件夹，删除之后，再访问，正常显示。</p>
]]></content>
      
        <categories>
            
            <category> Tomcat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tomcat </tag>
            
            <tag> war部署 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown 简单语法]]></title>
      <url>/2017/12/30/Markdown%20%E7%AE%80%E5%8D%95%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>Markdown是一种极简的『标记语言』，将文本转为HTML，本文介绍Markdown基本语法，内容很少，一行语法一行示例。</p>
<h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>星号与下划线都可以，单是斜体，双是粗体，符号可跨行，符号可加空格</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="strong">**一个人来到田纳西**</span></div><div class="line"><span class="strong">__毫无疑问__</span></div><div class="line">*我做的馅饼</div><div class="line">是全天下*</div><div class="line"><span class="emphasis">_最好吃的_</span></div></pre></td></tr></table></figure>
<p><strong>一个人来到田纳西</strong></p>
<p><strong>毫无疑问</strong></p>
<p><em>我做的馅饼<br>是全天下</em></p>
<p><em>最好吃的</em></p>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>三个或更多-_*，必须单独一行，可含空格</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="emphasis">___</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>翻译成html就是<code>&lt;blockquote&gt;&lt;/blockquote&gt;</code>，符号后的空格可不要</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;引用</div></pre></td></tr></table></figure>
<blockquote>
<p>引用</p>
</blockquote>
<p>内层符号前的空格必须要</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;引用</div><div class="line"> &gt;&gt;引用</div></pre></td></tr></table></figure>
<blockquote>
<p>引用</p>
<blockquote>
<p>引用</p>
</blockquote>
</blockquote>
<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p> 符号之后的空格不能少，-+*效果一样，但不能混合使用，因混合是嵌套列表，内容可超长</p>
 <figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">- </span>无序列表</div><div class="line"><span class="bullet">- </span>无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！</div></pre></td></tr></table></figure>
<ul>
<li>无序列表</li>
<li>无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！</li>
</ul>
<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>数字不能省略但可无序，点号之后的空格不能少</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1. </span>有序列表</div><div class="line"><span class="bullet">2. </span>有序列表</div><div class="line"><span class="bullet">3. </span>有序列表</div><div class="line"><span class="bullet">8. </span>有序列表</div></pre></td></tr></table></figure>
<ol>
<li>有序列表</li>
<li>有序列表</li>
<li>有序列表</li>
<li>有序列表</li>
</ol>
<h2 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h2><p>-+*可循环使用，但符号之后的空格不能少，符号之前的空格至少为两个</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">- </span>嵌套列表</div><div class="line">  + 嵌套列表</div><div class="line">  + 嵌套列表</div><div class="line"><span class="code">    - 嵌套列表</span></div><div class="line"><span class="code">      * 嵌套列表</span></div><div class="line"><span class="bullet">- </span>嵌套列表</div></pre></td></tr></table></figure>
<ul>
<li>嵌套列表<ul>
<li>嵌套列表</li>
<li>嵌套列表<ul>
<li>嵌套列表<ul>
<li>嵌套列表</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>嵌套列表</li>
</ul>
<h2 id="文字超链：Inline方式"><a href="#文字超链：Inline方式" class="headerlink" title="文字超链：Inline方式"></a>文字超链：Inline方式</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">百度</span>](<span class="link">http://www.baidu.com "百度"</span>)</div></pre></td></tr></table></figure>
<p><a href="http://www.baidu.com" title="百度" target="_blank" rel="external">百度</a></p>
<h2 id="图片超链"><a href="#图片超链" class="headerlink" title="图片超链"></a>图片超链</h2><p>多个感叹号，Tooltips可省略，要设置大小只能借助HTML标记</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="string">GitHub Mark</span>](<span class="link">http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png "GitHub Mark"</span>)</div></pre></td></tr></table></figure>
<p><img src="http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png" alt="GitHub Mark" title="GitHub Mark"></p>
<h2 id="索引超链：Reference方式"><a href="#索引超链：Reference方式" class="headerlink" title="索引超链：Reference方式"></a>索引超链：Reference方式</h2><p>索引，[]内可以是任意字符</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">![<span class="string">GitHub Octocat</span>][<span class="symbol">1</span>]</div><div class="line"></div><div class="line">[<span class="symbol">1</span>]:<span class="link">http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png</span></div></pre></td></tr></table></figure>
<p><img src="http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png" alt="GitHub Octocat"></p>
<h2 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">http:</span>//<span class="attr">baidu.com</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p><a href="http://baidu.com" target="_blank" rel="external">http://baidu.com</a></p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!-- 注释 --&gt;</span></span></div></pre></td></tr></table></figure>
<!-- 注释 -->
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>文本中可直接用html标签，但是要前后加上空行。</p>
]]></content>
      
        <categories>
            
            <category> Markdown </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 常用命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu下常用指令]]></title>
      <url>/2017/12/30/Ubuntu%E4%B8%8B%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近租了个服务器，用的是ubuntu17.04版本系统，所以搜集了一部分常用的指令，方便以后查阅。</p>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h4><p>–help简单的帮助</p>
<p>help command 详细的帮助</p>
<p>man command 最详细的帮助</p>
<h4 id="ls-命令（显示当前目录文件）"><a href="#ls-命令（显示当前目录文件）" class="headerlink" title="ls 命令（显示当前目录文件）"></a>ls 命令（显示当前目录文件）</h4><p>-a 显示全部文件与文件夹，包括隐藏的文件或文件夹</p>
<p>-l 显示详细的文件信息，包括权限，用户，用户组等</p>
<p>-h  将文件大小以方便阅读的形式表示出来，配合-l参数使用，常有奇效</p>
<h4 id="cd-进入其他目录"><a href="#cd-进入其他目录" class="headerlink" title="cd 进入其他目录"></a>cd 进入其他目录</h4><p>cd /etc/  从绝对路径进入etc文件夹</p>
<p>cd etc/  从当前目录进入etc文件夹</p>
<p>cd ..  返回当前目录的上一级目录</p>
<p>cd -  返回上一次所在的目录</p>
<p>cd 或 cd ~  返回属主目录</p>
<h4 id="tab键-命令补全"><a href="#tab键-命令补全" class="headerlink" title="tab键 命令补全"></a>tab键 命令补全</h4><p>tab键常用于在你输入了命令的前几个单词时，按下tab键进行补全，如果有多个前面部分相同的命令，则按两次tab键</p>
<h4 id="alias-别名"><a href="#alias-别名" class="headerlink" title="alias 别名"></a>alias 别名</h4><p>alias ubuntu=”ls” 用于为一个命令取别名，当你输入ubuntu时等价输入了ls命令</p>
<h4 id="apt-get-下载"><a href="#apt-get-下载" class="headerlink" title="apt-get 下载"></a>apt-get 下载</h4><p>最常用的指令，用于从软件源获取需要的软件</p>
<p>常用参数：</p>
<p>update  与你的软件源（在/etc/apt/sources.list中列出）更新软件包列表，换源后需要执行</p>
<p>upgrade  根据update得到的源软件库与本地已经安装的对比，如果需要升级就全部升级</p>
<p>install  安装软件包，可以使用tab键补全软件包的名字</p>
<p>remove  卸载软件包</p>
<p>purge  卸载软件包，同时删除该软件的配置文件</p>
<p>source  从源里下载软件包的源码到当前目录并解压（除非指定-download-only参数）</p>
<p>check  用来（自动）修复已安装软件包之间的依赖关系</p>
<p>clean  清除/var/cache/apt/archives/包括其子目录partial/下的所有软件包缓存</p>
<p>autoclean  删除旧版本的软件包缓存</p>
<p>download  下载软件包的二进制包到当前目录</p>
<h4 id="more、less-分页显示文本文件内容"><a href="#more、less-分页显示文本文件内容" class="headerlink" title="more、less  分页显示文本文件内容"></a>more、less  分页显示文本文件内容</h4><h4 id="head、tail-显示文件头、尾内容"><a href="#head、tail-显示文件头、尾内容" class="headerlink" title="head、tail    显示文件头、尾内容"></a>head、tail    显示文件头、尾内容</h4><h4 id="管道符-连接多个命令"><a href="#管道符-连接多个命令" class="headerlink" title="|  管道符 连接多个命令"></a>|  管道符 连接多个命令</h4><p>将一个命令的标准输出作为另一个命令的标准输入。也就是把几个命令组合起来使用，后一个命令除以前一个命令的结果。</p>
<p>例：grep -r “close” /home/* | more       在home目录下所有文件中查找，包括close的文件，并分页输出。</p>
<h4 id="grep-字符串-在文本文件中查找某个字符串"><a href="#grep-字符串-在文本文件中查找某个字符串" class="headerlink" title="grep 字符串  在文本文件中查找某个字符串"></a>grep 字符串  在文本文件中查找某个字符串</h4><h4 id="sudo-管理员权限"><a href="#sudo-管理员权限" class="headerlink" title="sudo 管理员权限"></a>sudo 管理员权限</h4><p>sudo  我们主要用来临时提升权限，主要用以管理员(超级用户)的权限来运行命令，当需要修改当前登录用户力所不能及的文件/目录时需要用sudo</p>
<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="find-起始目录-name-查找的文件或目录"><a href="#find-起始目录-name-查找的文件或目录" class="headerlink" title="find 起始目录 -name 查找的文件或目录"></a>find 起始目录 -name 查找的文件或目录</h4><h4 id="mkdir-目录名-创建一个目录"><a href="#mkdir-目录名-创建一个目录" class="headerlink" title="mkdir 目录名  创建一个目录"></a>mkdir 目录名  创建一个目录</h4><p>-p  如果给出的路径中父目录不存在,则同时创建父目录</p>
<h4 id="touch-文件名-创建一个或多个文件"><a href="#touch-文件名-创建一个或多个文件" class="headerlink" title="touch 文件名 ..  创建一个或多个文件"></a>touch 文件名 ..  创建一个或多个文件</h4><h4 id="rmdir-空目录名-删除一个空目录"><a href="#rmdir-空目录名-删除一个空目录" class="headerlink" title="rmdir 空目录名  删除一个空目录"></a>rmdir 空目录名  删除一个空目录</h4><p>等同 rm -f</p>
<h4 id="rm-文件名-删除一个或多个文件"><a href="#rm-文件名-删除一个或多个文件" class="headerlink" title="rm 文件名 ..  删除一个或多个文件"></a>rm 文件名 ..  删除一个或多个文件</h4><p>最常用参数:</p>
<p>-f  不提示不存在的文件,直接跳过</p>
<p>-i  每个删除动作都提示</p>
<p>-I  删除多个文件(多于3个时)或者递归式删除(对于非空目录)提示一次</p>
<p>-r和-R  递归式删除该目录下的一切东东</p>
<p>-v  显示每个文件的删除动作(个人总是推荐使用此参数,明白你在做什么)</p>
<p><strong>注意：慎用</strong></p>
<p>rm -rf 非空目录名  删除一个非空目录下的一切</p>
<h4 id="mv-源文件或目录-目标文件或目录"><a href="#mv-源文件或目录-目标文件或目录" class="headerlink" title="mv 源文件或目录 目标文件或目录"></a>mv 源文件或目录 目标文件或目录</h4><p>根据mv命令中的第二个参数类型（是目标文件还是目标目录），mv命令将文件重命名或将其移至一个新的目录中。当第二个参数类型是文件时，mv命令完成文件重命名，此时，源文件只能有一个（也可以是源目录名），它将所给的源文件或目录重命名为给定的目标文件名。当第二个参数是已存在的目录名称时，源文件或目录参数可以有多个，mv命令将各参数指定的源文件均移至目标目录中。</p>
<p><strong>最常用参数:</strong></p>
<p>-b  为每个已经存在的目的文件做个备份(防止覆盖)</p>
<p>-f  不提示是否覆盖已经存在的目的文件</p>
<p>-i  与-f参数相反</p>
<p>-u  仅当源文件比目的文件更新或者目的文件不存在时候才移动</p>
<p>-v  显示移动文件的进度(个人总是推荐使用此参数,明白你在做什么)</p>
<h4 id="cat-文件名"><a href="#cat-文件名" class="headerlink" title="cat 文件名 .."></a>cat 文件名 ..</h4><p>把(一个或多个)文件内容(连接)显示到标准输出，当文本文件很小，而且你只是想看下，并不打算用gedit或者vim之类编辑器编辑的时候，可以使用。</p>
<h4 id="find-路经-name"><a href="#find-路经-name" class="headerlink" title="find 路经 -name"></a>find 路经 -name</h4><p>“字符串”查找路经所在范围内满足字符串匹配的文件和目录</p>
<p><strong>最常用参数:</strong></p>
<p>-v  列出当前正在执行的步骤</p>
<p>-R  递归式,即改变非空目录下的一切为指定权限</p>
<h4 id="cp-文件名或目录名-拷贝文件或目录"><a href="#cp-文件名或目录名-拷贝文件或目录" class="headerlink" title="cp 文件名或目录名  拷贝文件或目录"></a>cp 文件名或目录名  拷贝文件或目录</h4><p><strong>最常用参数：</strong></p>
<p>-b  为每个已经存在的目的文件作个备份</p>
<p>-d  遇到软链接时不拷贝软链接所指向的文件;拷贝时保留links属性(链接数)</p>
<p>-p  保留文件的访问权限,所有者,和时间戳</p>
<p>-R和-r  递归式拷贝(cp过程遇到非空目录才有效),即拷贝目录,子目录,子目录的子目录…..</p>
<p>-a  作用同-dpR</p>
<p>-s  并不真的做拷贝,而只是为每个文件作软链接(符号链接)</p>
<p>-u  仅当源文件比目的文件更新或者目的文件不存在时候才拷贝</p>
<h4 id="ln-源文件或目录-目标文件或目录-为文件建立连接"><a href="#ln-源文件或目录-目标文件或目录-为文件建立连接" class="headerlink" title="ln 源文件或目录 目标文件或目录  为文件建立连接"></a>ln 源文件或目录 目标文件或目录  为文件建立连接</h4><p>linux的链接分为两种:硬链接和软链接，ln默认建立硬链接，硬链接的意思是一个档案可以有多个名称，而软链接的方式则是产生一个特殊的档案，该档案的内容是指向另一个档案的位置。硬链接是存在同一个文件系统中，而软链接却可以跨越不同的文件系统</p>
<p><strong>注意：</strong></p>
<p>ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化</p>
<p><strong>最常用参数:</strong></p>
<p>-s  建立软链接(符号链接,可以理解为win下的快捷方式)</p>
<p>-f  如果要建立的链接名已经存在,则删除之</p>
<p>-b  删除，覆盖以前建立的链接</p>
<p>-v 显示详细的处理过程</p>
<h4 id="tar-打包与解包"><a href="#tar-打包与解包" class="headerlink" title="tar 打包与解包"></a>tar 打包与解包</h4><p>和ps命令一样,tar一般不用单个参数,而是多个参数的组合,记住参数x是解压(extract),c是创建包(create)即可</p>
<p><strong>最常用参数:</strong></p>
<p>-xvf  详细列出解包的步骤</p>
<p>-cvf  详细列出打包的步骤</p>
<p>-j  用来说明这是个tar.bz2包,例如tar -xjvf myfile.tar.bz2</p>
<p>-t  列出包中的文件列表</p>
<p><strong>打包时常追加的参数:</strong></p>
<p>-r  追加到压缩包中</p>
<p>-u  只把比包中更新的文件追加进去</p>
<p>-h  不把符号链接添加到包中,而是添加此符号链接指向的文件</p>
<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><h4 id="etc-passwd-存储用户账号"><a href="#etc-passwd-存储用户账号" class="headerlink" title="/etc/passwd  存储用户账号"></a>/etc/passwd  存储用户账号</h4><h4 id="etc-group-存储组账号"><a href="#etc-group-存储组账号" class="headerlink" title="/etc/group  存储组账号"></a>/etc/group  存储组账号</h4><h4 id="etc-shadow-存储用户账号的密码"><a href="#etc-shadow-存储用户账号的密码" class="headerlink" title="/etc/shadow  存储用户账号的密码"></a>/etc/shadow  存储用户账号的密码</h4><h4 id="etc-gshadow-存储用户组账号的密码"><a href="#etc-gshadow-存储用户组账号的密码" class="headerlink" title="/etc/gshadow  存储用户组账号的密码"></a>/etc/gshadow  存储用户组账号的密码</h4><h4 id="etc-profile-系统环境变量"><a href="#etc-profile-系统环境变量" class="headerlink" title="/etc/profile  系统环境变量"></a>/etc/profile  系统环境变量</h4><h4 id="bash-profile-用户环境变量"><a href="#bash-profile-用户环境变量" class="headerlink" title="bash_profile  用户环境变量"></a>bash_profile  用户环境变量</h4><h4 id="bashrc-用户环境变量"><a href="#bashrc-用户环境变量" class="headerlink" title=".bashrc  用户环境变量"></a>.bashrc  用户环境变量</h4><h4 id="su-user-切换用户，加载配置文件-bashrc"><a href="#su-user-切换用户，加载配置文件-bashrc" class="headerlink" title="su user  切换用户，加载配置文件.bashrc"></a>su user  切换用户，加载配置文件.bashrc</h4><h4 id="su-user-切换用户，加载配置文件-etc-profile-，加载bash-profile"><a href="#su-user-切换用户，加载配置文件-etc-profile-，加载bash-profile" class="headerlink" title="su - user  切换用户，加载配置文件/etc/profile ，加载bash_profile"></a>su - user  切换用户，加载配置文件/etc/profile ，加载bash_profile</h4><h4 id="useradd-创建一个新的用户"><a href="#useradd-创建一个新的用户" class="headerlink" title="useradd  创建一个新的用户"></a>useradd  创建一个新的用户</h4><h4 id="groupadd-组名-创建一个新的组"><a href="#groupadd-组名-创建一个新的组" class="headerlink" title="groupadd 组名  创建一个新的组"></a>groupadd 组名  创建一个新的组</h4><h4 id="passwd-用户名-为用户创建密码"><a href="#passwd-用户名-为用户创建密码" class="headerlink" title="passwd 用户名 为用户创建密码"></a>passwd 用户名 为用户创建密码</h4><p><strong>最常用参数：</strong></p>
<p>-d 用户名  删除用户密码也能登陆</p>
<p>-S 用户名  查询用户状态</p>
<h4 id="usermod-l-新用户名-老用户名-为用户改名"><a href="#usermod-l-新用户名-老用户名-为用户改名" class="headerlink" title="usermod -l 新用户名 老用户名  为用户改名"></a>usermod -l 新用户名 老用户名  为用户改名</h4><h4 id="userdel-–r-用户名-删除用户一切"><a href="#userdel-–r-用户名-删除用户一切" class="headerlink" title="userdel –r 用户名  删除用户一切"></a>userdel –r 用户名  删除用户一切</h4><h4 id="chown-R-owner-group-File-Directory-更改文件的用户及用户组"><a href="#chown-R-owner-group-File-Directory-更改文件的用户及用户组" class="headerlink" title="chown [-R] owner[:group] {File|Directory} 更改文件的用户及用户组"></a>chown [-R] owner[:group] {File|Directory} 更改文件的用户及用户组</h4><p>chown root:root filename</p>
<p>如果需要将某一目录下的所有文件都改变其拥有者，可以使用-R参数</p>
<h4 id="chgrp-group-File-Directory-更改文件所属组群"><a href="#chgrp-group-File-Directory-更改文件所属组群" class="headerlink" title="chgrp [group] {File|Directory} 更改文件所属组群"></a>chgrp [group] {File|Directory} 更改文件所属组群</h4><p>chgrp root filename</p>
<p>chgrp </p>
<h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><p>三种基本权限</p>
<p>R 读 数值表示为4</p>
<p>W 写 数值表示为2</p>
<p>X 可执行 数值表示为1</p>
<p>例如：</p>
<p>-rw-rw-r–一共十个字符，分成四段。</p>
<p>第一个字符“-”表示普通文件；这个位置还可能会出现“l”链接；“d”表示目录</p>
<p>第二三四个字符“rw-”表示当前所属用户的权限，所以用数值表示为4+2=6</p>
<p>第五六七个字符“rw-”表示当前所属组的权限，所以用数值表示为4+2=6</p>
<p>第八九十个字符“r–”表示其他用户权限，所以用数值表示为2</p>
<h4 id="更改权限"><a href="#更改权限" class="headerlink" title="更改权限"></a>更改权限</h4><p>sudo chmod [u所属用户  g所属组  o其他用户  a所有用户] [+增加权限  -减少权限] [r  w  x] 目录名 </p>
<p>例如：有一个文件filename，权限为“-rw-r—-x”，将权限值改为“-rwxrw-r-x”，用数值表示为765</p>
<p>sudo chmod u+x g+w o+r filename</p>
<p>上面的例子可以用数值表示</p>
<p>sudo chmod 765 filename</p>
<h3 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h3><h4 id="ps，top-列出当前命令的执行状态"><a href="#ps，top-列出当前命令的执行状态" class="headerlink" title="ps，top 列出当前命令的执行状态"></a>ps，top 列出当前命令的执行状态</h4><p>ps为静态，top为动态(top时’q’退出)</p>
<p><strong>最常用参数(ps多用参数集合,而不是单个参数,并且配合grep使用):</strong></p>
<p>-ef  以标准语法列出当前所有进程状态,例如ps -ef | grep eva  列出eva的进程状态</p>
<p>aux  以BSD语法列出</p>
<p>-ejH  列出进程树</p>
<p>-eLf  同时列出线程状态</p>
<h4 id="kill-进程号-PID-杀死一个进程"><a href="#kill-进程号-PID-杀死一个进程" class="headerlink" title="kill 进程号(PID)  杀死一个进程"></a>kill 进程号(PID)  杀死一个进程</h4><h4 id="kill-9-进程号-强制杀死一个进程"><a href="#kill-9-进程号-强制杀死一个进程" class="headerlink" title="kill -9 进程号  强制杀死一个进程"></a>kill -9 进程号  强制杀死一个进程</h4><h4 id="stat-显示指定文件的详细信息，比ls更详细"><a href="#stat-显示指定文件的详细信息，比ls更详细" class="headerlink" title="stat  显示指定文件的详细信息，比ls更详细"></a>stat  显示指定文件的详细信息，比ls更详细</h4><h4 id="who-显示在线登陆用户"><a href="#who-显示在线登陆用户" class="headerlink" title="who  显示在线登陆用户"></a>who  显示在线登陆用户</h4><h4 id="whoami-显示当前操作用户"><a href="#whoami-显示当前操作用户" class="headerlink" title="whoami  显示当前操作用户"></a>whoami  显示当前操作用户</h4><h4 id="hostname-显示主机名"><a href="#hostname-显示主机名" class="headerlink" title="hostname  显示主机名"></a>hostname  显示主机名</h4><h4 id="uname-显示系统信息"><a href="#uname-显示系统信息" class="headerlink" title="uname  显示系统信息"></a>uname  显示系统信息</h4><h4 id="du-查看目录大小-du-h-home带有单位显示目录信息"><a href="#du-查看目录大小-du-h-home带有单位显示目录信息" class="headerlink" title="du  查看目录大小 du -h /home带有单位显示目录信息"></a>du  查看目录大小 du -h /home带有单位显示目录信息</h4><h4 id="df-查看磁盘大小-df-h-带有单位显示磁盘信息"><a href="#df-查看磁盘大小-df-h-带有单位显示磁盘信息" class="headerlink" title="df  查看磁盘大小 df -h 带有单位显示磁盘信息"></a>df  查看磁盘大小 df -h 带有单位显示磁盘信息</h4><h4 id="ifconfig-查看网络情况"><a href="#ifconfig-查看网络情况" class="headerlink" title="ifconfig  查看网络情况"></a>ifconfig  查看网络情况</h4><h4 id="ping-测试网络连通"><a href="#ping-测试网络连通" class="headerlink" title="ping  测试网络连通"></a>ping  测试网络连通</h4><h4 id="netstat-显示网络状态信息"><a href="#netstat-显示网络状态信息" class="headerlink" title="netstat  显示网络状态信息"></a>netstat  显示网络状态信息</h4><p><strong>常用参数</strong></p>
<p>-a  (all)显示所有选项，默认不显示LISTEN相关</p>
<p>-t  (tcp)仅显示tcp相关选项</p>
<p>-u  (udp)仅显示udp相关选项</p>
<p>-n  拒绝显示别名，能显示数字的全部转化成数字。</p>
<p>-l  仅列出有在 Listen (监听) 的服務状态</p>
<p>-p  显示建立相关链接的程序名</p>
<p>-r  显示路由信息，路由表</p>
<p>-e  显示扩展信息，例如uid等</p>
<p>-s  按各个协议进行统计</p>
<p>-c  每隔一个固定时间，执行该netstat命令。</p>
<p><strong>注意：</strong></p>
<p>LISTEN和LISTENING的状态只有用-a或者-l才能看到</p>
<h4 id="man-功能很多，简单的可以查看命令帮助，如：man-ls"><a href="#man-功能很多，简单的可以查看命令帮助，如：man-ls" class="headerlink" title="man  功能很多，简单的可以查看命令帮助，如：man ls"></a>man  功能很多，简单的可以查看命令帮助，如：man ls</h4><h4 id="ufw-防火墙"><a href="#ufw-防火墙" class="headerlink" title="ufw  防火墙"></a>ufw  防火墙</h4><p>常用参数：</p>
<p>enable  启动防火墙</p>
<p>status  查看防火墙状态</p>
<p>allow 端口号或服务名  开放指定端口号</p>
<p>allow 22/tcp  只打开使用tcp/ip协议的22端口</p>
<p>disable  关闭防火墙</p>
<p>allow from 192.168.254.254  允许某特定IP</p>
<p>delete allow  删除已添加的规则</p>
<h4 id="clear-清屏"><a href="#clear-清屏" class="headerlink" title="clear  清屏"></a>clear  清屏</h4>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> 常用命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java 数据类型]]></title>
      <url>/2017/11/18/java%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>Java 的数据类型分为基本数据类型和引用数据类型。</p>
<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>基本数据类型有四类八种，分别是：</p>
<p><strong>byte</strong>：Java中最小的数据类型，在内存中占8位(bit)，即1个字节，取值范围-128~127，默认值0、</p>
<p><strong>short</strong>：短整型，在内存中占16位，即2个字节，取值范围-32768~32717，默认值0、</p>
<p><strong>int</strong>：整型，用于存储整数，在内在中占32位，即4个字节，取值范围-2147483648~2147483647，默认值0、</p>
<p><strong>long</strong>：长整型，在内存中占64位，即8个字节-2^63~2^63-1，默认值0L；</p>
<p><strong>float</strong>：浮点型，在内存中占32位，即4个字节，用于存储带小数点的数字（与double的区别在于float类型有效小数点只有6~7位），默认值0、</p>
<p><strong>double</strong>：双精度浮点型，用于存储带有小数点的数字，在内存中占64位，即8个字节，默认值0；</p>
<p><strong>boolean</strong>：布尔类型，占1个字节，用于判断真或假（仅有两个值，即true、false），默认值false；</p>
<p><strong>char</strong>：字符型，用于存储单个字符，占16位，即2个字节，取值范围0~65535，默认值为空。</p>
<p>这种类型通过如 <code>int a = 3</code> 的形式定义，称为自动变量。值得注意的是，自动变量存的是字面值，不是类的引用，这里的 a 是一个指向 int 类型的引用，指向3这个字面值。这些字面值大小可知，生存期可知，因此会保存在栈中。</p>
<p>另外，栈有一个很重要的特殊性，即数据可以共享。如果我们同时定义<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">3</span>; </div><div class="line"><span class="keyword">int</span> b = <span class="number">3</span>;</div></pre></td></tr></table></figure></p>
<p>编译器先处理 <code>int a = 3</code> ；会在栈中创建一个变量a的引用，然后查找有无字面值为3的地址，如果没有，则开辟一个存放3字面值的地址，然后将a指向3的地址。然后处理 <code>int b = 3</code> ；创建b的引用后，由于栈中已经有3的字面值，便将b直接指向3的地址。因此，a与b同时指向3。</p>
<p>但是要注意，通过引用修改字面值不会导致另一个指向此字面值的引用的值改变，在字面值被修改时，编译器会重新搜索栈中是否存在被修改后的字面值，如果不存在，则开辟一片空间存放新字面值的地址，如果存在，则直接将引用指向这个地址。</p>
<h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><p>除基本数据类型之外的数据类型都是引用数据类型，其中 String 类是特殊的引用数据类型，这些类型的数据全部存放在堆中，Java 通过 new 关键字来显式告诉编译器，在运行时根据需要动态创建，比较灵活，但是会占用更多的时间。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object o = <span class="keyword">new</span> Object();</div></pre></td></tr></table></figure>
<p>引用数据类型（除String）在创建时可以同时创建一个引用变量，该变量是基本数据类型，存储在栈中，指向引用数据类型在堆中的地址。如果通过一个引用变量修改引用数据类型，则其他指向这个对象的引用也会即刻反映出这些改变。</p>
<p>在方法中，调用时传入的实际参数，如果是基本数据类型，则会传入字面值，而如果是引用数据类型，则传入的是该对象的地址。因此，在被调用方法中对引用数据类型进行操作，调用方法中的引用变量所对应的该对象也会相应变化。</p>
<h2 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a>String 类</h2><p>String 类是一种特殊的引用数据类型。可以使用 <code>String str = new String(&quot;asd&quot;);</code> 的方式来创建，也可以使用 <code>String str = &quot;asd&quot;;</code> 的方式来创建。一个字符串对象创建后他的值不能改变，如果改变字符串的值，编译器将会创建一个新的字符串对象，然后把地址指向新地址。</p>
<p>常量池(constant pool)指的是在编译期被确定，并被保存在已编译的.class文件中的一些数据。它包括了关于类、方法、接口等中的常量，也包括字符串常量。因此，对于 <code>String str = &quot;asd&quot;;</code> ，将会保存在常量池中。而对于 <code>String str = new String(&quot;asd&quot;);</code> ，编译器将会创建一个字符串对象，并把 str指向该地址。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String s1 = <span class="string">""</span>;</div><div class="line">String s2 = <span class="keyword">new</span> String(<span class="string">""</span>);</div><div class="line"></div><div class="line">System.out.println(s1);</div><div class="line">System.out.println(s2);</div></pre></td></tr></table></figure>
<p>将会打印</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">null</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">String s0 = <span class="string">"asdf"</span>; </div><div class="line">String s1 = <span class="string">"asdf"</span>; </div><div class="line">String s2 = <span class="string">"as"</span> + <span class="string">"df"</span>; </div><div class="line"></div><div class="line">System.out.println(s0 == s1); </div><div class="line">System.out.println(s0 == s2);</div></pre></td></tr></table></figure>
<p>将会打印</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">true</div><div class="line">true</div></pre></td></tr></table></figure>
<p>因为这些字符串在编译时就被确定了，其中 <code>String s2 = &quot;as&quot; + &quot;df&quot;;</code> 由多个字符串常量连接而成，因此在编译时就被解析为一个字符串常量，因此结果为true。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">String s0 = <span class="string">"asdf"</span>;</div><div class="line">String s1 = <span class="keyword">new</span> String(<span class="string">"asdf"</span>);</div><div class="line">String s2 = <span class="string">"as"</span> + <span class="keyword">new</span> String(<span class="string">"df"</span>);</div><div class="line"></div><div class="line">System.out.println(s0 == s1);</div><div class="line">System.out.println(s0 == s2);</div><div class="line">System.out.println(s1 == s2);</div></pre></td></tr></table></figure>
<p>结果为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">false </div><div class="line">false </div><div class="line">false</div></pre></td></tr></table></figure></p>
<p>其中 s0 是在编译时常量池中的引用， s1 是在运行时创建的对象， s2 因为在编译时无法确定 new String(“df”)，所以也是在运行时创建的对象，其地址与 s1 不同。因此结果为false。</p>
<p>如果想要比较字符串之间的值，则应该使用 equals() 方法。</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java 堆和栈]]></title>
      <url>/2017/11/17/java%20%E5%A0%86%E5%92%8C%E6%A0%88/</url>
      <content type="html"><![CDATA[<p>栈和堆在 Java 中是用来在内存中存放数据的地方，与 C/C++ 不同， Java 自动管理栈和堆。</p>
<p>栈的存取速度比堆要快，仅次于直接位于 CPU 中的寄存器。但是，存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。堆可以动态的分配内存大小，生存期也可以不先告诉编译器，但是存取速度较慢。</p>
<h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>Java 的内存分为两种，堆内存和栈内存。</p>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>栈内存用于存放一些基本类型的变量和对象的引用变量。当在一段代码块中定义一个变量时， Java 就在栈中为这个变量分配内存空间，当超过变量的作用域后，Java 会自动释放掉为该变量分配的内存空间，该内存空间可以立刻被另作他用。</p>
<p>堆内存用于存放由 new 创建的对象和数组。在堆中分配的内存，由 Java 虚拟机自动垃圾回收器来管理。在堆中产生了一个数组或者对象后，还可以在栈中定义一个特殊的变量，这个变量的取值等于数组或者对象在堆内存中的首地址，在栈中的这个特殊的变量就变成了数组或者对象的引用变量，以后就可以在程序中使用栈内存中的引用变量来访问堆中的数组或者对象，引用变量相当于为数组或者对象起的一个别名，或者代号，是一个普通变量，在栈中分配内存，当程序运行到作用域外时释放。</p>
<p>数组和对象本身在堆中分配，在程序运行到使用 new 产生数组或对象的语句所在代码块之外，所占用的内存也不会释放。数组和对象在没有引用变量指向它的时候，将会变成垃圾，不能再被使用，但是仍然占着内存，在随后的一个不确定的时间由垃圾回收器释放。这是 Java 占内存的主要原因。</p>
<p>栈中的变量指向堆中的变量，可以看作是 Java 的指针。</p>
<h2 id="分配策略"><a href="#分配策略" class="headerlink" title="分配策略"></a>分配策略</h2><p>按照编译原理观点，程序运行时的内存分配有三种策略：静态、栈式、堆式。</p>
<p>静态储存分配指在编译时就能确定每个数据目标在运行时刻的储存空间需求，因此在编译时就可以给他们分配固定的内存空间，这种分配策略要求程序代码中不能有可变数据结构，也不允许有嵌套或者递归的结构出现，因为他们会导致编译程序无法准确计算储存空间需求。</p>
<p>栈式存储分配也可称为动态存储分配，是由一个类似于堆栈的运行栈来实现的。和静态存储分配相反，在栈式存储方案中，程序对数据区的需求在编译时是完全未知的，只有到运行的时候才能够知道，但是规定在运行中进入一个程序模块时，必须知道该程序模块所需的数据区大小才能够为其分配内存.和我们在数据结构所熟知的栈一样，栈式存储分配按照先进后出的原则进行分配。 </p>
<p>栈式储存分配要求在过程的入口处必须知道所有的存储需求，而堆式分配则专门负责在编译时或运行时模块入口处都无法确定储存需求的数据结构的内存分配，比如：可变长度串和对象实例，堆由大片的可利用块或空闲块组成，堆中的内存可以按照任意顺序分配和释放。</p>
<h3 id="区别-1"><a href="#区别-1" class="headerlink" title="区别"></a>区别</h3><p>从栈和堆的功能和作用来通俗的比较，堆主要用来存放对象，栈主要用来执行程序。这种不同主要是由于堆和栈的特点决定的：</p>
<p>在 Java 中，所有的方法调用都是通过栈来进行的，所有的局部变量，形式参数都是从栈中分配内存空间。实际上也不是什么分配，只是从栈顶向上用就行。需要注意的是，在分配的时候，比如为一个即将要调用的程序模块分配数据区时，应事先知道这个数据区的大小，也就说是虽然分配是在程序运行时进行的，但是分配的大小多少是确定的，不变的，而这个“大小多少”是在编译时确定的，不是在运行时。 </p>
<p>堆是应用程序在运行的时候请求操作系统分配给自己内存，由于从操作系统管理的内存分配，所以在分配和销毁时都要占用时间，因此用堆的效率非常低。但是堆的优点在于，编译器不必知道要从堆里分配多少存储空间，也不必知道存储的数据要在堆里停留多长的时间，因此，用堆保存数据时会得到更大的灵活性。事实上，面向对象的多态性，堆内存分配是必不可少的，因为多态变量所需的存储空间只有在运行时创建了对象之后才能确定。</p>
<h2 id="JVM-中的堆和栈"><a href="#JVM-中的堆和栈" class="headerlink" title="JVM 中的堆和栈"></a>JVM 中的堆和栈</h2><p>JVM 是基于栈的虚拟机。 JVM 为每个新创建的线程都分配一个栈.也就是说，对于一个Java程序来说，它的运行就是通过对堆栈的操作来完成的。堆栈以帧为单位保存线程的状态。JVM对堆栈只进行两种操作：以帧为单位的压栈和出栈操作。 </p>
<p>我们知道，某个线程正在执行的方法称为此线程的当前方法，当前方法使用的帧称为当前帧。当线程激活一个 Java 方法， JVM 就会在线程的 Java 堆栈里新压入一个帧，这个帧自然成为了当前帧。在此方法执行期间，这个帧将用来保存参数，局部变量，中间计算过程和其他数据，这个帧在这里和编译原理中的活动纪录的概念是差不多的。</p>
<p>从 Java 的这种分配机制来看，栈又可以这样理解：栈是 JVM 在建立某个进程时或者线程为这个线程建立的存储区域，该区域具有先进后出的特性。</p>
<p>每一个 Java 应用都唯一对应一个 JVM 实例，每一个实例唯一对应一个堆。应用程序在运行中所创建的所有类实例或数组都放在这个堆中，并由应用所有的线程共享。</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gradle 项目中文乱码的解决]]></title>
      <url>/2017/09/27/Gradle%20%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近使用 Gradle 构建项目，项目里需要自定义异常，结果发现异常信息乱码。百度了一堆教程也没解决，最后查看 class 文件发现是编译过程中造成的乱码。</p>
<p>在官方文档中发现， Gradle 会根据操作系统选择编码，Windows 中文操作系统的默认编码是GBK，而项目使用的编码格式是UTF-8，最终 Gradle 将UTF-8编码识别为GBK编码，导致了乱码问题。</p>
<a id="more"></a>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>在 <code>build.gradle</code> 文件中添加</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tasks.withType(JavaCompile) &#123;  </div><div class="line">    options.encoding = <span class="string">"UTF-8"</span>  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样 Gradle 会将文件识别为UTF-8编码。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>上面的解决办法需要每个项目都插入一段，有点麻烦，不过还是有其他更简便的办法。就是在 Windows 下新建 <code>GRADLE_OPTS</code> 环境变量，值为 <code>-Dfile.encoding=utf-8</code>。这样在终端中使用的 Gradle 命令便可以识别UTF-8编码格式。</p>
<p>如果是 IDE 进行 Gradle 操作，那么还需要设置IDE的参数。因为我使用的是 idea，这里只介绍 idea 的解决办法。打开 <code>File-&gt;Settings-&gt;Build,Execution,Deployment-&gt;Build Tools-&gt;Gradle</code>，在 <code>Gradle Vm Options</code> 中添加 <code>-Dfile.encoding=utf-8</code>。</p>
]]></content>
      
        <categories>
            
            <category> Gradle </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gradle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[idea 常用快捷键及插件]]></title>
      <url>/2017/09/27/idea%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8A%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>记录下 idea 常用的快捷键，便于以后使用。</p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h3><p>常用的有fori/sout/psvm+Tab即可生成循环、System.out、main方法等boilerplate样板代码</p>
<a id="more"></a>
<p>要输入for(User user : users)只需输入user.for+Tab</p>
<p>要输入Date birthday = user.getBirthday();只需输入user.getBirthday().var+Tab即可。代码标签输入完成后，按Tab，生成代码</p>
<p>Ctrl+Alt+O 优化导入的类和包</p>
<p>Alt+Insert 生成代码(如get,set方法,构造函数等)或者右键（Generate） </p>
<p>fori/sout/psvm + Tab  </p>
<p>Ctrl+Alt+T  生成try catch  或者 Alt+Enter </p>
<p>Ctrl+Alt+T  把选中的代码放在 TRY{} IF{} ELSE{} 里 </p>
<p>Ctrl + O 重写方法  </p>
<p>Ctrl + I 实现方法 </p>
<p>Ctrl+Shift+U 大小写转化  </p>
<p>Alt+回车    导入包,自动修正 </p>
<p>Ctrl+J      自动代码  </p>
<p>Ctrl+Shift+J，整合两行为一行 </p>
<p>Ctrl+空格   代码提示  </p>
<p>Ctrl+Shift+SPACE 自动补全代码  </p>
<p>Ctrl+Alt+L  格式化代码  </p>
<p>Ctrl+Alt+I  自动缩进  </p>
<p>Ctrl+Alt+O  优化导入的类和包  </p>
<p>Alt+Insert  生成代码(如GET,SET方法,构造函数等)  </p>
<p>Ctrl+E      最近更改的代码  </p>
<p>Ctrl+Alt+SPACE  类名或接口名提示  </p>
<p>Ctrl+P   方法参数提示  </p>
<p>Ctrl+Q   可以看到当前方法的声明 </p>
<p>Shift+F6  重构-重命名 (包、类、方法、变量、甚至注释等) </p>
<p>Ctrl+Alt+V 提取变量 </p>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>Ctrl+Shift+Backspace    可以跳转到上次编辑的地 </p>
<p>Ctrl+Alt+left/right     前后导航编辑过的地方 </p>
<p>Alt+7   靠左窗口显示当前文件的结构 </p>
<p>Ctrl+F12    浮动显示当前文件的结构 </p>
<p>Alt+F7      找到你的函数或者变量或者类的所有引用到的地方 </p>
<p>Ctrl+Alt+F7     找到你的函数或者变量或者类的所有引用到的地方 </p>
<p>Ctrl+Shift+Alt+N    查找类中的方法或变量 </p>
<p>双击Shift 在项目的所有目录查找文件 </p>
<p>Ctrl+N   查找类 </p>
<p>Ctrl+Shift+N    查找文件 </p>
<p>Ctrl+G   定位行  </p>
<p>Ctrl+F   在当前窗口查找文本  </p>
<p>Ctrl+Shift+F    在指定窗口查找文本  </p>
<p>Ctrl+R   在当前窗口替换文本  </p>
<p>Ctrl+Shift+R  在指定窗口替换文本  </p>
<p>Alt+Shift+C  查找修改的文件  </p>
<p>Ctrl+E   最近打开的文件  </p>
<p>F3   向下查找关键字出现位置  </p>
<p>Shift+F3    向上一个关键字出现位置  </p>
<p>选中文本，按Alt+F3 ，高亮相同文本，F3逐个往下查找相同文本 </p>
<p>F4   查找变量来源  </p>
<p>Ctrl+Shift+O  弹出显示查找内容 </p>
<p>Ctrl+W 选中代码，连续按会有其他效果 </p>
<p>F2 或Shift+F2 高亮错误或警告快速定位 </p>
<p>Ctrl+Up/Down 光标跳转到第一行或最后一行下 </p>
<p>Ctrl+B 快速打开光标处的类或方法  </p>
<p>Ctrl+Alt+B  找所有的子类  </p>
<p>Ctrl+Shift+B  找变量的类  </p>
<p>Ctrl+Shift+上下键  上下移动代码 </p>
<p>Ctrl+Alt+ left/right 返回至上次浏览的位置 </p>
<p>Ctrl+X 删除行 </p>
<p>Ctrl+D 复制行 </p>
<p>Ctrl+/ 或 Ctrl+Shift+/  注释（// 或者/<em>…</em>/ ） </p>
<p>Ctrl+H 显示类结构图 </p>
<p>Ctrl+Q 显示注释文档 </p>
<p>Alt+F1 查找代码所在位置 </p>
<p>Alt+1 快速打开或隐藏工程面板 </p>
<p>Alt+ left/right 切换代码视图 </p>
<p>Alt+ ↑/↓  在方法间快速移动定位  </p>
<p>Alt+6    查找TODO</p>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>Alt+F8      debug时选中查看值 </p>
<p>Alt+Shift+F9    选择 Debug </p>
<p>Alt+Shift+F10   选择 Run </p>
<p>Ctrl+Shift+F9   编译 </p>
<p>Ctrl+Shift+F8   查看断点 </p>
<p>F7  步入 </p>
<p>Shift+F7    智能步入 </p>
<p>Alt+Shift+F7    强制步入 </p>
<p>F8  步过 </p>
<p>Shift+F8    步出 </p>
<p>Alt+Shift+F8    强制步过 </p>
<p>Alt+F9  运行至光标处 </p>
<p>Ctrl+Alt+F9    强制运行至光标处 </p>
<p>F9  恢复程序 </p>
<p>Alt+F10  定位到断点 </p>
<h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>Ctrl+Alt+Shift+T    弹出重构菜单 </p>
<p>Shift+F6    重命名 </p>
<p>F6  移动 </p>
<p>F5  复制 </p>
<p>Alt+Delete  安全删除 </p>
<p>Ctrl+Alt+N  内联 </p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>Shift+Enter 另起一行 </p>
<p>Ctrl+Z   倒退(撤销) </p>
<p>Ctrl+Shift+Z  向前(取消撤销) </p>
<p>Ctrl+Alt+F12  资源管理器打开文件夹  </p>
<p>Alt+F1   查找文件所在目录位置  </p>
<p>Shift+Alt+Insert 竖编辑模式  </p>
<p>Ctrl+F4  关闭当前窗口 </p>
<p>Ctrl+Alt+V  可以引入变量。例如：new String(); 自动导入变量定义 </p>
<p>Ctrl+~    快速切换方案（界面外观、代码风格、快捷键映射等菜单） </p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>插件的安装就不多介绍了，主要介绍下常用的插件</p>
<h3 id="Background-Image-Plus"><a href="#Background-Image-Plus" class="headerlink" title="Background Image Plus"></a>Background Image Plus</h3><p>个人很喜欢的一款插件，可以为idea添加背景，安装之后，在打开View选项，就可以看到Set Background Image选项了。 </p>
<h3 id="FindBugs"><a href="#FindBugs" class="headerlink" title="FindBugs"></a>FindBugs</h3><p>FindBugs很多人都并不陌生，Eclipse中有插件可以帮助查找代码中隐藏的bug，IDEA中也有这款插件。</p>
<h3 id="CheckStyle"><a href="#CheckStyle" class="headerlink" title="CheckStyle"></a>CheckStyle</h3><p>通过检查对代码编码格式，命名约定，Javadoc，类设计等方面进行代码规范和风格的检查，从而有效约束开发人员更好地遵循代码编写规范。</p>
<p>软件安装成功之后，首先要设置规则。可以通过Preferences—&gt;Other Settings —&gt;CheckStyles进行设置，可以直接将文件添加进来，然后就可以对具体的文件进行检查了。</p>
<h3 id="GsonFormat"><a href="#GsonFormat" class="headerlink" title="GsonFormat"></a>GsonFormat</h3><p>Java开发中，经常有把json格式的内容转成Object的需求，GsonFormat这款插件可以实现该功能。</p>
<h3 id="Jrebel"><a href="#Jrebel" class="headerlink" title="Jrebel"></a>Jrebel</h3><p>JRebel for IntelliJ是一款热部署插件。能够在开发过程中帮助开发者节约大量的部署等待时间，几乎所有的代码改动都不需要重启应用服务器，连Spring增加一个Bean都可以热部署。是一款收费插件，具体设置可以百度。</p>
<h3 id="AceJump"><a href="#AceJump" class="headerlink" title="AceJump"></a>AceJump</h3><p>AceJump其实是一款能够代替鼠标的软件，只要安装了这款插件，可以在代码中跳转到任意位置。按快捷键进入 AceJump 模式后（默认是 Ctrl+J），再按任一个字符，插件就会在屏幕中这个字符的所有出现位置都打上标签，你只要再按一下标签的字符，就能把光标移到该位置上。换言之，你要 移动光标时，眼睛一直看着目标位置就行了，根本不用管光标的当前位置。</p>
<h3 id="Key-promoter"><a href="#Key-promoter" class="headerlink" title="Key promoter"></a>Key promoter</h3><p>Key promoter这款插件适合新手使用。当你点击鼠标一个功能的时候，可以提示你这个功能快捷键是什么。</p>
]]></content>
      
        <categories>
            
            <category> 常用命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> idea </tag>
            
            <tag> 插件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo next主题添加背景]]></title>
      <url>/2017/09/17/hexo%20next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF/</url>
      <content type="html"><![CDATA[<p>之前使用hexo next主题时突然想添加背景，百度了一下但没有关于Mist主题的教程，于是自己摸索修改了一下，并在这里记录下来。</p>
<h2 id="添加背景"><a href="#添加背景" class="headerlink" title="添加背景"></a>添加背景</h2><p>首先，找到根路径下的 <code>themes/next/source/css/_custom/custom.styl</code> 文件，添加</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">  background : url(/images/你的背景图片名字) no-repeat;</div><div class="line">  //width : 100%; </div><div class="line">  //height : 100%; //设置容器占满屏幕</div><div class="line">  //background-size : 100% 100%; //设置图片占满容器</div><div class="line">  //background-attachment : fixed;  //设置图片不随页面移动</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>并将背景图片添加到 <code>themes/next/source/images</code> 文件夹里</p>
<p>这里建议使用宽图。</p>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="http://owek6x58j.bkt.clouddn.com/image1.png" alt=""></p>
<p>我们会发现导航栏显得不搭，这里在询问了朋友后的解决办法是透明化导航栏</p>
<h2 id="透明化header"><a href="#透明化header" class="headerlink" title="透明化header"></a>透明化header</h2><p>虚化导航栏有两种方式：</p>
<p>1.在 <code>themes/next/source/css/_common/components/header/header.styl</code> 文件中修改</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.header</span> &#123; <span class="attribute">background</span>: $head-bg; <span class="attribute">opacity</span>: <span class="number">0.7</span>&#125;</div></pre></td></tr></table></figure>
<p>我们发现导航栏会变成这样</p>
<p><img src="http://owek6x58j.bkt.clouddn.com/image2.png" alt=""></p>
<p>opacity 属性会将子容器也一并透明化，所以如果使用了next自带的搜索，将会失效无法使用</p>
<p>2.在 <code>themes/next/source/css/_schemes/Mist/_header.styl</code> 中修改</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.header</span> &#123; <span class="attribute">background</span>: <span class="built_in">rgba</span>(245, 245, 245, 0.6); &#125;</div></pre></td></tr></table></figure>
<p>效果为</p>
<p><img src="http://owek6x58j.bkt.clouddn.com/image3.png" alt=""></p>
<p>因为子容器都有 background 属性，所以子容器不会受到父容器透明化的影响，而搜索功能也能正常使用</p>
<h2 id="修改footer"><a href="#修改footer" class="headerlink" title="修改footer"></a>修改footer</h2><p>下拉博客会发现，footer 也因为设置了固定颜色而盖住了背景。</p>
<p>这个需要在 <code>themes/next/source/css/_schemes/Mist/index.styl</code> 文件中修改</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.footer</span> &#123;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">80px</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(245, 245, 245, 0.6);</div><div class="line">  <span class="attribute">color</span>: $grey-dim;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果想子容器也透明化的话，则在 <code>themes/next/source/css/_common/components/footer/footer.styl</code> 中修改，且不要修改 index.styl 文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.footer &#123;</div><div class="line">  font-size: 14px;</div><div class="line">  color: $grey-dark;</div><div class="line">  opactiy: 0.7;</div><div class="line"></div><div class="line">  img &#123; border: none; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>至此，添加背景便完成了。</p>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 反射]]></title>
      <url>/2017/09/12/Java%20%E5%8F%8D%E5%B0%84/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第一次接触反射是在学习 Spring 框架的时候，当看到 Spring 通过反射注入对象时感到十分有趣。所以这里系统的学习一下反射机制。</p>
<p>动态语言，是指程序在运行时可以改变其结构：新的函数可以被引进，已有的函数可以被删除等在结构上的变化。比如众所周知的ECMAScript(JavaScript)便是一个动态语言。除此之外如Ruby、Python等也都属于动态语言，而C、C++等语言则不属于动态语言。(引自: 百度百科)</p>
<a id="more"></a>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>主要是指程序可以访问，检测和修改它本身状态或行为的一种能力，并能根据自身行为的状态和结果，调整或修改应用所描述行为的状态和相关的语义。</p>
<p>反射是java中一种强大的工具，能够使我们很方便的创建灵活的代码，这些代码可以再运行时装配，无需在组件之间进行源代码链接。但是反射使用不当会成本很高！</p>
<p><strong>通俗说就是</strong></p>
<p>1.可以于运行时加载,探知和使用编译期间完全未知的类</p>
<p>2.程序在运行状态中, 可以动态加载一个只有名称的类, 对于任意一个已经加载的类,都能够知道这个类的所有属性和方法; 对于任意一个对象,都能调用他的任意一个方法和属性</p>
<p>3.加载完类之后, 在堆内存中会产生一个Class类型的对象(一个类只有一个Class对象), 这个对象包含了完整的类的结构信息,而且这个Class对象就像一面镜子,透过这个镜子看到类的结构,所以被称之为:反射。</p>
<h1 id="使用的类"><a href="#使用的类" class="headerlink" title="使用的类"></a>使用的类</h1><p>通过查询api可以发现使用了四个类，分别对应类的本身，类的构造方法，类的方法，类的属性。</p>
<h2 id="java-lang-Class"><a href="#java-lang-Class" class="headerlink" title="java.lang.Class;"></a>java.lang.Class<t>;</t></h2><p>Class 类的实例表示正在运行的 Java 应用程序中的类和接口。枚举是一种类，注释是一种接口。每个数组属于被映射为 Class 对象的一个类，所有具有相同元素类型和维数的数组都共享该 Class 对象。基本的 Java 类型（boolean、byte、char、short、int、long、float 和 double）和关键字 void 也表示为 Class 对象。 </p>
<p>Class 没有公共构造方法。Class 对象是在加载类时由 Java 虚拟机以及通过调用类加载器中的 defineClass 方法自动构造的。 </p>
<p>获取的方式有三种：</p>
<p>1.对象的getClass()方法;</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printClassName</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">         System.out.println(<span class="string">"The class of "</span> + obj +</div><div class="line">                            <span class="string">" is "</span> + obj.getClass().getName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.类的.class(最安全/性能最好)属性;</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printClassName</span><span class="params">()</span> </span>&#123;</div><div class="line">         System.out.println(<span class="string">"The class of Object "</span> +</div><div class="line">                            <span class="string">"is "</span> + Object.class.getName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.运用Class.forName(String className)动态加载类,className需要是<strong>类的全限定名</strong>(最常用).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printClassName</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"The class of Object "</span> +</div><div class="line">                           <span class="string">"is"</span> + Class.forName(<span class="string">"java.lang.Object"</span>).getName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="通过Class获取信息"><a href="#通过Class获取信息" class="headerlink" title="通过Class获取信息"></a>通过Class获取信息</h3><p>常用的有：</p>
<p>1.获取方法  <code>Method getMethod(String name, Class&lt;?&gt;... parameterTypes)</code></p>
<p>2.获取属性  <code>Field getField(String name)</code></p>
<p>3.获取构造器  <code>Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)</code></p>
<p>4.获取内部类 <code>Class&lt;?&gt;[] getDeclaredClasses()</code></p>
<p>5.获取外部类 <code>Class&lt;?&gt; getDeclaringClass()</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> Test;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by ly on 2017/9/12</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        test();</div><div class="line">        test2();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">        Class testClass = TestClass.class;</div><div class="line">        System.out.println(testClass.getName());</div><div class="line">        Class[] declaredClass = testClass.getDeclaredClasses();</div><div class="line">        <span class="keyword">for</span> (Class c: declaredClass) &#123;</div><div class="line">            System.out.println(c.getName());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</div><div class="line">        Class AClass = A.class;</div><div class="line">        System.out.println(AClass);</div><div class="line">        Class declaredClass = AClass.getDeclaringClass();</div><div class="line">        System.out.println(declaredClass.getName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p>test.TestClass</p>
<p>test.TestClass$A</p>
<p>class test.TestClass$A</p>
<p>test.TestClass</p>
<h2 id="java-lang-reflect-Method"><a href="#java-lang-reflect-Method" class="headerlink" title="java.lang.reflect.Method;"></a>java.lang.reflect.Method;</h2><p>Method 提供关于类或接口上单独某个方法（以及如何访问该方法）的信息。所反映的方法可能是类方法或实例方法（包括抽象方法）。 </p>
<p>Method 允许在匹配要调用的实参与底层方法的形参时进行扩展转换；但如果要进行收缩转换，则会抛出 IllegalArgumentException。 </p>
<h3 id="获取Method"><a href="#获取Method" class="headerlink" title="获取Method"></a>获取Method</h3><p>通过Class下的方法</p>
<p>1.<code>Method getMethod(String name, Class&lt;?&gt;... parameterTypes)</code>  //返回一个 Method 对象，它反映此 Class 对象所表示的类或接口的指定<strong>公共成员方法</strong>。</p>
<p>name - 方法名 </p>
<p>parameterTypes - 参数列表</p>
<p>2.<code>Method[] getMethods()</code> //返回一个包含某些 Method 对象的数组，这些对象反映此 Class 对象所表示的类或接口（包括那些由该类或接口声明的以及从超类和超接口继承的那些的类或接口）的公共 member 方法。数组类返回从 Object 类继承的所有（公共）member 方法。返回数组中的元素没有排序，也没有任何特定的顺序。如果此 Class 对象表示没有公共成员方法的类或接口，或者表示一个基本类型或 void，则此方法返回长度为 0 的数组。</p>
<h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><p><code>Object invoke(Object obj, Object... args)</code></p>
<p>obj - 从中调用底层方法的对象</p>
<p>args - 用于方法调用的参数 </p>
<p>对带有指定参数的指定对象调用由此 Method 对象表示的底层方法。个别参数被自动解包，以便与基本形参相匹配，基本参数和引用参数都随需服从方法调用转换。 </p>
<p>如果底层方法是静态的，那么可以忽略指定的 obj 参数。该参数可以为 null。 </p>
<p>如果底层方法所需的形参数为 0，则所提供的 args 数组长度可以为 0 或 null。 </p>
<p>如果底层方法是实例方法，则使用动态方法查找来调用它，这一点记录在 Java Language Specification, Second Edition 的第 15.12.4.4 节中；在发生基于目标对象的运行时类型的重写时更应该这样做。 </p>
<p>如果底层方法是静态的，并且尚未初始化声明此方法的类，则会将其初始化。</p>
<p>如果方法正常完成，则将该方法返回的值返回给调用者；如果该值为基本类型，则首先适当地将其包装在对象中。但是，如果该值的类型为一组基本类型，则数组元素不 被包装在对象中；换句话说，将返回基本类型的数组。如果底层方法返回类型为 void，则该调用返回 null。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException, IllegalArgumentException, InvocationTargetException</span>&#123;</div><div class="line">        Class c = Object.class;</div><div class="line">        Method method = c.getMethod(<span class="string">"toString"</span>);</div><div class="line">        method.invoke(c.newInstance());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="java-lang-reflect-Field"><a href="#java-lang-reflect-Field" class="headerlink" title="java.lang.reflect.Field;"></a>java.lang.reflect.Field;</h2><p>Field 提供有关类或接口的单个字段的信息，以及对它的动态访问权限。反射的字段可能是一个类（静态）字段或实例字段。 </p>
<h3 id="获取Field"><a href="#获取Field" class="headerlink" title="获取Field"></a>获取Field</h3><p>通过Class下的方法</p>
<p>1.<code>Field getField(String name)</code> //返回一个 Field 对象，它反映此 Class 对象所表示的类或接口的指定<strong>公共成员字段</strong>。</p>
<p>name - 字段名 </p>
<p>2.<code>Field[] getFields()</code>//返回一个包含某些 Field 对象的数组，这些对象反映此 Class 对象所表示的类或接口的<strong>所有可访问公共字段</strong>。返回数组中的元素没有排序，也没有任何特定的顺序。如果类或接口没有可访问的<strong>公共字段</strong>，或者表示一个数组类、一个基本类型或 void，则此方法返回长度为 0 的数组。 </p>
<h3 id="获取Field上的值"><a href="#获取Field上的值" class="headerlink" title="获取Field上的值"></a>获取Field上的值</h3><p><code>Object get(Object obj)</code></p>
<p>返回指定对象上此 Field 表示的字段的值。如果该值是一个基本类型值，则自动将其包装在一个对象中。 </p>
<p>底层字段的值是按以下方式获得的： </p>
<p>如果底层字段是一个静态字段，则忽略 obj 变量；它可能为 null。 </p>
<p>否则，底层字段是一个实例字段。如果指定的 obj 变量为 null，则该方法将抛出一个 NullPointerException。如果指定对象不是声明底层字段的类或接口的实例，则该方法将抛出一个 IllegalArgumentException。 </p>
<p>如果此 Field 对象强制实施 Java 语言访问控制，并且底层字段是不可访问的，则该方法将抛出一个 IllegalAccessException。如果底层字段是静态的，并且声明该字段的类尚未初始化，则初始化这个类。 </p>
<p>否则，从底层实例字段或静态字段中获取该值。如果该字段是一个基本类型字段，则在返回前将该值包装在一个对象中，否则照原样返回。 </p>
<p>如果字段隐藏在 obj 的类型中，则根据前面的规则获得字段的值。 </p>
<h2 id="java-lang-reflect-Constructor"><a href="#java-lang-reflect-Constructor" class="headerlink" title="java.lang.reflect.Constructor;"></a>java.lang.reflect.Constructor;</h2><p>Constructor 提供关于类的单个构造方法的信息以及对它的访问权限。 </p>
<h3 id="获取Constructor"><a href="#获取Constructor" class="headerlink" title="获取Constructor"></a>获取Constructor</h3><p>通过Class下的方法</p>
<p>1.<code>Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)</code></p>
<p>返回一个 Constructor 对象，它反映此 Class 对象所表示的类的指定<strong>公共构造方法</strong>。parameterTypes 参数是 Class 对象的一个数组，这些 Class 对象按声明顺序标识构造方法的形参类型。 如果此 Class 对象表示非静态上下文中声明的内部类，则形参类型作为第一个参数包括显示封闭的实例。 </p>
<p>要反映的构造方法是此 Class 对象所表示的类的公共构造方法，其形参类型与 parameterTypes 所指定的参数类型相匹配。 </p>
<p>2.<code>Constructor&lt;?&gt;[] getConstructors()</code></p>
<p>返回一个包含某些 Constructor 对象的数组，这些对象反映此 Class 对象所表示的类的<strong>所有公共构造方法</strong>。如果该类没有公共构造方法，或者该类是一个数组类，或者该类反映一个基本类型或 void，则返回一个长度为 0 的数组。 注意，此方法返回 Constructor<t> 对象的数组（即取自此类构造方法的数组）时，此方法的返回类型是 Constructor&lt;?&gt;[]，不是 预期的 Constructor<t>[]。此少量信息的返回类型是必需的，因为从此方法返回之后，该数组可能被修改以保存不同类的 Constructor 对象，而这将违反 Constructor<t>[] 的类型保证。</t></t></t></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 注解]]></title>
      <url>/2017/09/10/Java%20%E6%B3%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>注解是java引入的一项非常受欢迎的补充，它提供了一种结构化的，并且具有类型检查能力的新途径，从而使得程序员能够为代码加入元数据，而不会导致代码杂乱且难以阅读。使用注解能够帮助我们避免编写累赘的部署描述文件，以及其他生成的文件。</p>
<p>注解的语法比较简单，除了@符号的使用之外，它基本与java固有的语法一致。但由于java源码中提供的内置注解很少，所以大部分同学对注解都不是很了解，虽然我们都接触过，比如java内置的几种注解：</p>
<pre><code>@Override，表示当前的方法定义将覆盖超类中的方法。
@Deprecated，表示当前方法即将废弃，不推荐使用。
@SuppressWarnings，表示忽略编译器的警告信息。
</code></pre><a id="more"></a>
<p>要深入学习注解，我们就必须能定义自己的注解，并使用注解，在定义自己的注解之前，我们就必须要了解Java为我们提供的元注解和相关定义注解的语法。</p>
<h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><p>元注解的作用就是负责注解其他注解。Java5.0定义了4个标准的meta-annotation类型，它们被用来提供对其它 annotation类型作说明。Java5.0定义的元注解：</p>
<p>1.<a href="#Target">@Target</a></p>
<p>2.<a href="#Retention">@Retention</a></p>
<p>3.<a href="#Documented">@Documented</a></p>
<p>4.<a href="#Inherited">@Inherited</a></p>
<p>这些类型和它们所支持的类在java.lang.annotation包中可以找到。下面我们看一下每个元注解的作用和相应分参数的使用说明。</p>
<h3 id="Target"><a href="#Target" class="headerlink" title="@Target"></a><span id="Target">@Target</span></h3><p>@Target说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。</p>
<p>作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）</p>
<p>取值(ElementType)有：</p>
<p>1.CONSTRUCTOR:用于描述构造器</p>
<p>2.FIELD:用于描述域</p>
<p>3.LOCAL_VARIABLE:用于描述局部变量</p>
<p>4.METHOD:用于描述方法</p>
<p>5.PACKAGE:用于描述包</p>
<p>6.PARAMETER:用于描述参数</p>
<p>7.TYPE:用于描述类、接口(包括注解类型) 或enum声明</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Table &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">tableName</span><span class="params">()</span> <span class="keyword">default</span> "className"</span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> NoDBColumn &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注解Table 可以用于注解类、接口(包括注解类型) 或enum声明,而注解NoDBColumn仅可用于注解类的成员变量。</p>
<h3 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a><span id="Retention">@Retention</span></h3><p>@Retention定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对 Annotation的“生命周期”限制。</p>
<p>作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）</p>
<p>取值（RetentionPolicy）有：</p>
<p>1.SOURCE:在源文件中有效（即源文件保留）</p>
<p>2.CLASS:在class文件中有效（即class保留）</p>
<p>3.RUNTIME:在运行时有效（即运行时保留）</p>
<p>Retention meta-annotation类型有唯一的value作为成员，它的取值来自java.lang.annotation.RetentionPolicy的枚举类型值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Column &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> "fieldName"</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">setFuncName</span><span class="params">()</span> <span class="keyword">default</span> "setField"</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFuncName</span><span class="params">()</span> <span class="keyword">default</span> "getField"</span>; </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">defaultDBValue</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Column注解的的RetentionPolicy的属性值是RUTIME,这样注解处理器可以通过反射，获取到该注解的属性值，从而去做一些运行时的逻辑处理</p>
<h3 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a><span id="Documented">@Documented</span></h3><p>@Documented用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。Documented是一个标记注解，没有成员。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Column &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> "fieldName"</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">setFuncName</span><span class="params">()</span> <span class="keyword">default</span> "setField"</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFuncName</span><span class="params">()</span> <span class="keyword">default</span> "getField"</span>; </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">defaultDBValue</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a><span id="Inherited">@Inherited</span></h3><p>@Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。</p>
<p>注意：@Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，方法并不从它所重载的方法继承annotation。</p>
<p>当@Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。如果我们使用java.lang.reflect去查询一个@Inherited annotation类型的annotation时，反射代码检查将展开工作：检查class和其父类，直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Inherited</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Greeting &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> FontColor&#123; BLUE,RED,GREEN&#125;;</div><div class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">FontColor <span class="title">fontColor</span><span class="params">()</span> <span class="keyword">default</span> FontColor.GREEN</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p>使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口，由编译程序自动完成其他细节。在定义注解时，不能继承其他的注解或接口。@interface用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。方法的名称就是参数的名称，返回值类型就是参数的类型（返回值类型只能是基本类型、Class、String、enum）。可以通过default来声明参数的默认值。</p>
<p><strong>定义注解格式：</strong></p>
<p><em>public @interface 注解名 {定义体}</em></p>
<p><strong>注解参数的可支持数据类型：</strong></p>
<p>1.所有基本数据类型（int,float,boolean,byte,double,char,long,short)</p>
<p>2.String类型</p>
<p>3.Class类型</p>
<p>4.enum类型</p>
<p>5.Annotation类型</p>
<p>6.以上所有类型的数组</p>
<p>Annotation类型里面的参数该怎么设定: </p>
<p>第一,只能用public或默认(default)这两个访问权修饰.例如,String value();这里把方法设为default默认类型；</p>
<p>第二,参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基本数据类型和 String,Enum,Class,annotations等数据类型,以及这一些类型的数组.例如,String value();这里的参数成员就为String;</p>
<p>第三,如果只有一个参数成员,最好把参数名称设为”value”,后加小括号.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 自定义注解</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@interface</span> MyAnnotation &#123;</div><div class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注解元素的默认值：</strong></p>
<p>注解元素必须有确定的值，要么在定义注解的默认值中指定，要么在使用注解时指定，非基本类型的注解元素的值不可为null。因此, 使用空字符串或0作为默认值是一种常用的做法。这个约束使得处理器很难表现一个元素的存在或缺失的状态，因为每个注解的声明中，所有元素都存在，并且都具有相应的值，为了绕开这个约束，我们只能定义一些特殊的值，例如空字符串或者负数，一次表示某个元素不存在，在定义注解时，这已经成为一个习惯用法。</p>
<h2 id="注解处理"><a href="#注解处理" class="headerlink" title="注解处理"></a>注解处理</h2><p>注解类使用上了，我们还需要一个注解处理器来解析我们定义的Bean，这样才能将注解转换成我们需要的操作。</p>
<p>Java使用Annotation接口来代表程序元素前面的注解，该接口是所有Annotation类型的父接口。除此之外，Java在java.lang.reflect 包下新增了AnnotatedElement接口，该接口代表程序中可以接受注解的程序元素，该接口主要有如下几个实现类：</p>
<p>Class：类定义</p>
<p>Constructor：构造器定义</p>
<p>Field：类的成员变量定义</p>
<p>Method：类的方法定义</p>
<p>Package：类的包定义</p>
<p>java.lang.reflect 包下主要包含一些实现反射功能的工具类，实际上，java.lang.reflect 包所有提供的反射API扩充了读取运行时Annotation信息的能力。当一个Annotation类型被定义为运行时的Annotation后，该注解才能是运行时可见，当class文件被装载时被保存在class文件中的Annotation才会被虚拟机读取。</p>
<p>AnnotatedElement 接口是所有程序元素（Class、Method和Constructor）的父接口，所以程序通过反射获取了某个类的AnnotatedElement对象之后，程序就可以调用该对象的如下四个个方法来访问Annotation信息：</p>
<pre><code>&lt;T extends Annotation&gt; T getAnnotation(Class&lt;T&gt; annotationClass): 返回改程序元素上存在的、指定类型的注解，如果该类型注解不存在，则返回null。

Annotation[] getAnnotations():返回该程序元素上存在的所有注解。

boolean is AnnotationPresent(Class&lt;?extends Annotation&gt; annotationClass):判断该程序元素上是否包含指定类型的注解，存在则返回true，否则返回false.

Annotation[] getDeclaredAnnotations()：返回直接存在于此元素上的所有注解。与此接口中的其他方法不同，该方法将忽略继承的注解。（如果没有注解直接存在于此元素上，则返回长度为零的一个数组。）该方法的调用者可以随意修改返回的数组；这不会对其他调用者返回的数组产生任何影响。
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAnnotation</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">            MyAnnotation annotation = annotation.class.getAnnotation(MyAnnotation.class);</div><div class="line">            System.out.println(annotation.value());</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@MyAnnotation</span>(value = <span class="string">"123"</span>)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">annotation</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上是通过反射获取annotation类的注解，并打印注解中value的值</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC 配置及常用注解]]></title>
      <url>/2017/09/10/Spring%20MVC%20%E6%B3%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>  Spring MVC 作为目前最主流的MVC框架之一，需要程序员熟练掌握。 而使用注解可以大大简化配置的流程，减少工作量。 所以这里简单讲解Spring MVC注解的配置和常用注解。</p>
  <a id="more"></a>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="jar包引入"><a href="#jar包引入" class="headerlink" title="jar包引入"></a>jar包引入</h2><p>  <strong>使用Gradle</strong></p>
<ul>
<li><p>compile ‘org.springframework:spring-context:4.2.5.RELEASE’</p>
</li>
<li><p>compile ‘org.springframework:spring-webmvc:4.2.5.RELEASE’</p>
</li>
</ul>
<h2 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h2><p>  SpringMVC是一个基于DispatcherServlet的MVC框架，每一个请求最先访问的都是DispatcherServlet，DispatcherServlet负责转发每一个Request请求给相应的Handler，Handler处理以后再返回相应的视图(View)和模型(Model)，返回的视图和模型都可以不指定，即可以只返回Model或只返回View或都不返回。</p>
<p>  DispatcherServlet是继承自HttpServlet的，既然SpringMVC是基于DispatcherServlet的，那么我们先来配置一下DispatcherServlet，好让它能够管理我们希望它管理的内容。HttpServlet是在web.xml文件中声明的。</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></div><div class="line">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</div><div class="line">      <span class="comment">&lt;!-- 指定Spring Bean的配置文件所在目录 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">          <span class="comment">&lt;!-- 默认是/WEB-INF/applicationContext.xml --&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">      </div><div class="line">      <span class="comment">&lt;!-- Spring配置 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line">  </div><div class="line">      <span class="comment">&lt;!-- spring mvc配置 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">              <span class="comment">&lt;!-- 默认是/WEB-INF/[servlet名字]-servlet.xml --&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">  </div><div class="line">      <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">      </div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>ContextLoaderListener指定了IOC容器初始化的方法</li>
</ul>
<h2 id="Spring-MVC配置"><a href="#Spring-MVC配置" class="headerlink" title="Spring MVC配置"></a>Spring MVC配置</h2>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line"></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line"></div><div class="line">       <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line"></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></div><div class="line"></div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd</div><div class="line">		</div><div class="line">		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"&gt;</div><div class="line"></div><div class="line"></div><div class="line">      <span class="comment">&lt;!-- 启用spring mvc 注解 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></div><div class="line">      </div><div class="line">      <span class="comment">&lt;!-- 设置使用注解的类所在的jar包 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"controller"</span>/&gt;</span></div><div class="line">      </div><div class="line">      <span class="comment">&lt;!-- 对转向页面的路径解析。prefix：前缀， suffix：后缀 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="attr">p:prefix</span>=<span class="string">"/jsp/"</span> <span class="attr">p:suffix</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h2><p>  对你的Controller类使用@Controller注解进行标记。</p>
<h1 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h1><h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h2><p>  在SpringMVC 中，控制器Controller 负责处理由DispatcherServlet 分发的请求，它把用户请求的数据经过业务处理层处理之后封装成一个Model ，然后再把该Model 返回给对应的View 进行展示。在SpringMVC 中提供了一个非常简便的定义Controller 的方法，你无需继承特定的类或实现特定的接口，只需使用@Controller 标记一个类是Controller ，然后使用@RequestMapping 和@RequestParam 等一些注解用以定义URL 请求和Controller 方法之间的映射，这样的Controller 就能被外界访问到。此外Controller 不会直接依赖于HttpServletRequest 和HttpServletResponse 等HttpServlet 对象，它们可以通过Controller 的方法参数灵活的获取到。</p>
<p>  @Controller 用于标记在一个类上，使用它标记的类就是一个SpringMVC Controller 对象。分发处理器将会扫描使用了该注解的类的方法，并检测该方法是否使用了@RequestMapping 注解。@Controller 只是定义了一个控制器类，而使用@RequestMapping 注解的方法才是真正处理请求的处理器。单单使用@Controller 标记在一个类上还不能真正意义上的说它就是SpringMVC 的一个控制器类，因为这个时候Spring 还不认识它。那么要如何做Spring 才能认识它呢？这个时候就需要我们把这个控制器类交给Spring 来管理。有两种方式：</p>
<ol>
<li><p>在SpringMVC 的配置文件中定义MyController 的bean 对象。</p>
</li>
<li><p>在SpringMVC 的配置文件中告诉Spring 该到哪里去找标记为@Controller 的Controller 控制器。</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--方式一--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.host.app.web.controller.MyController"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!--方式二--&gt;</span></div><div class="line"><span class="tag">&lt; <span class="attr">context:component-scan</span> <span class="attr">base-package</span> = <span class="string">"com.host.app.web"</span> /&gt;</span>//路径写到controller的上一层(扫描包详解见下面浅析)</div></pre></td></tr></table></figure>
<h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><p>  RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p>
<p>  RequestMapping注解有六个属性。</p>
<p>  <strong>value</strong> : 指定请求的实际地址，指定的地址可以是URI Template 模式（后面将会说明）;</p>
<p>  <strong>method</strong> : 指定请求的method类型， GET、POST、PUT、DELETE等;</p>
<p>  <strong>consumes</strong> :  指定处理请求的提交内容类型（Content-Type），例如application/json, text/html;</p>
<p>  <strong>produces</strong> : 指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回;</p>
<p>  <strong>params</strong> : 指定request中必须包含某些参数值是，才让该方法处理。</p>
<p>  <strong>headers</strong> : 指定request中必须包含某些指定的header值，才能让该方法处理请求。</p>
<h3 id="使用-RequestMapping-来映射-Request-请求与处理器"><a href="#使用-RequestMapping-来映射-Request-请求与处理器" class="headerlink" title="使用 @RequestMapping 来映射 Request 请求与处理器"></a>使用 @RequestMapping 来映射 Request 请求与处理器</h3><p>  <em>方式一、通过常见的类路径和方法路径结合访问controller方法</em></p>
<p>  <em>方式二、使用url模板</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span> ( <span class="string">"/test/&#123;variable1&#125;"</span> )</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span> ( <span class="string">"/showView/&#123;variable2&#125;"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">showView</span><span class="params">( @PathVariable(<span class="string">"variable1"</span>)</span> String variable1, @<span class="title">PathVariable</span> <span class="params">(<span class="string">"variable2"</span>)</span> <span class="keyword">int</span> variable2) </span>&#123;</div><div class="line">       ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</div><div class="line">       modelAndView.setViewName( <span class="string">"viewName"</span> );</div><div class="line">       modelAndView.addObject( <span class="string">" 需要放到 model 中的属性名称 "</span> , <span class="string">" 对应的属性值，它是一个对象 "</span> );</div><div class="line">       <span class="keyword">return</span> modelAndView;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  URI 模板就是在 URI 中给定一个变量，然后在映射的时候动态的给该变量赋值。如URI 模板<a href="http://localhost/app/{variable1}/index.html" target="_blank" rel="external">http://localhost/app/{variable1}/index.html</a> ，这个模板里面包含一个变量variable1 ，那么当我们请求<a href="http://localhost/app/hello/index.html" target="_blank" rel="external">http://localhost/app/hello/index.html</a> 的时候，该URL 就跟模板相匹配，只是把模板中的variable1 用hello 来取代。这个变量在SpringMVC 中是使用@PathVariable 来标记的。在SpringMVC 中，我们可以使用@PathVariable 来标记一个Controller 的处理方法参数，表示该参数的值将使用URI 模板中对应的变量的值来赋值。</p>
<p>  代码中我们定义了两个URI 变量，一个是控制器类上的variable1 ，一个是showView 方法上的variable2 ，然后在showView 方法的参数里面使用@PathVariable 标记使用了这两个变量。所以当我们使用/test/hello/showView/2.do 来请求的时候就可以访问到MyController 的showView 方法，这个时候variable1 就被赋予值hello ，variable2 就被赋予值2 ，然后我们在showView 方法参数里面标注了参数variable1 和variable2 是来自访问路径的path 变量，这样方法参数variable1 和variable2 就被分别赋予hello 和2 。方法参数variable1 是定义为String 类型，variable2 是定义为int 类型，像这种简单类型在进行赋值的时候Spring 是会帮我们自动转换的。</p>
<p>  在上面的代码中我们可以看到在标记variable1 为path 变量的时候我们使用的是@PathVariable ，而在标记variable2 的时候使用的是@PathVariable(“variable2”) 。这两者有什么区别呢？第一种情况就默认去URI 模板中找跟参数名相同的变量，但是这种情况只有在使用debug 模式进行编译的时候才可以，而第二种情况是明确规定使用的就是URI 模板中的variable2 变量。当不是使用debug 模式进行编译，或者是所需要使用的变量名跟参数名不相同的时候，就要使用第二种方式明确指出使用的是URI 模板中的哪个变量。</p>
<p>  除了在请求路径中使用URI 模板，定义变量之外，@RequestMapping 中还支持通配符“* ”。如下面的代码我就可以使用/myTest/whatever/wildcard.do 访问到Controller 的testWildcard 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span> ( <span class="string">"/myTest"</span> )</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</div><div class="line">    <span class="meta">@RequestMapping</span> ( <span class="string">"*/wildcard"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testWildcard</span><span class="params">()</span> </span>&#123;</div><div class="line">       System. out .println( <span class="string">"wildcard------------"</span> );</div><div class="line">       <span class="keyword">return</span> <span class="string">"wildcard"</span> ;</div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="params属性"><a href="#params属性" class="headerlink" title="params属性"></a>params属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span> (value= <span class="string">"testParams"</span> , params=&#123; <span class="string">"param1=value1"</span> , <span class="string">"param2"</span> , <span class="string">"!param3"</span> &#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testParams</span><span class="params">()</span> </span>&#123;</div><div class="line">    System. out .println( <span class="string">"test Params..........."</span> );</div><div class="line">    <span class="keyword">return</span> <span class="string">"testParams"</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  用@RequestMapping 的params 属性指定了三个参数，这些参数都是针对请求参数而言的，它们分别表示参数param1 的值必须等于value1 ，参数param2 必须存在，值无所谓，参数param3 必须不存在，只有当请求/testParams.do 并且满足指定的三个参数条件的时候才能访问到该方法。所以当请求/testParams.do?param1=value1&amp;param2=value2 的时候能够正确访问到该testParams 方法，当请求/testParams.do?param1=value1&amp;param2=value2&amp;param3=value3 的时候就不能够正常的访问到该方法，因为在@RequestMapping 的params 参数里面指定了参数param3 是不能存在的。</p>
<h3 id="method属性"><a href="#method属性" class="headerlink" title="method属性"></a>method属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span> (value= <span class="string">"testMethod"</span> , method=&#123;RequestMethod. GET , RequestMethod. DELETE &#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"method"</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  在上面的代码中就使用method 参数限制了以GET 或DELETE 方法请求/testMethod 的时候才能访问到该Controller 的testMethod 方法。</p>
<h3 id="headers属性"><a href="#headers属性" class="headerlink" title="headers属性"></a>headers属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span> (value= <span class="string">"testHeaders"</span> , headers=&#123; <span class="string">"host=localhost"</span> , <span class="string">"Accept"</span> &#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHeaders</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"headers"</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  headers 属性的用法和功能与params 属性相似。在上面的代码中当请求/testHeaders.do 的时候只有当请求头包含Accept 信息，且请求的host 为localhost 的时候才能正确的访问到testHeaders 方法。</p>
<h3 id="RequestMapping-标记的处理器方法支持的方法参数和返回类型"><a href="#RequestMapping-标记的处理器方法支持的方法参数和返回类型" class="headerlink" title="@RequestMapping 标记的处理器方法支持的方法参数和返回类型"></a>@RequestMapping 标记的处理器方法支持的方法参数和返回类型</h3><p>  <strong>1.支持的方法参数类型</strong></p>
<p>   （1）HttpServlet 对象，主要包括HttpServletRequest 、HttpServletResponse 和HttpSession 对象。 这些参数Spring 在调用处理器方法的时候会自动给它们赋值，所以当在处理器方法中需要使用到这些对象的时候，可以直接在方法上给定一个方法参数的申明，然后在方法体里面直接用就可以了。但是有一点需要注意的是在使用HttpSession 对象的时候，如果此时HttpSession 对象还没有建立起来的话就会有问题。</p>
<p>   （2）Spring 自己的WebRequest 对象。 使用该对象可以访问到存放在HttpServletRequest 和HttpSession 中的属性值。</p>
<p>   （3）InputStream 、OutputStream 、Reader 和Writer 。 InputStream 和Reader 是针对HttpServletRequest 而言的，可以从里面取数据；OutputStream 和Writer 是针对HttpServletResponse 而言的，可以往里面写数据。</p>
<p>   （4）使用@PathVariable 、@RequestParam 、@CookieValue 和@RequestHeader 标记的参数。</p>
<p>   （5）使用@ModelAttribute 标记的参数。</p>
<p>   （6）java.util.Map 、Spring 封装的Model 和ModelMap 。 这些都可以用来封装模型数据，用来给视图做展示。</p>
<p>   （7）实体类。 可以用来接收上传的参数。</p>
<p>   （8）Spring 封装的MultipartFile 。 用来接收上传文件的。</p>
<p>   （9）Spring 封装的Errors 和BindingResult 对象。 这两个对象参数必须紧接在需要验证的实体对象参数之后，它里面包含了实体对象的验证结果。</p>
<p>  <strong>2.支持的返回类型</strong></p>
<p>   （1）一个包含模型和视图的ModelAndView 对象。</p>
<p>   （2）一个模型对象，这主要包括Spring 封装好的Model 和ModelMap ，以及java.util.Map ，当没有视图返回的时候视图名称将由RequestToViewNameTranslator 来决定。</p>
<p>   （3）一个View 对象。这个时候如果在渲染视图的过程中模型的话就可以给处理器方法定义一个模型参数，然后在方法体里面往模型中添加值。</p>
<p>   （4）一个String 字符串。这往往代表的是一个视图名称。这个时候如果需要在渲染视图的过程中需要模型的话就可以给处理器方法一个模型参数，然后在方法体里面往模型中添加值就可以了。</p>
<p>   （5）返回值是void 。这种情况一般是我们直接把返回结果写到HttpServletResponse 中了，如果没有写的话，那么Spring 将会利用RequestToViewNameTranslator 来返回一个对应的视图名称。如果视图中需要模型的话，处理方法与返回字符串的情况相同。</p>
<p>   （6）如果处理器方法被注解@ResponseBody 标记的话，那么处理器方法的任何返回类型都会通过HttpMessageConverters 转换之后写到HttpServletResponse 中，而不会像上面的那些情况一样当做视图或者模型来处理。</p>
<p>   （7）除以上几种情况之外的其他任何返回类型都会被当做模型中的一个属性来处理，而返回的视图还是由RequestToViewNameTranslator 来决定，添加到模型中的属性名称可以在该方法上用@ModelAttribute(“attributeName”) 来定义，否则将使用返回类型的类名称的首字母小写形式来表示。使用@ModelAttribute 标记的方法会在@RequestMapping 标记的方法执行之前执行。</p>
<h2 id="Resource-和-Autowired"><a href="#Resource-和-Autowired" class="headerlink" title="@Resource 和 @Autowired"></a>@Resource 和 @Autowired</h2><p>  @Resource和@Autowired都是做bean的注入时使用，其实@Resource并不是Spring的注解，它的包是javax.annotation.Resource，需要导入，但是Spring支持该注解的注入。</p>
<h3 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h3><p>  两者都可以写在字段和setter方法上。两者如果都写在字段上，那么就不需要再写setter方法。</p>
<h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><p>  <strong>(1) @Autowired</strong></p>
<p>  @Autowired为Spring提供的注解，需要导入包org.springframework.beans.factory.annotation.Autowired;只按照byType注入。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImpl</span> </span>&#123;</div><div class="line">    <span class="comment">// 下面两种@Autowired只要使用一种即可</span></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserDao userDao; <span class="comment">// 用于字段上</span></div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123; <span class="comment">// 用于属性的方法上</span></div><div class="line">        <span class="keyword">this</span>.userDao = userDao;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  @Autowired注解是按照类型（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。如果我们想使用按照名称（byName）来装配，可以结合@Qualifier注解一起使用。如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImpl</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="meta">@Qualifier</span>(<span class="string">"userDao"</span>)</div><div class="line">    <span class="keyword">private</span> UserDao userDao; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  <strong>(2) @Resource</strong></p>
<p>  @Resource默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。@Resource有两个重要的属性：name和type，而Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImpl</span> </span>&#123;</div><div class="line">    <span class="comment">// 下面两种@Resource只要使用一种即可</span></div><div class="line">    <span class="meta">@Resource</span>(name=<span class="string">"userDao"</span>)</div><div class="line">    <span class="keyword">private</span> UserDao userDao; <span class="comment">// 用于字段上</span></div><div class="line">    </div><div class="line">    <span class="meta">@Resource</span>(name=<span class="string">"userDao"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123; <span class="comment">// 用于属性的setter方法上</span></div><div class="line">        <span class="keyword">this</span>.userDao = userDao;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  注：最好是将@Resource放在setter方法上，因为这样更符合面向对象的思想，通过set、get去操作属性，而不是直接去操作属性。</p>
<p>  <strong>@Resource装配顺序：</strong></p>
<p>  ①如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常。</p>
<p>  ②如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常。</p>
<p>  ③如果指定了type，则从上下文中找到类似匹配的唯一bean进行装配，找不到或是找到多个，都会抛出异常。</p>
<p>  ④如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配。</p>
<p>  @Resource的作用相当于@Autowired，只不过@Autowired按照byType自动注入。</p>
<h2 id="ModelAttribute-和-SessionAttributes"><a href="#ModelAttribute-和-SessionAttributes" class="headerlink" title="@ModelAttribute 和 @SessionAttributes"></a>@ModelAttribute 和 @SessionAttributes</h2><p>  该Controller的所有方法在调用前，先执行此@ModelAttribute方法，可用于注解和方法参数中，可以把这个@ModelAttribute特性，应用在BaseController当中，所有的Controller继承BaseController，即可实现在调用Controller时，先执行@ModelAttribute方法。</p>
<p>  @SessionAttributes即将值放到session作用域中，写在class上面。</p>
<h3 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes"></a>@SessionAttributes</h3><p>  @SessionAttributes:</p>
<p>  该注解用来绑定HttpSession中的attribute对象的值，便于在方法中的参数里使用。</p>
<p>  该注解有value、types两个属性，可以通过名字和类型指定要使用的attribute 对象；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>  </div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/editPet.do"</span>)  </div><div class="line"><span class="meta">@SessionAttributes</span>(<span class="string">"pet"</span>)  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditPetForm</span> </span>&#123;  </div><div class="line">    <span class="comment">// ...   </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-ModelAttribute"><a href="#2-ModelAttribute" class="headerlink" title="2.@ModelAttribute"></a>2.@ModelAttribute</h3><p>  该注解有两个用法，一个是用于方法上，一个是用于参数上；</p>
<p>  用于方法上时： 通常用来在处理@RequestMapping之前，为请求绑定需要从后台查询的model；</p>
<p>  用于参数上时： 用来通过名称对应，把相应名称的值绑定到注解的参数bean上；要绑定的值来源于：</p>
<p>  A） @SessionAttributes 启用的attribute 对象上；</p>
<p>  B） @ModelAttribute 用于方法上时指定的model对象；</p>
<p>  C） 上述两种情况都没有时，new一个需要绑定的bean对象，然后把request中按名称对应的方式把值绑定到bean中。</p>
<p>  <strong>用到方法上</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ModelAttribute</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">addAccount</span><span class="params">(@RequestParam String number)</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> accountManager.findAccount(number);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  这种方式实际的效果就是在调用@RequestMapping的方法之前，为request对象的model里put（“account”， Account）。</p>
<p>  <strong>用在参数上</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;/edit"</span>, method = RequestMethod.POST)  </div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processSubmit</span><span class="params">(@ModelAttribute Pet pet)</span> </span>&#123;  </div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  首先查询 @SessionAttributes有无绑定的Pet对象，若没有则查询@ModelAttribute方法层面上是否绑定了Pet对象，若没有则将URI template中的值按对应的名称绑定到Pet对象的各属性上。</p>
<h3 id="3-使用-ModelAttribute-和-SessionAttributes-传递和保存数据"><a href="#3-使用-ModelAttribute-和-SessionAttributes-传递和保存数据" class="headerlink" title="3.使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据"></a>3.使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据</h3><p>  当 @ModelAttribute 标记在方法上的时候，该方法将在处理器方法执行之前执行，然后把返回的对象存放在 session 或模型属性中，属性名称可以使用 @ModelAttribute(“attributeName”) 在标记方法的时候指定，若未指定，则使用返回类型的类名称（首字母小写）作为属性名称。关于 @ModelAttribute 标记在方法上时对应的属性是存放在 session 中还是存放在模型中，我们来做一个实验，看下面一段代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span> ( <span class="string">"/myTest"</span> )</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@ModelAttribute</span> ( <span class="string">"hello"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getModel</span><span class="params">()</span> </span>&#123;</div><div class="line">       System. out .println( <span class="string">"-------------Hello---------"</span> );</div><div class="line">       <span class="keyword">return</span> <span class="string">"world"</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ModelAttribute</span> ( <span class="string">"intValue"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInteger</span><span class="params">()</span> </span>&#123;</div><div class="line">       System. out .println( <span class="string">"-------------intValue---------------"</span> );</div><div class="line">       <span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span> ( <span class="string">"sayHello"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">( @ModelAttribute ( <span class="string">"hello"</span> )</span> String hello, @<span class="title">ModelAttribute</span> <span class="params">( <span class="string">"intValue"</span> )</span> <span class="keyword">int</span> num, @<span class="title">ModelAttribute</span> <span class="params">( <span class="string">"user2"</span> )</span> User user, Writer writer, HttpSession session) <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">       writer.write( <span class="string">"Hello "</span> + hello + <span class="string">" , Hello "</span> + user.getUsername() + num);</div><div class="line">       writer.write( <span class="string">"\r"</span> );</div><div class="line">       Enumeration enume = session.getAttributeNames();</div><div class="line">       <span class="keyword">while</span> (enume.hasMoreElements())</div><div class="line">           writer.write(enume.nextElement() + <span class="string">"\r"</span> );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ModelAttribute</span> ( <span class="string">"user2"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123;</div><div class="line">       System. out .println( <span class="string">"---------getUser-------------"</span> );</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">"user2"</span> );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  当我们请求 /myTest/sayHello.do 的时候使用 @ModelAttribute 标记的方法会先执行，然后把它们返回的对象存放到模型中。最终访问到 sayHello 方法的时候，使用 @ModelAttribute 标记的方法参数都能被正确的注入值。执行结果如下所示：</p>
<p>  <em>Hello world,Hello user210</em></p>
<p>  由执行结果我们可以看出来，此时 session 中没有包含任何属性，也就是说上面的那些对象都是存放在模型属性中，而不是存放在 session 属性中。那要如何才能存放在 session 属性中呢？这个时候我们先引入一个新的概念 @SessionAttributes ，它的用法会在讲完 @ModelAttribute 之后介绍，这里我们就先拿来用一下。我们在 MyController 类上加上 @SessionAttributes 属性标记哪些是需要存放到 session 中的。看下面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span> ( <span class="string">"/myTest"</span> )</div><div class="line"><span class="meta">@SessionAttributes</span> (value=&#123; <span class="string">"intValue"</span> , <span class="string">"stringValue"</span> &#125;, types=&#123;User. <span class="class"><span class="keyword">class</span> &#125;)</span></div><div class="line"><span class="title">public</span> <span class="title">class</span> <span class="title">MyController</span> &#123;</div><div class="line"></div><div class="line">    <span class="meta">@ModelAttribute</span> ( <span class="string">"hello"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getModel</span><span class="params">()</span> </span>&#123;</div><div class="line">       System. out .println( <span class="string">"-------------Hello---------"</span> );</div><div class="line">       <span class="keyword">return</span> <span class="string">"world"</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ModelAttribute</span> ( <span class="string">"intValue"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInteger</span><span class="params">()</span> </span>&#123;</div><div class="line">       System. out .println( <span class="string">"-------------intValue---------------"</span> );</div><div class="line">       <span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="meta">@RequestMapping</span> ( <span class="string">"sayHello"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(Map&lt;String, Object&gt; map, @ModelAttribute ( <span class="string">"hello"</span> )</span> String hello, @<span class="title">ModelAttribute</span> <span class="params">( <span class="string">"intValue"</span> )</span> <span class="keyword">int</span> num, @<span class="title">ModelAttribute</span> <span class="params">( <span class="string">"user2"</span> )</span> User user, Writer writer, HttpServletRequest request) <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">       map.put( <span class="string">"stringValue"</span> , <span class="string">"String"</span> );</div><div class="line">       writer.write( <span class="string">"Hello "</span> + hello + <span class="string">" , Hello "</span> + user.getUsername() + num);</div><div class="line">       writer.write( <span class="string">"\r"</span> );</div><div class="line">       HttpSession session = request.getSession();</div><div class="line">       Enumeration enume = session.getAttributeNames();</div><div class="line">       <span class="keyword">while</span> (enume.hasMoreElements())</div><div class="line">           writer.write(enume.nextElement() + <span class="string">"\r"</span> );</div><div class="line">       System. out .println(session);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ModelAttribute</span> ( <span class="string">"user2"</span> )</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</div><div class="line">       System. out .println( <span class="string">"---------getUser-------------"</span> );</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">"user2"</span> );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  在上面代码中我们指定了属性为 intValue 或 stringValue 或者类型为 User 的都会放到 Session中，利用上面的代码当我们访问 /myTest/sayHello.do 的时候，结果如下：</p>
<p>  <em>Hello world,Hello user210</em></p>
<p>  仍然没有打印出任何 session 属性，这是怎么回事呢？怎么定义了把模型中属性名为 intValue 的对象和类型为 User 的对象存到 session 中，而实际上没有加进去呢？难道我们错啦？我们当然没有错，只是在第一次访问 /myTest/sayHello.do 的时候 @SessionAttributes 定义了需要存放到 session 中的属性，而且这个模型中也有对应的属性，但是这个时候还没有加到 session 中，所以 session 中不会有任何属性，等处理器方法执行完成后 Spring 才会把模型中对应的属性添加到 session 中。所以当请求第二次的时候就会出现如下结果：</p>
<p>  <em>Hello world,Hello user210</em></p>
<p>  <em>user2</em></p>
<p>  <em>intValue</em></p>
<p>  <em>stringValue</em></p>
<p>  当 @ModelAttribute 标记在处理器方法参数上的时候，表示该参数的值将从模型或者 Session 中取对应名称的属性值，该名称可以通过 @ModelAttribute(“attributeName”) 来指定，若未指定，则使用参数类型的类名称（首字母小写）作为属性名称。</p>
<h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2><p>  用于将请求URL中的模板变量映射到功能处理方法的参数上，即取出url模板中的变量作为参数。若方法参数名称和需要绑定的uri template中变量名称不一致，需要在@PathVariable(“name”)指定uri template中的名称。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;  </div><div class="line">     <span class="meta">@RequestMapping</span>(value=<span class="string">"/user/&#123;userId&#125;/roles/&#123;roleId&#125;"</span>,method = RequestMethod.GET)  </div><div class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getLogin</span><span class="params">(@PathVariable(<span class="string">"userId"</span>)</span> String userId,  </span></div><div class="line">                            @<span class="title">PathVariable</span><span class="params">(<span class="string">"roleId"</span>)</span> String roleId)&#123;  </div><div class="line">         System.out.println(<span class="string">"User Id : "</span> + userId);  </div><div class="line">         System.out.println(<span class="string">"Role Id : "</span> + roleId);  </div><div class="line">         <span class="keyword">return</span> <span class="string">"hello"</span>;  </div><div class="line">     &#125;  </div><div class="line">     <span class="meta">@RequestMapping</span>(value=<span class="string">"/product/&#123;productId&#125;"</span>,method = RequestMethod.GET)  </div><div class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getProduct</span><span class="params">(@PathVariable(<span class="string">"productId"</span>)</span> String productId)</span>&#123;  </div><div class="line">           System.out.println(<span class="string">"Product Id : "</span> + productId);  </div><div class="line">           <span class="keyword">return</span> <span class="string">"hello"</span>;  </div><div class="line">     &#125;  </div><div class="line">     <span class="meta">@RequestMapping</span>(value=<span class="string">"/javabeat/&#123;regexp1:[a-z-]+&#125;"</span>,  </div><div class="line">           method = RequestMethod.GET)  </div><div class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getRegExp</span><span class="params">(@PathVariable(<span class="string">"regexp1"</span>)</span> String regexp1)</span>&#123;  </div><div class="line">           System.out.println(<span class="string">"URI Part 1 : "</span> + regexp1);  </div><div class="line">           <span class="keyword">return</span> <span class="string">"hello"</span>;  </div><div class="line">     &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><p>  @RequestParam主要用于在SpringMVC后台控制层获取参数，类似一种是request.getParameter(“name”)，它有三个常用参数：defaultValue = “0”, required = false, value = “isApp”；defaultValue 表示设置默认值，required 通过boolean设置是否是必须要传入的参数，value 值表示接受的传入的参数类型。</p>
<p>  A）常用来处理简单类型的绑定，通过Request.getParameter() 获取的String可直接转换为简单类型的情况（ String–&gt; 简单类型的转换操作由ConversionService配置的转换器来完成）；因为使用request.getParameter()方式获取参数，所以可以处理get 方式中queryString的值，也可以处理post方式中 body data的值；</p>
<p>  B）用来处理Content-Type: 为 application/x-www-form-urlencoded编码的内容，提交方式GET、POST；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>  </div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/pets"</span>)  </div><div class="line"><span class="meta">@SessionAttributes</span>(<span class="string">"pet"</span>)  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditPetForm</span> </span>&#123;  </div><div class="line">   <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)  </div><div class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">setupForm</span><span class="params">(@RequestParam(<span class="string">"petId"</span>)</span> <span class="keyword">int</span> petId, ModelMap model) </span>&#123;  </div><div class="line">       Pet pet = <span class="keyword">this</span>.clinic.loadPet(petId);  </div><div class="line">       model.addAttribute(<span class="string">"pet"</span>, pet);  </div><div class="line">   <span class="keyword">return</span> <span class="string">"petForm"</span>;  </div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h2><p>  该注解常用来处理Content-Type: 不是application/x-www-form-urlencoded编码的内容，例如application/json, application/xml等；</p>
<p>  它是通过使用 HandlerAdapter 配置的HttpMessageConverters来解析post data body，然后绑定到相应的bean上的。</p>
<p>  因为配置有FormHttpMessageConverter，所以也可以用来处理 application/x-www-form-urlencoded的内容，处理完的结果放在一个MultiValueMap<string, string="">里，这种情况在某些特殊需求下使用，详情查看FormHttpMessageConverter api;</string,></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/something"</span>, method = RequestMethod.PUT)  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(@RequestBody String body, Writer writer)</span> <span class="keyword">throws</span> IOException </span>&#123;  </div><div class="line">    writer.write(body);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h2><p>  作用：该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。</p>
<p>  使用时机：返回的数据不是html标签的页面，而是其他某种格式的数据时（如json、xml等）使用；</p>
<h2 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h2><p>  @RequestHeader 注解，可以把Request请求header部分的值绑定到方法的参数上。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">这是一个Request 的header部分：</div><div class="line"></div><div class="line">Host                    localhost:8080  </div><div class="line">Accept                  text/html,application/xhtml+xml,application/xml;q=0.9  </div><div class="line">Accept-Language         fr,en-gb;q=0.7,en;q=0.3  </div><div class="line">Accept-Encoding         gzip,deflate  </div><div class="line">Accept-Charset          ISO-8859-1,utf-8;q=0.7,*;q=0.7  </div><div class="line">Keep-Alive              300</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/displayHeaderInfo.do"</span>)  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayHeaderInfo</span><span class="params">(@RequestHeader(<span class="string">"Accept-Encoding"</span>)</span> String encoding,  </span></div><div class="line">                              @<span class="title">RequestHeader</span><span class="params">(<span class="string">"Keep-Alive"</span>)</span> <span class="keyword">long</span> keepAlive)  &#123;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  上面的代码，把request header部分的 Accept-Encoding的值，绑定到参数encoding上了， Keep-Alive header的值绑定到参数keepAlive上。</p>
<h2 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h2><p>  @CookieValue 可以把Request header中关于cookie的值绑定到方法的参数上。</p>
<p>  例如有如下Cookie值：</p>
<p>　　  JSESSIONID=415A4AC178C59DACE0B2C9CA727CDD84<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/displayHeaderInfo.do"</span>)  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayHeaderInfo</span><span class="params">(@CookieValue(<span class="string">"JSESSIONID"</span>)</span> String cookie)  </span>&#123;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  即把JSESSIONID的值绑定到参数cookie上。</p>
<h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h2><p>  相当于通用的注解，当不知道一些类归到哪个层时使用，但是不建议。</p>
<h2 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h2><p>  用于注解dao层，在daoImpl类上面注解。</p>
<h1 id="lt-context-component-scan-base-package-“”-gt-浅析"><a href="#lt-context-component-scan-base-package-“”-gt-浅析" class="headerlink" title="&lt; context:component-scan base-package = “” /&gt;浅析"></a>&lt; context:component-scan base-package = “” /&gt;浅析</h1><p>  component-scan 默认扫描的注解类型是 @Component，不过，在 @Component 语义基础上细化后的 @Repository, @Service 和 @Controller 也同样可以获得 component-scan 的青睐</p>
<p>  有了<code>&lt;context:component-scan&gt;</code>，另一个<code>&lt;context:annotation-config/&gt;</code>标签根本可以移除掉，因为已经被包含进去了</p>
<p>  另外<code>&lt;context:annotation-config/&gt;</code>还提供了两个子标签</p>
<p>  1.<code>&lt;context:include-filter&gt;</code> //指定扫描的路径</p>
<p>  2.<code>&lt;context:exclude-filter&gt;</code> //排除扫描的路径</p>
<p>  <code>&lt;context:component-scan&gt;</code> 有一个use-default-filters属性，属性默认为true,表示会扫描指定包下的全部的标有@Component的类，并注册成bean.也就是@Component的子注解@Service,@Repository等。</p>
<p>  这种扫描的粒度有点太大，如果你只想扫描指定包下面的Controller或其他内容则设置use-default-filters属性为false，表示不再按照scan指定的包扫描，而是按照<code>&lt;context:include-filter&gt;</code>指定的包扫描，示例：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.tan"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span> <span class="attr">expression</span>=<span class="string">"com.tan.*"</span>/&gt;</span>//注意后面要写.*</div><div class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  当没有设置use-default-filters属性或者属性为true时，表示基于base-package包下指定扫描的具体路径</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.tan"</span> &gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span> <span class="attr">expression</span>=<span class="string">".controller.*"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span> <span class="attr">expression</span>=<span class="string">".service.*"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span> <span class="attr">expression</span>=<span class="string">".dao.*"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  效果相当于：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.tan"</span> &gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span> <span class="attr">expression</span>=<span class="string">".model.*"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Spring MVC </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 框架 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git常用命令]]></title>
      <url>/2017/09/05/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>记录一些Git命令</p>
<p>专用名词：</p>
<ul>
<li><p>Workspace: 工作区</p>
</li>
<li><p>Index/ Stage: 暂存区</p>
</li>
<li><p>Repository: 仓库区（本地仓库）</p>
</li>
<li><p>Remote: 远程仓库</p>
</li>
</ul>
<a id="more"></a>
<h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png" alt=""></p>
<h2 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h2><p><code>$ git init</code> # 在当前目录新建一个git代码库</p>
<p><code>$ git init [project-name]</code> # 新建一个目录，将其初始化为Git仓库</p>
<p><code>$ git clone [url]</code> # 下载一个项目和它的整个代码历史</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Git 的设置文件为<code>.gitconfig</code>, 它可以在用户主目录下（全局配置）， 也可以在项目目录下（项目配置）。</p>
<p><code>$ git config --list</code> # 显示当前的Git配置</p>
<p><code>$ git config -e [--global]</code> # 编辑Git配置文件</p>
<pre><code>$ git config [--global] user.name &quot;[name]&quot;

$ git config [--global] user.email &quot;[email address]&quot; # 设置提交代码时的用户信息
</code></pre><h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h2><p><code>$ git add [file1] [file2] ...</code> # 添加指定文件到暂存区</p>
<p><code>$ git add [dir]</code> # 添加指定目录到暂存区，包括子目录</p>
<p><code>$ git add .</code> # 添加当前目录所有文件到暂存区</p>
<p><code>$ git add -p</code> # 添加每个变化前，都会要求确认。 对于同一个文件的多处变化，可以多次提交</p>
<p><code>$ git rm [file1] [file2]</code> # 删除工作区文件，并且将这次删除放入暂存区</p>
<p><code>$ git rm --cached [file]</code> # 停止追踪指定文件，但该文件会保留在工作区</p>
<p><code>$ git mv [file-original] [file-renamed]</code> # 改名文件，并且将这个改名放入暂存区</p>
<h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><p><code>$ git commit -m [message]</code> # 提交暂存区到仓库区</p>
<p><code>$ git commit [file1] [file2] -m [message]</code> # 提交暂存区的指定文件到仓库区</p>
<p><code>$ git commit -a</code> # 提交工作区自上次 commit 之后的变化，直接到仓库区</p>
<p><code>$ git commit -v</code> # 提交时显示所有的 diff 信息</p>
<p><code>$ git commit -amend -m [message]</code> # 使用一次新的 commit ，替代上一次提交。如果代码没有任何新变化，则用来改写上一次 commit 的提交信息</p>
<p><code>$ git commit -amend [file1] [file2] ...</code> # 重做上一次 commit ，并包括指定文件的新变化</p>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p><code>$ git branch</code> # 列出所有本地分支</p>
<p><code>$ git branch -r</code> # 列出所有远程分支</p>
<p><code>$ git branch -a</code> # 列出所有本地分支和远程分支</p>
<p><code>$ git branch [branch-name]</code> # 新建一个分支，但依然停留在当前分支</p>
<p><code>$ git branch -b [branch]</code> # 新建一个分支，并切换到该分支</p>
<p><code>$ git branch [branch] [commit]</code> # 新建一个分支，指向指定commit</p>
<p><code>$ git branch --track [branch] [remote-branch]</code> # 新建一个分支，与指定的远程分支建立追踪关系</p>
<p><code>$ git checkout [branch-name]</code> # 切换到指定分支，并更新工作区</p>
<p><code>$ git checkout -</code> # 切换到上一个分支</p>
<p><code>$ git merge [branch]</code> # 合并指定分支到当前分支</p>
<p><code>$ git cherry-pick [commit]</code> # 选择一个commit，合并进当前分支</p>
<p><code>$ git branch -d [branch-name]</code> # 删除分支</p>
<pre><code>$ git push origin -delete [branch-name] 

$ git branch -dr [remote/branch] # 删除远程分支
</code></pre><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p><code>$ git tag</code> # 列出所有tag</p>
<p><code>$ git tag [tag]</code> # 新建一个tag在当前commit</p>
<p><code>$ git tag [tag] [commit]</code> # 新建一个tag在指定commit</p>
<p><code>$ git tag -d [tag]</code> # 删除本地tag</p>
<p><code>$ git push origin :refs/tags/[tagName]</code> # 删除远程tag</p>
<p><code>$ git show [tag]</code> # 查看tag信息</p>
<p><code>$ git push [remote] [tag]</code> # 提交指定tag</p>
<p><code>$ git push [remote] --tags</code> # 提交所有tag </p>
<p><code>$ git checkout -b [branch] [tag]</code> # 新建一个分支，指向某个tag</p>
<h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><p><code>$ git status</code> # 显示有变更的文件</p>
<p><code>$ git log</code> # 显示当前分支的版本历史</p>
<p><code>$ git log --stat</code> # 显示commit历史，以及每次commit发生变更的文件</p>
<p><code>$ git log -S [keyword]</code> # 搜索提交历史，根据关键词</p>
<p><code>$ git log [tag] HEAD --pretty=format:%s</code> # 显示某个commit之后的所有变动，每个commit占据一行</p>
<p><code>$ git log [tag] HEAD --grep feature</code> # 显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件</p>
<pre><code>$ git log --follow [file]

$ git whatchange [file] # 显示某个文件的版本历史，包括文件改名
</code></pre><p><code>$ git log -p [file]</code> # 显示指定文件相关的每一次diff</p>
<p><code>$ git log -5 --pretty --oneline</code> # 显示过去5次提交</p>
<p><code>$ git shortlog -sn</code> # 显示所有提交过的用户，按提交次数排序</p>
<p><code>$ git blame [file]</code> # 显示指定文件是什么人在什么时间修改过</p>
<p><code>$ git diff</code> # 显示暂存区和工作区的差异</p>
<p><code>$ git diff --cached [file]</code> # 显示暂存区和上一个commit的差异</p>
<p><code>$ git diff HEAD</code> # 显示工作区与当前分支最新commit之间的差异</p>
<p><code>$ git diff [first-branch]...[second-branch]</code> # 显示两次提交之间的差异</p>
<p><code>$ git diff --shortstat &quot;@{0 day ago}&quot;</code> # 显示今天你写了多少行代码</p>
<p><code>$ git show [commit]</code> # 显示某次提交的元数据和内容变化</p>
<p><code>$ git show --name-only [commit]</code> # 显示某次提交发生变化的文件</p>
<p><code>$ git show [commit]:[filename]</code> # 显示某次提交时，某个文件的内容</p>
<p><code>$ git reflog</code> # 显示当前分支的最近几次提交</p>
<h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><p><code>$ git fetch [remote]</code> # 下载远程仓库的所有变动</p>
<p><code>$ git remote -v</code> # 显示所有远程仓库</p>
<p><code>$ git remote show [remote]</code> # 显示某个远程仓库的信息</p>
<p><code>$ git remote add [shortname] [url]</code> # 增加一个新的远程仓库，并命名</p>
<p><code>$ git pull [remote] [branch]</code> # 取回远程仓库的变化，并与本地分支合并</p>
<p><code>$ git push [remote] [branch]</code> # 上传本地指定分支到远程仓库</p>
<p><code>$ git push [remote] --force</code> # 强行推送当前分支到远程仓库，即使有冲突</p>
<p><code>$ git push [remote] --all</code> # 推送所有分支到远程仓库</p>
<h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><p><code>$ git checkout [file]</code> # 恢复暂存区的指定文件到工作区</p>
<p><code>$ git checkout [commit] [file]</code> # 恢复某个commit的指定文件到暂存区和工作区</p>
<p><code>$ git checkout .</code> # 恢复暂存区的所有文件到工作区</p>
<p><code>$ git reset [file]</code> # 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</p>
<p><code>$ git reset --hard</code> # 重置暂存区与工作区，与上一次commit保持一致</p>
<p><code>$ git reset [commit]</code> # 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</p>
<p><code>$ git reset --hard [commit]</code> # 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</p>
<p><code>$ git reset --keep [commit]</code> # 重置当前HEAD为指定commit，但保持暂存区和工作区不变</p>
<p><code>$ git revert [commit]</code> # 新建一个commit，用来撤销指定commit。后者的所有变化都将被前者抵消，并且应用到当前分支。</p>
<pre><code>$ git stash

$ git stash pop # 暂时将未提交的变化移除，稍后再移入
</code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><code>$ git archive</code> # 生成一个可供发布的压缩包</p>
]]></content>
      
        <categories>
            
            <category> 常用命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo常用命令笔记]]></title>
      <url>/2017/06/30/hexo/</url>
      <content type="html"><![CDATA[<h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><pre><code>npm install hexo -g #安装  
npm update hexo -g #升级  
hexo init #初始化
</code></pre><a id="more"></a>
<h2 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h2><p><code>hexo n &quot;我的博客&quot;</code> == <code>hexo new</code> “我的博客” #新建文章</p>
<p><code>hexo p</code> == <code>hexo publish</code></p>
<p><code>hexo g</code> == <code>hexo generate</code> #生成</p>
<p><code>hexo s</code> == <code>hexo server</code> #启动服务预览</p>
<p><code>hexo d</code> == <code>hexo deploy</code> #部署</p>
<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p><code>`
</code>hexo server` #Hexo 会监视文件变动并自动更新，您无须重启服务器。</p>
<p><code>hexo server -s</code> #静态模式</p>
<p><code>hexo server -p 5000</code> #更改端口</p>
<p><code>hexo server -i 192.168.1.1</code> #自定义 IP</p>
<p><code>hexo clean</code> #清除缓存 网页正常情况下可以忽略此条命令</p>
<p><code>hexo g</code> #生成静态网页</p>
<p><code>hexo d</code> #开始部署</p>
<h3 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3><p><code>hexo generate</code> #使用 Hexo 生成静态文件快速而且简单</p>
<p><code>hexo generate --watch</code> #监视文件变动</p>
<h3 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h3><pre><code>两个命令的作用是相同的
hexo generate --deploy
hexo deploy --generate
</code></pre><p><code>hexo deploy -g</code><br><code>hexo server -g</code></p>
<h2 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h2><p><code>hexo publish [layout] &lt;title&gt;</code></p>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p><code>hexo new &quot;postName&quot;</code> #新建文章</p>
<p><code>hexo new page &quot;pageName&quot;</code> #新建页面</p>
<p><code>hexo generate</code> #生成静态页面至public目录</p>
<p><code>hexo server</code> #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p>
<p><code>hexo deploy</code> #将.deploy目录部署到GitHub</p>
<p><code>hexo new [layout] &lt;title&gt;</code></p>
<p><code>hexo new photo &quot;My Gallery&quot;</code></p>
<p><code>hexo new &quot;Hello World&quot; --lang tw</code></p>
<h2 id="设置文章摘要"><a href="#设置文章摘要" class="headerlink" title="设置文章摘要"></a>设置文章摘要</h2><pre><code>以上是文章摘要 &lt;!--more--&gt; 以下是余下全文 
</code></pre><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p><code>hexo new page &lt;title&gt;</code></p>
<p><code>hexo new post &lt;title&gt;</code></p>
<p>###推送到服务器上</p>
<p><code>hexo n</code> #写文章</p>
<p><code>hexo g</code> #生成</p>
<p><code>hexo d</code> #部署 #可与hexo g合并为 hexo d -g</p>
]]></content>
      
        <categories>
            
            <category> 常用命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第一个问题]]></title>
      <url>/2017/06/29/Second/</url>
      <content type="html"><![CDATA[<h2 id="部署博客后的第一个问题"><a href="#部署博客后的第一个问题" class="headerlink" title="部署博客后的第一个问题"></a>部署博客后的第一个问题</h2><p>第一次通过 hexo + github 部署博客，并且绑定了个人域名。</p>
<p>但是在每次部署之后使用个人域名访问博客，就会出现 404 界面。</p>
<a id="more"></a>
<p>今天在搞定主题之后，直接上传就关了电脑，结果用手机访问博客时发现出现 404 界面。</p>
<p>爬起来开机去 github 的仓库中看了之后发现 在 setting 绑定的域名失效了，又变成了 github 的二级域名</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在百度了之后，绑定域名后DNS解析一定要修改，需要添加记录类型为 CNAME 的解析记录，其中记录值为 yourname.github.io</p>
<p>CNAME 是将自己的域名指向你的 github 域名</p>
<p>同时，在本地的 source 文件夹里创建 CNAME 文件 （注意：是CNAME 不是CHAME） 不带任何后缀</p>
<p>里面添加你的域名信息，如： xanxus.xin 不能含有 www 或者 http：//</p>
<p>然后<code>hexo d -g</code></p>
]]></content>
      
        <categories>
            
            <category> 测试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 侃侃 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[First]]></title>
      <url>/2017/06/29/First/</url>
      <content type="html"><![CDATA[<h2 id="第一篇文章"><a href="#第一篇文章" class="headerlink" title="第一篇文章"></a>第一篇文章</h2><p>从今天开始，咱也是有博客的人了，虽然目前能力低，没有什么有价值的文章哈哈哈哈哈哈哈哈哈哈哈</p>
<a id="more"></a>
<p>这个博客主要用来记录平时学习的心得体会，遇到的问题以及解决办法</p>
<p>虽然目前遇到的问题很简单，网上很容易找到答案。。。。。。。。</p>
<p>呃。。。。</p>
<p>也没啥要说的，希望这个博客能陪我到毕业甚至工作，也希望这个博客中能记录更多有价值的内容。</p>
]]></content>
      
        <categories>
            
            <category> 测试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 侃侃 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FirstTest]]></title>
      <url>/2017/06/29/FirstTest/</url>
      <content type="html"><![CDATA[<p>这是一篇测试用文章</p>
<p>第一次测试</p>
<p>第一次使用hexo搭建博客</p>
<a id="more"></a>
<p>#测试</p>
<p>这是一篇测试用文章</p>
<p>第一次测试</p>
<p>第一次使用hexo搭建博客</p>
<p>首次目标，上传至github，并成功。</p>
]]></content>
      
        
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/06/29/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
